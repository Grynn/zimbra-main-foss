
<project name="ZimbraOffline" default="offline-jar">

    <property file="build.properties"/>                                    
	<property environment="env" />
	<property name="offline.appid" value="4062-5711-9195-4050"/>
	<property name="offline.name" value="Yahoo! Zimbra Desktop"/>
	<condition property="offline.relabel" value="ALPHA">
	    <not><isset property="offline.relabel"/></not>
	</condition>                                                                           
	<condition property="offline.version" value="0.1">
	    <not><isset property="offline.version"/></not>
	</condition>
	<condition property="offline.buildid" value="1">
	    <not><isset property="offline.buildid"/></not>
        </condition>

	<!-- Properties -->

	<property name="jarfile" value="zimbraoffline.jar" />
	<property name="config.dir" value="conf" />
	<property name="src.dir" location="src" />
	<property name="src.java.dir" location="${src.dir}/java" />
	<property name="jars.dir" location="jars" />
	<property name="build.dir" location="build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.src.java.dir" location="${build.dir}/src/java" />
	<property name="dist.dir" location="${build.dir}/dist" />
	<property name="jetty.dir" location="${dist.dir}/jetty" />
	<property name="zimlet.dir" location="../Zimlet/build/dist" />

	<property name="server.config.dir" value="../ZimbraServer/conf" />
	<property name="server.src.dir" location="../ZimbraServer/src" />
	<property name="server.build.dir" location="../ZimbraServer/build" />
	<property name="server.lib.dir" location="../ZimbraServer/lib" />
	<property name="server.tools.lib.dir" location="../ZimbraServer/tools/lib" />
	<property name="server.classes.dir" location="${server.build.dir}/classes" />

	<property name="common.dir" location="../ZimbraCommon" />
	<property name="common.jars.dir" location="${common.dir}/jars" />
	<property name="common.classes.dir" location="${common.dir}/build/classes" />

	<property name="im.dir" location="../ZimbraIM" />
	<property name="im.jars.dir" location="${im.dir}/jars" />
	<property name="im.classes.dir" location="${im.dir}/build/classes" />

	<condition property="is-windows">
		<os family="windows" />
	</condition>
	<condition property="is-unix">
		<not>
			<os family="windows" />
		</not>
	</condition>

	<!-- offline must be able to run from a path with spaces. here we have default dev installation -->
	<!-- path contain space characters so that if this is broken, we can catch it right away.       -->
	<condition property="zimbra.home.dir" value="/opt/zimbra/zdesktop" else="/opt/zimbra/zdesktop dev">
		<isset property="is-windows"/>
	</condition>

	<property name="zimbra.derby.dir" location="${zimbra.home.dir}/derby" />

	<property name="build.zmprov" location="${build.dir}/data/zmprov.txt" />

	<property name="build.derbyij" location="${dist.dir}/db/derbyij.sql" />
	<property name="zimbra.derbyij" location="${zimbra.home.dir}/db/derbyij.sql" />
	<property name="build.up_ver_ij" location="${dist.dir}/db/up_ver_ij.sql" />
	<property name="build.reindex_ij" location="${dist.dir}/db/reindex_ij.sql" />

	<property name="server.warfile" location="${server.build.dir}/service.war" />
	<property name="server.jarfile" location="${server.build.dir}/zimbrastore.jar" />
	<property name="common.jarfile" location="${common.dir}/build/zimbracommon.jar" />

	<property name="server.wiki.dir" location="${server.build.dir}/dist/wiki" />

	<property name="ical4j.jar" value="ical4j-0.9.16-patched.jar" />

    <condition property="db-sqlite">
		<isset property="env.ZIMBRA_OFFLINE_USE_SQLITE" />
	</condition>
	<condition property="db-derby">
		<not><isset property="db-sqlite"/></not>
	</condition>

	<condition property="src.db.dir" value="${src.dir}/db/derby" else="${src.dir}/db/sqlite">
		<isset property="db-derby" />
	</condition>
	<condition property="server.db.dir" value="${server.src.dir}/db/derby" else="${server.src.dir}/db/sqlite">
		<isset property="db-derby" />
	</condition>

	<property name="jetty.home.dir" location="${zimbra.home.dir}/jetty" />

	<property name="webclient.dir" value="../ZimbraWebClient" />
	<property name="zimbra.warfile" location="${webclient.dir}/build/dist/jetty/webapps/zimbra.war" />

	<property name="jetty.src.dir" location="../ThirdParty/jetty" />
	<property name="prism.src.dir" location="../ThirdParty/prism" />
	<property name="xulrunner.src.dir" location="../ThirdParty/xulrunner" />
	<property name="jetty.version" value="6.1.5" />


	<!-- JAXWS definitions for YMail SOAP API -->

	<property name="jaxws.dir" value="tools/jaxws" />
	<property name="ymail.wsdl" value="http://mail.yahooapis.com/ws/mail/v1.1/wsdl"/>
	<property name="jaxb.bindings" value="${config.dir}/jaxb-bindings.xml"/>
	<property name="ymail.classes.dir" value="${build.dir}/ymail-classes"/>
	<property name="ymail.jar" value="${jars.dir}/ymail.jar"/>

	<fileset id="jaxws.jars" dir="${jaxws.dir}/lib">
		<include name="*.jar"/>
		<exclude name="jaxb-xjc.jar"/>
		<exclude name="jaxws-tools.jar"/>
	</fileset>

        <fileset id="gdata.jars" dir="${jars.dir}">
                <include name="gdata-*.jar"/>
        </fileset>

	<path id="jaxws.classpath">
		<pathelement location="${java.home}/../lib/tools.jar"/>
		<fileset dir="${jaxws.dir}/lib">
			<include name="*.jar"/>
		</fileset>
	</path>

	<taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
		<classpath refid="jaxws.classpath"/>
	</taskdef>

	<target name="generate-ymail-client" description="Generate YMail SOAP client jar">
		<delete dir="${ymail.classes.dir}"/>
		<mkdir dir="${ymail.classes.dir}"/>
		<wsimport verbose="true" debug="true" keep="true" extension="true"
				  wsdl="${ymail.wsdl}"
				  binding="${jaxb.bindings}"
				  package="com.yahoo.mail"
				  destdir="${ymail.classes.dir}"/>
		<jar destfile="${build.dir}/ymail.jar" basedir="${ymail.classes.dir}"/>
		<copy todir="${jars.dir}" file="${build.dir}/ymail.jar"/>
		<delete dir="${ymail.classes.dir}"/>
	</target>

	<path id="all.java.path">
		<pathelement location="${src.java.dir}" />
	</path>

	<path id="offline.class.path">
		<pathelement location="${common.classes.dir}" />
		<pathelement location="${build.classes.dir}" />
		<pathelement location="${server.classes.dir}" />
		<fileset dir="${common.jars.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${jars.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${server.tools.lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<path refid="jaxws.classpath"/>
	</path>

	<path id="deploy.class.path">
		<fileset dir="${server.build.dir}/dist/lib/jars">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef name="odeploy" classname="org.apache.catalina.ant.DeployTask" classpathref="offline.class.path" />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${common.jars.dir}/ant-contrib-1.0b1.jar" />
		</classpath>
	</taskdef>

	<property name="zimbra.index.dir" location="${zimbra.home.dir}/index" />
	<property name="zimbra.store.dir" location="${zimbra.home.dir}/store" />

	<!-- Targets -->
	<target name="offline-build-init">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.src.java.dir}" />
		<mkdir dir="${build.dir}/data" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="offline-compile" depends="offline-build-init" description="Compiles the source code">
		<ant dir="${common.dir}" target="jar" inheritAll="false" />
		<ant dir="../ZimbraServer" target="dev-dist" inheritAll="false">
			<property name="zimbra.buildinfo.version" value="${offline.version}"/>
			<property name="zimbra.buildinfo.type" value="${offline.appid}"/>
			<property name="zimbra.buildinfo.release" value="${offline.name}"/>
		</ant>
		<javac destdir="${build.classes.dir}" debug="true" classpathref="offline.class.path">
			<src refid="all.java.path" />
		</javac>
	</target>

	<target name="offline-jar" depends="offline-compile" description="Creates the jar file">
		<jar destfile="${build.dir}/${jarfile}" basedir="${build.classes.dir}" excludes="com/zimbra/cs/offline/jsp/**"/>
		<jar destfile="${build.dir}/offlinejsp.jar" basedir="${build.classes.dir}" includes="com/zimbra/cs/offline/common/*.class,com/zimbra/cs/offline/jsp/*.class"/>
		<jar destfile="${build.dir}/zdesktop.jar" basedir="${build.classes.dir}" includes="com/zimbra/cs/offline/start/Main.class" />
	</target>

	<target name="offline-clean" description="Removes build files and undeploys extension">
		<delete dir="${build.dir}" />
		<ant dir="../ZimbraCommon" target="clean" inheritAll="false" />
		<ant dir="../ZimbraServer" target="clean" inheritAll="false" />
		<ant dir="../ZimbraWebClient" target="clean" inheritAll="false" />
	</target>

	<target name="offline-war" depends="offline-jar">
		<unzip src="${server.warfile}" dest="${dist.dir}/jetty/webapps/service" overwrite="true"/>
		<copy file="${config.dir}/web.xml" todir="${dist.dir}/jetty/webapps/service/WEB-INF" overwrite="true"/>
		<copy todir="${dist.dir}/jetty/webapps/service/WEB-INF/lib" overwrite="true">
			<fileset dir="${build.dir}" includes="${jarfile}"/>
			<fileset file="${ymail.jar}"/>
		</copy>
	</target>

	<target name="offline-zimbra-war">
		<ant dir="../ZimbraWebClient" target="war" inheritAll="false" />
		<unzip src="${zimbra.warfile}" dest="${dist.dir}/jetty/webapps/zimbra" overwrite="true"/>
		<delete dir="${dist.dir}/jetty/webapps/zimbra/help"/>
		<copy file="${config.dir}/web_zimbra.xml" tofile="${dist.dir}/jetty/webapps/zimbra/WEB-INF/web.xml" overwrite="true"/>

		<tstamp><format property="build.simpleDate" pattern="yyMMddHHmmss" /></tstamp>
		<replace file="${dist.dir}/jetty/webapps/zimbra/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}"/>

		<copy todir="${dist.dir}/jetty/webapps/zimbra/desktop" overwrite="true">
			<fileset dir="WebRoot/desktop" />
		</copy>
		<copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/tags/desktop" overwrite="true">
			<fileset dir="WebRoot/WEB-INF/tags/desktop" />
		</copy>
		<copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/classes/desktop" overwrite="true">
			<fileset dir="WebRoot/WEB-INF/classes/desktop" />
		</copy>
                <copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/classes/messages" overwrite="true">
                        <fileset dir="WebRoot/WEB-INF/classes/desktop" />
                </copy>
		<copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/tlds" overwrite="true">
			<fileset dir="WebRoot/WEB-INF/tlds" />
		</copy>
		<copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/lib" overwrite="true">
			<fileset dir="${build.dir}" includes="offlinejsp.jar"/>
		</copy>

		<!--<unzip src="../ZimbraWebClient/WebRoot/help/WebHelp.zip" dest="${dist.dir}/jetty/webapps/zimbra" overwrite="true"/>-->
		<!--<move file="${dist.dir}/jetty/webapps/zimbra/WebHelp" tofile="${dist.dir}/jetty/webapps/zimbra/help" />-->
		<copy file="src/installer/resources/launcher_16x16.ico" tofile="${dist.dir}/jetty/webapps/zimbra/favicon.ico" overwrite="true"/>
		<copy file="${dist.dir}/jetty/webapps/zimbra/favicon.ico" tofile="${dist.dir}/jetty/webapps/zimbra/img/logo/favicon.ico" overwrite="true"/>

		<replace file="${dist.dir}/jetty/webapps/zimbra/skins/_base/base2/splash.html" token="&lt;div id='ZLoginAppName'&gt;&lt;script&gt;document.write(ZmMsg.splashScreenAppName)&lt;/script&gt;&lt;/div&gt;" value=""/>
		<replace file="${dist.dir}/jetty/webapps/zimbra/skins/_base/base2/splash.html" token="&lt;td id='ZLoginSwitchMsg'&gt;&lt;script&gt;document.write(ZmMsg.splashScreenSwitch)&lt;/script&gt;&lt;/td&gt;" value=""/>
		<!--replace file="${dist.dir}/jetty/webapps/zimbra/skins/_base/base2/splash.html" token="ZmMsg.splashScreenAppName" value="ZmMsg.splashScreenOfflineName"/-->
		<replace file="${dist.dir}/jetty/webapps/zimbra/skins/_base/base/skin.html" token="&lt;div id='ZLoginAppName'&gt;&lt;script&gt;document.write(ZmMsg.splashScreenAppName)&lt;/script&gt;&lt;/div&gt;" value=""/>
		<replace file="${dist.dir}/jetty/webapps/zimbra/skins/_base/base/skin.html" token="&lt;a href='javascript:switchToStandardClient()'&gt;&lt;script&gt;document.write(ZmMsg.switchToStandardClient)&lt;/script&gt;&lt;/a&gt;" value=""/>
		<!--replace file="${dist.dir}/jetty/webapps/zimbra/skins/_base/base/skin.html" token="ZmMsg.splashScreenAppName" value="ZmMsg.splashScreenOfflineName"/-->

		<delete dir="${dist.dir}/jetty/webapps/zimbra/skins/yahoo2"/>

		<copy file="src/installer/resources/LoginBanner.png" tofile="${dist.dir}/jetty/webapps/zimbra/skins/_base/logos/LoginBanner.png" overwrite="true"/>
		<copy file="src/installer/resources/LoginBanner.png" tofile="${dist.dir}/jetty/webapps/zimbra/skins/_base/logos/ZimbraInside/LoginBanner.png" overwrite="true"/>
		<copy file="src/installer/resources/LoginBanner.png" tofile="${dist.dir}/jetty/webapps/zimbra/skins/yahoo/logos/LoginBanner.png" overwrite="true"/>

	</target>

	<target name="offline-jspc">
		<mkdir dir="../ZimbraWebClient/build/WebRoot/desktop"/>
		<copy todir="../ZimbraWebClient/build/WebRoot/desktop" overwrite="true">
			<fileset dir="WebRoot/desktop" includes="*.jsp"/>
		</copy>
		<mkdir dir="../ZimbraWebClient/build/WebRoot/WEB-INF/tags/desktop"/>
		<copy todir="../ZimbraWebClient/build/WebRoot/WEB-INF/tags/desktop" overwrite="true">
			<fileset dir="WebRoot/WEB-INF/tags/desktop" includes="*.tag"/>
		</copy>
		<mkdir dir="../ZimbraWebClient/build/WebRoot/WEB-INF/classes/desktop"/>
		<copy todir="../ZimbraWebClient/build/WebRoot/WEB-INF/classes/desktop" overwrite="true">
			<fileset dir="WebRoot/WEB-INF/classes/desktop" includes="*.properties"/>
		</copy>
		<copy todir="../ZimbraWebClient/build/WebRoot/WEB-INF/tlds" overwrite="true">
			<fileset dir="WebRoot/WEB-INF/tlds" />
		</copy>
		<mkdir dir="../ZimbraWebClient/build/WebRoot/WEB-INF/lib"/>
		<copy file="${build.dir}/offlinejsp.jar" todir="../ZimbraWebClient/build/WebRoot/WEB-INF/lib" overwrite="true"/>

		<ant dir="../ZimbraWebClient" target="jspc.offline_build" inheritAll="false" />
		<mkdir dir="${dist.dir}/jetty/work/zimbra/jsp"/>
		<copy todir="${dist.dir}/jetty/work/zimbra/jsp" overwrite="true">
			<fileset dir="../ZimbraWebClient/build/dist/jetty/work/zimbra/jsp"/>
		</copy>
	</target>

	<target name="offline-db-init" depends="offline-sqlite-init,offline-derby-init" />

	<target name="offline-sqlite-init" if="db-sqlite">
		<echo>Setting store and index directories to '${zimbra.store.dir}' and '${zimbra.index.dir}'</echo>
		<sql driver="com.sqlite.jdbc.Driver" url="jdbc:sqlite://localhost:7306/" userid="root" password="zimbra" classpathref="offline.class.path" onerror="continue" keepformat="true" src="${server.db.dir}/dropdb.sql" />
		<sql driver="com.sqlite.jdbc.Driver" url="jdbc:sqlite://localhost:7306/" userid="root" password="zimbra" classpathref="offline.class.path" onerror="abort" keepformat="true">
			<transaction src="${server.db.dir}/db.sql" />
			<transaction src="${src.db.dir}/directory.sql" />
			<transaction src="${server.build.dir}/versions-init.sql" />
			<transaction>
				INSERT INTO volume (id, type, name, path, file_bits, file_group_bits,
				    mailbox_bits, mailbox_group_bits, compress_blobs, compression_threshold)
				  VALUES (1, 1, 'message1', '${zimbra.store.dir}', 12, 8, 12, 8, 0, 4096);
				INSERT INTO volume (id, type, name, path, file_bits, file_group_bits,
				    mailbox_bits, mailbox_group_bits, compress_blobs, compression_threshold)
				  VALUES (2, 10, 'index1', '${zimbra.index.dir}', 12, 8, 12, 8, 0, 4096);

				INSERT INTO current_volumes (message_volume_id, index_volume_id, next_mailbox_id) VALUES (1, 2, 1);
			</transaction>
		</sql>
	</target>

	<target name="offline-derby-init" if="db-derby">
		<echo>Setting store and index directories to '${zimbra.store.dir}' and '${zimbra.index.dir}'</echo>
		<delete dir="${zimbra.derby.dir}" />

		<java classname="org.apache.derby.tools.ij" fork="true" classpathref="offline.class.path" failonerror="true">
			<arg file="${zimbra.derbyij}" />
		</java>
	</target>

	<target name="offline-gen-versions-init">
		<java classname="com.zimbra.cs.db.Derby" fork="true" classpathref="offline.class.path" failonerror="true">
			<arg line="-o ${dist.dir}/db" />
		</java>
	</target>

	<target name="offline-gen-derbyij">
		<echo file="${build.derbyij}">
			CONNECT 'jdbc:derby:${param.derby.dir};create=true';

			RUN '${param.db.dir}/db.sql';
			RUN '${param.db.dir}/directory.sql';
			RUN '${param.db.dir}/versions-init.sql';

			INSERT INTO volume (id, type, name, path, file_bits, file_group_bits,
			    mailbox_bits, mailbox_group_bits, compress_blobs, compression_threshold)
			  VALUES (1, 1, 'message1', '${param.store.dir}', 12, 8, 12, 8, 0, 4096);
			INSERT INTO volume (id, type, name, path, file_bits, file_group_bits,
			    mailbox_bits, mailbox_group_bits, compress_blobs, compression_threshold)
			  VALUES (2, 10, 'index1', '${param.index.dir}', 12, 8, 12, 8, 0, 4096);

			INSERT INTO current_volumes (message_volume_id, index_volume_id, next_mailbox_id) VALUES (1, 2, 1);

			EXIT;
		</echo>
	</target>

	<target name="offline-gen-upverij">
		<echo file="${build.up_ver_ij}">
            CONNECT 'jdbc:derby:${param.derby.dir}';

        	UPDATE zimbra.config set value='52' where name='db.version';
			COMMIT;

        	EXIT;
        </echo>
	</target>

	<target name="offline-gen-reindexij">
		<echo file="${build.reindex_ij}">
            CONNECT 'jdbc:derby:${param.derby.dir}';

			DROP INDEX mboxgroup1.i_mail_item_folder_id_date;
			CREATE INDEX mboxgroup1.i_mail_item_folder_id_date ON mail_item(mailbox_id, folder_id, date DESC);

			DROP INDEX mboxgroup1.i_mail_item_tags_date;
			CREATE INDEX mboxgroup1.i_mail_item_tags_date ON mail_item(mailbox_id, tags, date DESC);

			DROP INDEX mboxgroup1.i_mail_item_flags_date;
			CREATE INDEX mboxgroup1.i_mail_item_flags_date ON mail_item(mailbox_id, flags, date DESC);

			COMMIT;

            EXIT;
        </echo>
	</target>

	<target name="offline-dev-dist">
		<antcall target="offline-war" />
		<antcall target="offline-zimbra-war" />

		<copy tofile="${dist.dir}/conf/localconfig.xml" file="${config.dir}/localconfig.xml" overwrite="true" />
		<copy tofile="${dist.dir}/conf/log4j.properties" file="${config.dir}/log4j.properties" overwrite="true" />
		<copy tofile="${dist.dir}/conf/datasource.properties" file="${config.dir}/datasource.properties" overwrite="true" />
		<copy tofile="${dist.dir}/conf/derby.properties" file="${config.dir}/derby.properties" overwrite="true" />
		<copy tofile="${dist.dir}/conf/timezones.ics" file="${server.config.dir}/timezones.ics" overwrite="true" />
		<copy tofile="${dist.dir}/conf/zimbra-contact-fields.xml" file="${server.config.dir}/contacts/zimbra-contact-fields.xml" overwrite="true" />
		<copy todir="${dist.dir}/conf/msgs" overwrite="true">
			<fileset dir="${server.config.dir}/msgs" />
		</copy>
		<copy todir="${dist.dir}/conf/attrs" overwrite="true">
			<fileset dir="${server.build.dir}/attrs" />
		</copy>
		<copy todir="${dist.dir}/conf/attrs" overwrite="true">
			<fileset dir="${config.dir}/attrs" />
		</copy>
        <copy todir="${dist.dir}/conf/rights" overwrite="true">
            <fileset dir="${server.config.dir}/rights"/>
        </copy>
		<fixcrlf srcdir="${dist.dir}/conf" eol="unix" includes="**" />

		<copy tofile="${dist.dir}/conf/cacerts" file="${config.dir}/cacerts" overwrite="true" />
		<copy tofile="${dist.dir}/conf/keystore.base" file="${config.dir}/keystore.base" overwrite="true" />

		<copy tofile="${dist.dir}/jetty/etc/jetty.xml" file="${config.dir}/jetty-6.1/jetty.xml" overwrite="true" />
		<copy tofile="${dist.dir}/jetty/etc/start.config" file="${config.dir}/jetty-6.1/start.config" overwrite="true" />
		<copy tofile="${dist.dir}/jetty/etc/webdefault.xml" file="${server.config.dir}/jetty-6.1/webdefault.xml" overwrite="true" />

		<copy tofile="${dist.dir}/jetty/resources/log4j.properties" file="${server.config.dir}/jetty-6.1/log4j.properties.production" overwrite="true" />
		<copy todir="${dist.dir}/jetty/common/lib" overwrite="true">
			<fileset dir="${server.build.dir}/dist/jetty/common/lib" includes="*.jar" excludes="sqlite*.jar,mysql*.jar" />
			<fileset file="${common.jars.dir}/derby.jar"/>
			<fileset refid="jaxws.jars"/>
			<fileset refid="gdata.jars"/>
                </copy>
		<copy tofile="${dist.dir}/jetty/lib/log4j-1.2.8.jar" file="${common.jars.dir}/log4j-1.2.8.jar" overwrite="true" />

		<copy todir="${dist.dir}/db" overwrite="true">
			<fileset dir="${server.db.dir}" includes="*.sql" />
			<fileset dir="${src.db.dir}" includes="*.sql" />
		</copy>

		<copy tofile="${dist.dir}/lib/derbytools.jar" file="../ZimbraServer/tools/lib/derbytools.jar" overwrite="true" />
		<copy tofile="${dist.dir}/lib/zdesktop.jar" file="${build.dir}/zdesktop.jar" overwrite="true" />

        <mkdir dir="${dist.dir}/wiki/Templates" />
        <copy todir="${dist.dir}/wiki/Templates" overwrite="true">
            <fileset dir="${server.wiki.dir}/Template" />
        </copy> 
	</target>

	<target name="offline-deploy-zimlets">
		<foreach target="offline-install-zimlet" param="zimlet">
			<path>
				<fileset dir="${zimbra.home.dir}/zimlets" includes="*.zip" />
			</path>
			<param name="action" value="deploy" />
		</foreach>
	</target>

	<target name="offline-install-zimlet">
		<echo>${action} ${zimlet}</echo>
		<java classname="com.zimbra.cs.zimlet.ZimletUtil" fork="true" classpathref="deploy.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${zimbra.home.dir}/conf/localconfig.xml" />
			<arg line="-a http://localhost:7733/service/admin/soap/" />
			<arg line="-u http://localhost:7733/service/upload?fmt=raw" />
			<arg line="${action}" />
			<arg file="${zimlet}" />
		</java>
	</target>

	<target name="offline-add-sync-targets" depends="offline-build-init">
		<!-- insert only account-creation commands here, of the form "ca foo@zimbra.com my-p455w0rd offlineRemoteServerUri 'https://dogfood.zimbra.com'" -->
		<echo file="${build.zmprov}" />

		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="offline.class.path" failonerror="true">
			<arg line="-f ${build.zmprov} -v" />
		</java>
	</target>

	<property name="deploy.war" value="${warfile}" />
	<property name="deploy.host" value="localhost" />
	<property name="deploy.port" value="7733" />

	<target name="offline-refresh-war" depends="offline-war">
		<antcall target="offline-server-stop" />
		<delete dir="${jetty.home.dir}/webapps/service" />
		<unzip src="${warfile}" dest="${jetty.home.dir}/webapps/service" />
		<antcall target="offline-server-start" />
	</target>

	<target name="offline-server-start">
		<antcall target="start-jetty" />
		<echo>Waiting for jetty to start</echo>
		<waitfor checkevery="5" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<http url="http://${deploy.host}:${deploy.port}/service/soap" errorsBeginAt="500" />
		</waitfor>
		<waitfor checkevery="5" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<http url="http://${deploy.host}:${deploy.port}/service/admin/soap" errorsBeginAt="500" />
		</waitfor>
	</target>

	<target name="offline-server-stop">
		<antcall target="stop-jetty" />
		<echo>Waiting for jetty to stop</echo>
		<waitfor checkevery="1" checkeveryunit="second" maxwait="10" maxwaitunit="second">
			<not>
				<http url="http://${deploy.host}:${deploy.port}/" />
			</not>
		</waitfor>
	</target>

    <target name="start-jetty-windows" if="is-windows">
        <antcall target="start-jetty-java"/>
    </target>

    <target name="start-jetty-unix" if="is-unix">
        <exec executable="${zimbra.home.dir}/bin/offline">
            <arg value="start"/>
            <env key="ZIMBRA_HOME" value="${zimbra.home.dir}"/>
        </exec>
    </target>

    <target name="start-jetty" depends="start-jetty-windows,start-jetty-unix"/>

    <target name="stop-jetty-windows" if="is-windows">
        <antcall target="stop-jetty-java"/>
    </target>

    <target name="stop-jetty-unix" if="is-unix">
        <if>
            <available file="${zimbra.home.dir}/bin/offline" type="file"/>
            <then>
                <exec executable="${zimbra.home.dir}/bin/offline">
                    <arg value="stop"/>
                    <env key="ZIMBRA_HOME" value="${zimbra.home.dir}"/>
                </exec>
            </then>
            <else>
                <echo>Jetty not installed; skipping jetty stop</echo>
            </else>
        </if>
    </target>

    <target name="stop-jetty" depends="stop-jetty-windows,stop-jetty-unix"/>

	<target name="start-jetty-java">
		<java dir="${jetty.home.dir}" jar="${jetty.home.dir}/start.jar" fork="true" spawn="true">
			<sysproperty key="java.library.path" value="${zimbra.home.dir}/lib" />
			<sysproperty key="java.awt.headless" value="true" />
			<sysproperty key="START" value="${jetty.home.dir}/etc/start.config" />
			<sysproperty key="STOP.PORT" value="7678" />
			<sysproperty key="STOP.KEY" value="stop" />
			<sysproperty key="zimbra.config" value="${zimbra.home.dir}/conf/localconfig.xml" />
		</java>
	</target>

	<target name="stop-jetty-java">
		<java dir="${jetty.home.dir}" jar="${jetty.home.dir}/start.jar" fork="true" failonerror="true">
			<sysproperty key="STOP.PORT" value="7678" />
			<sysproperty key="STOP.KEY" value="stop" />
			<arg value="--stop" />
		</java>
	</target>

	<target name="offline-reset-the-world-part-1">
		<available file="${jetty.home.dir}/start.jar" property="jetty.exists" />
		<if>
			<isset property="jetty.exists" />
			<then>
				<antcall target="offline-server-stop" />
			</then>
		</if>
		<delete dir="${zimbra.home.dir}" />

		<antcall target="offline-make-dist">
			<param name="param.install.dir" value="${zimbra.home.dir}" />
			<param name="param.port" value="7733" />
		</antcall>

                <java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
                        <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
                        <arg line="-e javamail_imap_debug=false" />
                </java>
                <java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
                        <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
                        <arg line="-e javamail_pop3_debug=false" />
                </java>
                <java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
                        <sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
                        <arg line="-e javamail_smtp_debug=false" />
                </java>

		<replace file="${dist.dir}/conf/log4j.properties" token="log4j.logger.zimbra.offline.request=INFO" value="log4j.logger.zimbra.offline.request=DEBUG"/>
		<replace file="${dist.dir}/conf/log4j.properties" token="log4j.logger.zimbra.offline.response=INFO" value="log4j.logger.zimbra.offline.response=DEBUG"/>
		<replace file="${dist.dir}/conf/log4j.properties" token="@install@/log" value="${zimbra.home.dir}/log"/>

		<copy todir="${zimbra.home.dir}" overwrite="true">
			<fileset dir="${dist.dir}"/>
		</copy>

		<!--touch>
    			<fileset dir="${zimbra.home.dir}/jetty/work/zimbra/jsp"/>
		</touch-->

		<mkdir dir="${zimbra.home.dir}/log" />
		<mkdir dir="${zimbra.home.dir}/store" />
		<mkdir dir="${zimbra.home.dir}/index" />
		<mkdir dir="${zimbra.home.dir}/redolog" />
		<mkdir dir="${zimbra.home.dir}/redolog/archive" />
		<mkdir dir="${zimbra.home.dir}/bin" />

		<if>
			<isset property="is-unix" />
			<then>
				<copy tofile="${zimbra.home.dir}/bin/offline" file="src/bin/offline" overwrite="true"/>
		        	<chmod perm="a+rx">
		            		<fileset dir="${zimbra.home.dir}/bin"/>
		        	</chmod>
				<copy tofile="${zimbra.home.dir}/lib/libzimbra-native.jnilib" file="../ZimbraServer/lib/libzimbra-native.jnilib.MacOSX.i386" overwrite="true"/>
				<copy tofile="${zimbra.home.dir}/lib/libzimbra-native.so" file="../ZimbraServer/lib/libzimbra-native.so.Linux.i386" overwrite="true"/>
			</then>
		</if>

		<antcall target="offline-db-init" />

	</target>

	<target name="offline-reset-the-world-part-2">
		<antcall target="offline-deploy-zimlets" />
	</target>

	<target name="offline-reset-the-world" description="Offline R-T-W">
		<antcall target="offline-reset-the-world-part-1" />
		<antcall target="offline-server-start" />
		<antcall target="offline-reset-the-world-part-2" />
	</target>

	<target name="offline-make-dist">
		<antcall target="offline-clean" />

		<mkdir dir="${dist.dir}" />
		<gunzip src="${jetty.src.dir}/jetty-${jetty.version}.tar.gz" dest="${dist.dir}/jetty-${jetty.version}.tar" />
		<untar src="${dist.dir}/jetty-${jetty.version}.tar" dest="${dist.dir}" overwrite="true" />
		<move file="${dist.dir}/jetty-${jetty.version}" tofile="${dist.dir}/jetty" />
		<delete file="${dist.dir}/jetty-${jetty.version}.tar" />
		<mkdir dir="${dist.dir}/jetty/logs" />
		<mkdir dir="${dist.dir}/jetty/webapps" />
		<mkdir dir="${dist.dir}/jetty/work" />

		<antcall target="offline-dev-dist"/>

		<replace file="${dist.dir}/jetty/etc/jetty.xml" token="@port@" value="${param.port}"/>
		<replace file="${dist.dir}/jetty/webapps/service/WEB-INF/web.xml" token="@port@" value="${param.port}"/>
		<replace file="${dist.dir}/jetty/webapps/zimbra/WEB-INF/web.xml" token="@port@" value="${param.port}"/>

		<ant dir="../Zimlet" target="clean" inheritAll="false" />
		<ant dir="../Zimlet" target="package-zimlets" inheritAll="false" />
		<ant dir="../Zimlet" target="package-zimlets-offline" inheritAll="false" />
		<copy todir="${dist.dir}/zimlets" overwrite="true">
                        <fileset dir="../Zimlet/build/dist/zimlets" includes="*.zip" />
                        <fileset dir="../Zimlet/build/dist/zimlets-offline" includes="*.zip" />
		</copy>
		
		<antcall target="offline-gen-versions-init" />
		<antcall target="offline-gen-derbyij">
			<param name="param.derby.dir" value="${param.install.dir}/derby" />
			<param name="param.db.dir" value="${param.install.dir}/db" />
			<param name="param.build.dir" value="${param.install.dir}/db" />
			<param name="param.store.dir" value="${param.install.dir}/store" />
			<param name="param.index.dir" value="${param.install.dir}/index" />
		</antcall>

		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e zimbra_home='${param.install.dir}' -f" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e mailboxd_directory='${param.install.dir}/jetty'" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e mailboxd_pidfile='${param.install.dir}/log/jetty.pid'" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e zimlet_directory='${param.install.dir}/jetty/webapps/service/zimlet'" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e mailboxd_keystore='${param.install.dir}/conf/keystore'" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e zdesktop_relabel=${offline.relabel}" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e zdesktop_version=${offline.version}" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e zdesktop_buildid=${offline.buildid}" />
		</java>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="offline.class.path" failonerror="true">
			<sysproperty key="zimbra.config" value="${dist.dir}/conf/localconfig.xml" />
			<arg line="-e zimbra_admin_service_port=${param.port}" />
		</java>
		
		<mkdir dir="${dist.dir}/log"/>
		<mkdir dir="${dist.dir}/store"/>
		<mkdir dir="${dist.dir}/index"/>
		<mkdir dir="${dist.dir}/redolog"/>
	</target>

	<macrodef name="translate-prism-files">
		<attribute name="language"/> <attribute name="country" default=""/>
		<sequential>
			<if> <equals arg1="@{country}" arg2=""/>
				<then><var name="locale" value="@{language}"/></then>
				<else><var name="locale" value="@{language}-@{country}"/></else>
			</if>
			<translate toDir="${build.dir}/prism/chrome/${locale}/branding" starttoken="@" endtoken="@"
				bundle="src/installer/messages_utf8/ZiMsg" bundlelanguage="@{language}" bundlecountry="@{country}"
					forceoverwrite="yes" srcencoding="UTF8" destencoding="UTF8">
				<fileset dir="prism/i18n" includes="*.dtd *.properties"/>
			</translate>
			<move file="${build.dir}/prism/chrome/${locale}/branding/webrunner.dtd" todir="${build.dir}/prism/chrome/${locale}"/>
			<move file="${build.dir}/prism/chrome/${locale}/branding/about.dtd" todir="${build.dir}/prism/chrome/${locale}"/>
			<mkdir dir="${build.dir}/prism/chrome/${locale}/webapp"/>
			<move file="${build.dir}/prism/chrome/${locale}/branding/webapp.properties" todir="${build.dir}/prism/chrome/${locale}/webapp"/>				
		</sequential>	
	</macrodef>

	<target name="offline-prism-i18n">
		<native2ascii reverse="true" encoding="UTF8" src="src/installer/messages" dest="src/installer/messages_utf8" includes="*.properties" />

		<translate-prism-files language="en" country="US"/>
		<translate-prism-files language="fr"/>
		<translate-prism-files language="da"/>
		<translate-prism-files language="de"/>
		<translate-prism-files language="en" country="AU"/>
		<translate-prism-files language="en" country="GB"/>
		<translate-prism-files language="es" country="ES"/>
		<translate-prism-files language="it"/>
		<translate-prism-files language="ja"/>
		<translate-prism-files language="ko"/>
		<translate-prism-files language="nl"/>
		<translate-prism-files language="pl"/>
		<translate-prism-files language="pt" country="BR"/>
		<translate-prism-files language="ru"/>
		<translate-prism-files language="sv"/>
		<translate-prism-files language="zh" country="CN"/>
		<translate-prism-files language="zh" country="HK"/>		
	</target>

	<target name="offline-prep-launcher">
		<copy tofile="${dist.dir}/lib/libzimbra-native.jnilib" file="../ZimbraServer/lib/libzimbra-native.jnilib.MacOSX.i386" overwrite="true"/>
		<copy tofile="${dist.dir}/lib/libzimbra-native.so" file="../ZimbraServer/lib/libzimbra-native.so.Linux.i386" overwrite="true"/>

		<copy todir="${dist.dir}" overwrite="true">
			<fileset dir="src/installer" includes="README.txt" />
		</copy>
		<replace file="${dist.dir}/README.txt" token="@version@" value="${offline.version} (build ${offline.buildid})"/>

		<copy todir="${dist.dir}/zdesktop.webapp" overwrite="true">
			<fileset dir="src/installer/webapp" />
		</copy>
		<copy tofile="${dist.dir}/zdesktop.webapp/icons/default/launcher.icns" file="src/installer/resources/launcher_128x128.icns" overwrite="true"/>
		<copy tofile="${dist.dir}/zdesktop.webapp/icons/default/launcher.png" file="src/installer/resources/launcher_32x32.png" overwrite="true"/>
		<copy tofile="${dist.dir}/zdesktop.webapp/icons/default/launcher.ico" file="src/installer/resources/launcher_32x32.ico" overwrite="true"/>
		<copy tofile="${dist.dir}/zdesktop.webapp/icons/default/newmail.png" file="src/installer/resources/newmail_16x16.png" overwrite="true"/>

		<mkdir dir="${dist.dir}/macos"/>
		<mkdir dir="${dist.dir}/linux"/>
		<mkdir dir="${dist.dir}/win32"/>

		<copy todir="${dist.dir}/macos" overwrite="true">
			<fileset dir="src/installer" includes="launchd.plist quit_zdesktop.applescript svckill.msh" />
			<fileset dir="src/installer/resources" includes="launcher_128x128.icns" />
		</copy>
		<chmod file="${dist.dir}/macos/svckill.msh" perm="ugo+x"/>
		<copy todir="${dist.dir}/macos/Yahoo! Zimbra Desktop.app" overwrite="true">
			<fileset dir="src/installer/macos.app" includes="*/**" />
		</copy>
		<copy todir="${dist.dir}/macos/Yahoo! Zimbra Desktop.app/Contents/MacOS/" file="${dist.dir}/macos/prism/Prism.app/Contents/MacOS/prism"/>
		<chmod file="${dist.dir}/macos/Yahoo! Zimbra Desktop.app/Contents/MacOS/prism" perm="ugo+x"/>
		<replace file="${dist.dir}/macos/Yahoo! Zimbra Desktop.app/Contents/Info.plist" token="@version@" value="${offline.version}"/>

		<copy todir="${dist.dir}/linux" overwrite="true">
			<fileset dir="src/installer" includes="linux.desktop svckill.sh" />
		</copy>
		<chmod file="${dist.dir}/linux/svckill.sh" perm="ugo+x"/>

		<copy todir="${dist.dir}/win32" overwrite="true">
			<fileset dir="src/installer" includes="svckill.vbs" />
			<fileset dir="src/installer/resources" includes="launcher_32x32.ico" />
		</copy>
	</target>

	<target name="offline-prep-prism">
	    <!-- unzip original prism drops to dist dirs -->			
		<unzip src="${prism.src.dir}/prism-080922.macos.zip" dest="${dist.dir}/macos/prism" overwrite="true"/>
		<unzip src="${prism.src.dir}/prism-080922.win32.zip" dest="${dist.dir}/win32/prism" overwrite="true"/>
		<unzip src="${prism.src.dir}/prism-080922.linux.zip" dest="${dist.dir}/linux/prism" overwrite="true"/>

		<!-- delete unused refractor extensions from win32 and linux -->
		<delete dir="${dist.dir}/win32/prism/extensions/refractor@developer.mozilla.org"/>
		<delete dir="${dist.dir}/linux/prism/extensions/refractor@developer.mozilla.org"/>

		<!-- create patches for branding stuff in build dir, using mac's drop. the patches are common to mac/win/linux -->
		<copy todir="${build.dir}/prism/" overwrite="true">
			<fileset dir="${dist.dir}/macos/prism/Prism.app/Contents/Resources/extensions/prism-runtime@developer.mozilla.org" includes="*/**"/>
		</copy>
		<copy todir="${build.dir}/prism/" overwrite="true">
			<fileset dir="${prism.src.dir}/mac-080922/Prism.app/Contents/Resources/extensions/prism-runtime@developer.mozilla.org" includes="*/**"/>
		</copy>
		<replace file="${build.dir}/prism/defaults/preferences/preferences.js" token="@version@" value="${offline.version}"/>
		<replace file="${build.dir}/prism/chrome/webrunner/content/about.js" token="@version@" value="${offline.version}"/>
		<replace file="${build.dir}/prism/chrome/webrunner/content/about.js" token="@buildid@" value="${offline.buildid}"/>

		<antcall target="offline-prism-i18n"/>
        <copy tofile="${build.dir}/prism/chrome.manifest" file="prism/i18n/chrome.manifest" overwrite="true"/>

		<!-- use firefox xulrunner to replace the one comes with prism -->
		<delete>
			<fileset dir="${dist.dir}/macos/prism/Prism.app/Contents/Frameworks/XUL.framework"/>
			<fileset dir="${dist.dir}/win32/prism/xulrunner"/>
			<fileset dir="${dist.dir}/linux/prism/xulrunner"/>
		</delete>
       	<unzip src="${xulrunner.src.dir}/1.9.0.1/xulrunner-1.9.0.1.en-US.macos.zip" dest="${dist.dir}/macos/prism/Prism.app/Contents/Frameworks"/>
       	<unzip src="${xulrunner.src.dir}/1.9.0.1/xulrunner-1.9.0.1.en-US.win32.zip" dest="${dist.dir}/win32/prism"/>
       	<unzip src="${xulrunner.src.dir}/1.9.0.1/xulrunner-1.9.0.1.en-US.linux.zip" dest="${dist.dir}/linux/prism"/>
		<copy todir="${dist.dir}/macos/prism/Prism.app/Contents/Frameworks/XUL.framework/chrome" overwrite="true">
			<fileset dir="${xulrunner.src.dir}/locales" includes="*.manifest *.jar"/>
		</copy>
		<copy todir="${dist.dir}/win32/prism/xulrunner/chrome" overwrite="true">
			<fileset dir="${xulrunner.src.dir}/locales" includes="*.manifest *.jar"/>
		</copy>
		<copy todir="${dist.dir}/linux/prism/xulrunner/chrome" overwrite="true">
			<fileset dir="${xulrunner.src.dir}/locales" includes="*.manifest *.jar"/>
		</copy>

		<!-- patch xulrunner with our update service mod -->
		<copy tofile="${dist.dir}/macos/prism/Prism.app/Contents/Frameworks/XUL.framework/components/nsUpdateService.js" file="src/installer/updater/macos/nsUpdateService.js" overwrite="true"/>
		<copy tofile="${dist.dir}/macos/prism/Prism.app/Contents/Frameworks/XUL.framework/updater.app/Contents/MacOS/updater" file="src/installer/updater/macos/updater" overwrite="true"/>
		<chmod file="${dist.dir}/macos/prism/Prism.app/Contents/Frameworks/XUL.framework/updater.app/Contents/MacOS/updater" perm="ugo+x"/>
		<copy tofile="${dist.dir}/win32/prism/xulrunner/components/nsUpdateService.js" file="src/installer/updater/win32/nsUpdateService.js" overwrite="true"/>
		<copy tofile="${dist.dir}/win32/prism/xulrunner/updater.exe" file="src/installer/updater/win32/updater.exe" overwrite="true"/>
		<copy tofile="${dist.dir}/linux/prism/xulrunner/components/nsUpdateService.js" file="src/installer/updater/linux/nsUpdateService.js" overwrite="true"/>
		<copy tofile="${dist.dir}/linux/prism/xulrunner/updater" file="src/installer/updater/linux/updater" overwrite="true"/>
		<chmod file="${dist.dir}/linux/prism/xulrunner/updater" perm="ugo+x"/>

		<!-- set permissions executibles -->
		<chmod dir="${dist.dir}/macos/prism/Prism.app/Contents/Frameworks/XUL.framework/" perm="ugo+x" includes="*/**"/> 
		<chmod file="${dist.dir}/macos/prism/Prism.app/Contents/MacOS/prism" perm="ugo+x"/> 
		<chmod file="${dist.dir}/linux/prism/prism" perm="ugo+x"/>

		<!-- copy over patched branding stuff from build dir -->
		<copy todir="${dist.dir}/macos/prism/Prism.app/Contents/Resources/extensions/prism-runtime@developer.mozilla.org" overwrite="true">
			<fileset dir="${build.dir}/prism" includes="*/**"/>
		</copy>
		<copy todir="${dist.dir}/win32/prism/extensions/prism-runtime@developer.mozilla.org" overwrite="true">
			<fileset dir="${build.dir}/prism" includes="*/**"/>
		</copy>
		<copy todir="${dist.dir}/linux/prism/extensions/prism-runtime@developer.mozilla.org" overwrite="true">
			<fileset dir="${build.dir}/prism" includes="*/**"/>
		</copy>

		<!-- fix things that are specific to each platform -->
		<copy tofile="${dist.dir}/macos/prism/Prism.app/Contents/Resources/extensions/prism-runtime@developer.mozilla.org/chrome/webrunner/content/icon128.png" file="src/installer/resources/launcher_128x128.png" overwrite="true"/>
		<copy tofile="${dist.dir}/win32/prism/extensions/prism-runtime@developer.mozilla.org/chrome/webrunner/content/icon128.png" file="src/installer/resources/launcher_128x128.png" overwrite="true"/>
		<copy tofile="${dist.dir}/linux/prism/extensions/prism-runtime@developer.mozilla.org/chrome/webrunner/content/icon128.png" file="src/installer/resources/launcher_128x128.png" overwrite="true"/>
	
		<!-- unzip zimbra drag and drop extension -->
		<mkdir dir="${dist.dir}/profile/extensions/zimbradnd@zimbra.com"/>
		<unzip src="src/installer/extensions/ZimbraDnD.xpi" dest="${dist.dir}/profile/extensions/zimbradnd@zimbra.com" overwrite="true"/>
		
		<!-- unzip inquisitor extension -->
		<mkdir dir="${dist.dir}/profile/extensions/Inquisitor@yahoo"/>
		<unzip src="src/installer/extensions/inquisitor4prism.xpi" dest="${dist.dir}/profile/extensions/Inquisitor@yahoo" overwrite="true"/>

		<!-- any non-branding patches that are between prism drops should go here -->

	</target>

	<target name="test-launcher-mac">
		<replace file="${dist.dir}/macos/Yahoo! Zimbra Desktop.app/Contents/Resources/application.ini" token="@install@" value="${dist.dir}"/>
		<replace file="${dist.dir}/macos/Yahoo! Zimbra Desktop.app/Contents/Resources/extensions/prism-runtime@developer.mozilla.org" token="@install@" value="${dist.dir}"/>
	</target>
	
	<target name="offline-install-misc">
		<replace file="${dist.dir}/conf/log4j.properties" token="@install@/log/" value=""/>
		<replace file="${dist.dir}/conf/log4j.properties" token="log4j.rootLogger=INFO,CONSOLE,LOGFILE" value="log4j.rootLogger=INFO,LOGFILE"/>
		<replace file="${dist.dir}/jetty/resources/log4j.properties" token="/opt/zimbra/log/" value=""/>
	</target>

	<target name="offline-make-install-files">
		<antcall target="offline-make-dist">
			<param name="param.install.dir" value="@install@" />
			<param name="param.port" value="7633" />
		</antcall>
		<antcall target="offline-install-misc" />
		<antcall target="offline-prep-prism" />
        <antcall target="offline-prep-launcher" />
		<antcall target="offline-jspc" />
	</target>

	<target name="offline-sync-jsp-opt">
                <copy todir="${jetty.home.dir}/webapps/zimbra/desktop" overwrite="true">
                        <fileset dir="WebRoot/desktop" includes="**/*"/>
                </copy>
                <copy todir="${jetty.home.dir}/webapps/zimbra/WEB-INF/tags/desktop" overwrite="true">
                        <fileset dir="WebRoot/WEB-INF/tags/desktop" includes="*.tag" />
                </copy>
                <copy todir="${jetty.home.dir}/webapps/zimbra/WEB-INF/classes/desktop" overwrite="true">
                        <fileset dir="WebRoot/WEB-INF/classes/desktop" includes="*.properties" />
                </copy>
                <copy todir="${jetty.home.dir}/webapps/zimbra/WEB-INF/tlds" overwrite="true">
                        <fileset dir="WebRoot/WEB-INF/tlds" includes="*.tld" />
                </copy>
	</target>

	<target name="offline-sync-jsp-dist">
                <copy todir="${dist.dir}/jetty/webapps/zimbra/desktop" overwrite="true">
                        <fileset dir="WebRoot/desktop" includes="**/*"/>
                </copy>
                <copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/tags/desktop" overwrite="true">
                        <fileset dir="WebRoot/WEB-INF/tags/desktop" includes="*.tag"/>
                </copy>
                <copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/classes/desktop" overwrite="true">
                        <fileset dir="WebRoot/WEB-INF/classes/desktop" includes="*.properties"/>
                </copy>
                <copy todir="${dist.dir}/jetty/webapps/zimbra/WEB-INF/tlds" overwrite="true">
                        <fileset dir="WebRoot/WEB-INF/tlds" includes="*.tld"/>
                </copy>
	</target>

	<target name="offline-dev-sync">
		<ant dir="../ZimbraWebClient" target="dev-sync" inheritAll="false">
			<property name="webapp.dir" value="${jetty.home.dir}/webapps/zimbra/"/>
		</ant>
		<antcall target="offline-sync-jsp-opt"/>
		<copy file="${config.dir}/web_zimbra.xml" tofile="${jetty.home.dir}/webapps/zimbra/WEB-INF/web.xml" overwrite="true"/>
		<tstamp><format property="build.simpleDate" pattern="yyMMddHHmmss" /></tstamp>
		<replace file="${jetty.home.dir}/webapps/zimbra/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}"/>
		<replace file="${jetty.home.dir}/webapps/zimbra/WEB-INF/web.xml" token="@port@" value="7733"/>
	</target>

	<!--target name="offline-prism-webapp">
		<copy todir="${build.dir}/webapp" overwrite="true">
			<fileset dir="src/installer/webapp"/>
			<fileset dir="src/installer/resources" includes="launcher_32x32.ico,launcher_32x32.icns,launcher_32x32.xpm"/>
		</copy>
		<zip destfile="${build.dir}/zdesktop.webapp" basedir="${build.dir}/webapp" />
	</target>
	
        <target name="offline-prep-xulrunner">
		<copy todir="${build.dir}/xulrunner" overwrite="true">
			<fileset dir="../ThirdParty/xulrunner/1.9b4pre.en-US"/>
		</copy>
		<copy tofile="${build.dir}/xulrunner/macos/XUL.framework/components/nsUpdateService.js" file="src/installer/updater/macos/nsUpdateService.js" overwrite="true" />
		<copy tofile="${build.dir}/xulrunner/macos/XUL.framework/updater.app/Contents/MacOS/updater" file="src/installer/updater/macos/updater" overwrite="true" />
		<copy tofile="${build.dir}/xulrunner/linux/xulrunner/components/nsUpdateService.js" file="src/installer/updater/linux/nsUpdateService.js" overwrite="true" />
		<copy tofile="${build.dir}/xulrunner/linux/xulrunner/updater" file="src/installer/updater/linux/updater" overwrite="true" />
		<copy tofile="${build.dir}/xulrunner/win32/xulrunner/components/nsUpdateService.js" file="src/installer/updater/win32/nsUpdateService.js" overwrite="true" />
		<copy tofile="${build.dir}/xulrunner/win32/xulrunner/updater.exe" file="src/installer/updater/win32/updater.exe" overwrite="true" />
	</target-->

</project>

