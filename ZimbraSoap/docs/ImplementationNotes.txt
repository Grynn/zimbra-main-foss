Implementation Notes for JAXB classes
=====================================

Manual steps
------------
*    Marshalling / Unmarshalling support.
The code that is responsible for marshalling and unmarshalling JAXB classes
needs to know about the top level requests and response classes - see the
MESSAGE_CLASSES array in :
src/java/com/zimbra/soap/JaxbUtil.java 


Ordering of elements.
---------------------
For pre-existing requests, best not to force an ordering of elements in case
this breaks clients.
For responses, because the server controls the order, it is reasonable to
enforce an order.
For new requests and responses, probably reasonable to require an order.

Enforcing an order is achieved via the @XmlType annotation.  For example :
@XmlType(propOrder = {"hostNames", "stats", "note"})

The strings in the list are the names of fields which map to elements (NOT
the @XmlElement names).
Attributes cannot be ordered, so their field names are excluded.


@XmlRootElement
---------------
SOAP Request and Response classes must have this.
In a lot of JAXB, the root element associated with a field is chosen
by the @XmlElement annotation associated with the field - so there is no
need for an @XmlRootElement.  This has the added advantage that classes can
represent types independant of the element name used with them.
Problems were encountered in some of the COS related classes when an
un-necessary @XmlRootElement was used.  On the other hand, see the gotchas.
Sometimes an @XmlRootElement is required...

@XmlAccessorType
----------------
Tend to prefer XmlAccessType.NONE and explicitly label everything that needs
to be annotated rather than letting JAXB do some defaults.


Gotchas
-------
.   Unmarshalling from Xml may not correctly identify superclasses.
    Test before using! e.g. See :
        JaxbToElementTest.ConvActionRequestJaxbSubclassHandlingTestDisabled()
.   Target objects for @XmlElementRef etc must have an @XmlRootElement
    annotation
.   For structured fields, e.g. comma separated strings, there is a temptation
    to use non-JAXB fields for the real data.
.   Elements which have both sub-elements AND a value.  End up having to used
    @XmlMixed which is horrible.
.   You cannot use basic types like "int" for optional attributes/variables.
    This is because need something which can have a null value to represent
    absence.

Steps to add a new namespace
----------------------------
1.  Choose a new sub-package name {PKG} and a service name {SVC}
    e.g. for AppBlast, chose {PKG}="appblast" and {SVC}=AppblastService
2.  Create new directories :
        ZimbraSoap/src/java/com/zimbra/soap/{PKG}/message
        ZimbraSoap/src/java/com/zimbra/soap/{PKG}/type
3.  Create new files:
        ZimbraSoap/src/java/com/zimbra/soap/{PKG}/message/package-info.java
        ZimbraSoap/src/java/com/zimbra/soap/{PKG}/type/package-info.java
    These can be based on similar files for another namespace.  Need to update
    namespace/package etc info in these files.
4.  Update ZimbraSoap/src/java/com/zimbra/soap/util/WsdlGenerator.java
    main method needs something like :
        createWsdl("AppblastService.wsdl",
                AppBlastConstants.NAMESPACE_STR, "AppblastService",
                "http://localhost:7070/service/soap",
                requestLists.get("com.zimbra.soap.appblast.message")
5.  Create binding files for use with wsdl-test API :
    ZimbraSoap/src/wsdl-test/wsdlBindings-{PKG}.xml
        Base this on a similar file for another namespace but update the
        <jaxws:package name to be zimbra.generated.{PKG}client.ws.service
    ZimbraSoap/src/wsdl-test/xsdBindings-{PKG}.xml
        Base this on a similar file for another namespace
        Make sure there is a jaxb:bindings section for each xsd file that
        will be imported in the .wsdl file for this namespace
        For each of those, make sure the "schemaLocation", "targetNamespace" 
        is correct.
        For the new namespace, make sure the jaxb:package name is
            zimbra.generated.{PKG}client.{PKG}
        Make sure app of the jaxb:package names in the file start with:
            zimbra.generated.{PKG}client.
6.  Update build.xml to add a target similar to :
      <target name="{PKG}-service-client-support" depends="jar">
          <service-client-support svcname="{SVC}" pathelem="{PKG}"/>
      </target>
7.  Update build.xml so that wsdl-client-support depends on the target created
    above.

FAQ
===
1. How do you define an XmlAttribute or XmlElement whose value is an enum
    You need to create an enum in ZimbraSoap.  Ideally, used this new enum in all code rather than duplicating
    from somewhere else.  For a fairly simple example - see
        //depot/zimbra/main/ZimbraSoap/src/java/com/zimbra/soap/type/AccountBy.java
    which uses the @XmlEnum annotation.  See
        //depot/zimbra/main/ZimbraSoap/src/java/com/zimbra/soap/admin/type/AccountSelector.java
    for how this enum is used for an @XmlAttribute.
    If you want the enum values to differ from what is in the xml, see another example - Folder.View 
        //depot/zimbra/main/ZimbraSoap/src/java/com/zimbra/soap/mail/type/Folder.java
    This also uses @XmlEnumValue annotations.

2. For some JAXB classes, @XmlElement or @XmlAttribute might have property "required" set as "false" even when it
   is not optional.  Is this intentional? 

   If the @XmlElement or @XmlAttribute is required in all contexts then this is an error.  When the original
   implementor was constructing JAXB classes, situations were encountered where looking at the first use of a
   JAXB type some of these were clearly required but later uses had them as optional.   As this situation can
   be a bit difficult to spot a lot of newer JAXB classes were written with a more relaxed view of whether
   things were required or not.
