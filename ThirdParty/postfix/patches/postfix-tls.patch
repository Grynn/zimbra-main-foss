*** postfix-2.4.3/src/global/dict_ldap.c	Sat Mar 17 15:18:57 2007
--- postfix-2.4.3/src/global/dict_ldap.c	Fri Feb  1 13:44:46 2008
***************
*** 121,127 ****
  /*	tls_cert.
  /* .IP tls_require_cert
  /*	Whether or not to request server's X509 certificate and check its
! /*	validity.
  /* .IP tls_random_file
  /*	Path of a file to obtain random bits from when /dev/[u]random is
  /*	not available. Generally set to the name of the EGD/PRNGD socket.
--- 121,131 ----
  /*	tls_cert.
  /* .IP tls_require_cert
  /*	Whether or not to request server's X509 certificate and check its
! /*	validity. The value "no" means don't check the cert trust chain
! /*	and (OpenLDAP 2.1+) don't check the peername. The value "yes" means
! /*	check both the trust chain and the peername (with OpenLDAP <= 2.0.11,
! /*	the peername checks use the reverse hostname from the LDAP servers's
! /*	IP address, not the user supplied servername).
  /* .IP tls_random_file
  /*	Path of a file to obtain random bits from when /dev/[u]random is
  /*	not available. Generally set to the name of the EGD/PRNGD socket.
***************
*** 277,282 ****
--- 281,311 ----
  #define dict_ldap_abandon(ld, msg)	ldap_abandon((ld), (msg))
  #endif
  
+ static int dict_ldap_vendor_version(void)
+ {
+     const char *myname = "dict_ldap_api_info";
+     LDAPAPIInfo api;
+ 
+     /*
+      * We tell the library our version, and it tells us its version and/or
+      * may return an error code if the versions are not the same.
+      */
+     api.ldapai_info_version = LDAP_API_INFO_VERSION;
+     if (ldap_get_option(0, LDAP_OPT_API_INFO, &api) != LDAP_SUCCESS
+ 	|| api.ldapai_info_version != LDAP_API_INFO_VERSION) {
+ 	if (api.ldapai_info_version != LDAP_API_INFO_VERSION)
+ 	    msg_fatal("%s: run-time API_INFO version: %d, compiled with: %d",
+ 		    myname, api.ldapai_info_version, LDAP_API_INFO_VERSION);
+ 	else
+ 	    msg_fatal("%s: ldap_get_option(API_INFO) failed", myname);
+     }
+     if (strcmp(api.ldapai_vendor_name, LDAP_VENDOR_NAME) != 0)
+ 	msg_fatal("%s: run-time API vendor: %s, compiled with: %s",
+ 		  myname, api.ldapai_vendor_name, LDAP_VENDOR_NAME);
+ 
+     return (api.ldapai_vendor_version);
+ }
+ 
  /*
   * Quoting rules.
   */
***************
*** 492,504 ****
  			 myname, dict_ldap->tls_cipher_suite,
  			 rc, ldap_err2string(rc));
  	}
! 	if (dict_ldap->tls_require_cert) {
! 	    if ((rc = ldap_set_option(NULL, LDAP_OPT_X_TLS_REQUIRE_CERT,
! 			   &(dict_ldap->tls_require_cert))) != LDAP_SUCCESS)
! 		msg_warn("%s: Unable to set tls_require_cert to %d: %d: %s",
! 			 myname, dict_ldap->tls_require_cert,
! 			 rc, ldap_err2string(rc));
! 	}
      }
  }
  
--- 521,531 ----
  			 myname, dict_ldap->tls_cipher_suite,
  			 rc, ldap_err2string(rc));
  	}
! 	if ((rc = ldap_set_option(NULL, LDAP_OPT_X_TLS_REQUIRE_CERT,
! 		       &(dict_ldap->tls_require_cert))) != LDAP_SUCCESS)
! 	    msg_warn("%s: Unable to set tls_require_cert to %d: %d: %s",
! 		     myname, dict_ldap->tls_require_cert,
! 		     rc, ldap_err2string(rc));
      }
  }
  
***************
*** 1276,1281 ****
--- 1303,1309 ----
      char   *scope;
      char   *attr;
      int     tmp;
+     int     vendor_version = dict_ldap_vendor_version();
  
      if (msg_verbose)
  	msg_info("%s: Using LDAP source %s", myname, ldapsource);
***************
*** 1542,1555 ****
       */
      /* get configured value of "start_tls"; default to no */
      dict_ldap->start_tls = cfg_get_bool(dict_ldap->parser, "start_tls", 0);
!     if (dict_ldap->start_tls && dict_ldap->version < LDAP_VERSION3) {
! 	msg_warn("%s: %s start_tls requires protocol version 3",
! 		 myname, ldapsource);
! 	dict_ldap->version = LDAP_VERSION3;
      }
      /* get configured value of "tls_require_cert"; default to no */
!     dict_ldap->tls_require_cert = cfg_get_bool(dict_ldap->parser,
! 					       "tls_require_cert", 0);
  
      /* get configured value of "tls_ca_cert_file"; default "" */
      dict_ldap->tls_ca_cert_file = cfg_get_str(dict_ldap->parser,
--- 1570,1593 ----
       */
      /* get configured value of "start_tls"; default to no */
      dict_ldap->start_tls = cfg_get_bool(dict_ldap->parser, "start_tls", 0);
!     if (dict_ldap->start_tls) {
! 	if (dict_ldap->version < LDAP_VERSION3) {
! 	    msg_warn("%s: %s start_tls requires protocol version 3",
! 		     myname, ldapsource);
! 	    dict_ldap->version = LDAP_VERSION3;
! 	}
! 	/* Binary incompatibility in the OpenLDAP API from 2.0.11 to 2.0.12 */
! 	if (((LDAP_VENDOR_VERSION <= 20011) && !(vendor_version <= 20011))
! 	  || (!(LDAP_VENDOR_VERSION <= 20011) && (vendor_version <= 20011)))
! 	    msg_fatal("%s: incompatible TLS support: "
! 		      "compile-time OpenLDAP version %d, "
! 		      "run-time OpenLDAP version %d",
! 		      myname, LDAP_VENDOR_VERSION, vendor_version);
      }
      /* get configured value of "tls_require_cert"; default to no */
!     dict_ldap->tls_require_cert =
! 	cfg_get_bool(dict_ldap->parser, "tls_require_cert", 0) ?
! 	LDAP_OPT_X_TLS_DEMAND : LDAP_OPT_X_TLS_NEVER;
  
      /* get configured value of "tls_ca_cert_file"; default "" */
      dict_ldap->tls_ca_cert_file = cfg_get_str(dict_ldap->parser,

