diff -ru postfix-2.5-20070824/src/master/Makefile.in postfix-2.5-20070824-stress/src/master/Makefile.in
--- postfix-2.5-20070824/src/master/Makefile.in	2007-03-17 18:51:39.000000000 +0100
+++ postfix-2.5-20070824-stress/src/master/Makefile.in	2007-09-04 09:51:49.000000000 +0200
@@ -130,6 +130,7 @@
 master_ent.o: ../../include/inet_addr_host.h
 master_ent.o: ../../include/inet_addr_list.h
 master_ent.o: ../../include/iostuff.h
+master_ent.o: ../../include/mail_conf.h
 master_ent.o: ../../include/mail_params.h
 master_ent.o: ../../include/mail_proto.h
 master_ent.o: ../../include/msg.h
@@ -189,6 +190,7 @@
 master_spawn.o: ../../include/argv.h
 master_spawn.o: ../../include/binhash.h
 master_spawn.o: ../../include/events.h
+master_spawn.o: ../../include/mail_conf.h
 master_spawn.o: ../../include/msg.h
 master_spawn.o: ../../include/mymalloc.h
 master_spawn.o: ../../include/sys_defs.h
diff -ru postfix-2.5-20070824/src/master/master_avail.c postfix-2.5-20070824-stress/src/master/master_avail.c
--- postfix-2.5-20070824/src/master/master_avail.c	2006-06-15 20:07:15.000000000 +0200
+++ postfix-2.5-20070824-stress/src/master/master_avail.c	2007-09-05 10:54:38.000000000 +0200
@@ -76,6 +76,7 @@
 static void master_avail_event(int event, char *context)
 {
     MASTER_SERV *serv = (MASTER_SERV *) context;
+    time_t  now;
     int     n;
 
     if (event == 0)				/* XXX Can this happen? */
@@ -84,6 +85,32 @@
 	for (n = 0; n < serv->listen_fd_count; n++)
 	    event_disable_readwrite(serv->listen_fd[n]);
     } else {
+
+	/*
+	 * When all servers for a public internet service are busy, we log a
+	 * warning, suggest workarounds, and remain silent until the warning
+	 * expires, 1000 seconds later. At the same time, we start creating
+	 * server processes with "-o stress=yes" on the command line, and
+	 * keep creating such processes until the process count has stayed
+	 * below the limit for at least 1000 seconds. This provides a mimimal
+	 * solution that can be adopted into legacy and stable Postfix
+	 * releases.
+	 * 
+	 * This is not the right place to update serv->stress_param_val in
+	 * response to stress level changes. Doing so would would contaminate
+	 * the code that implements "postfix reload" with stress management
+	 * implementation details, creating a source of future bugs. Instead,
+	 * we update simple counters or flags here, and use their values to
+	 * determine the proper serv->stress_param_val value when exec-ing a
+	 * server process.
+	 */
+	if (serv->stress_param_val != 0
+	    && !MASTER_LIMIT_OK(serv->max_proc, serv->total_proc + 1)) {
+	    now = event_time();
+	    if (serv->stress_expire_time < now)
+		master_restart_service(serv);
+	    serv->stress_expire_time = now + 1000;
+	}
 	master_spawn(serv);
     }
 }
@@ -112,7 +139,7 @@
 	    for (n = 0; n < serv->listen_fd_count; n++)
 		event_enable_read(serv->listen_fd[n], master_avail_event,
 				  (char *) serv);
-	} else if ((serv->flags & MASTER_FLAG_LOCAL_ONLY) == 0
+	} else if (serv->stress_param_val != 0
 		   && (now = event_time()) - serv->busy_warn_time > 1000) {
 	    serv->busy_warn_time = now;
 	    msg_warn("service \"%s\" (%s) has reached its process limit \"%d\": "
@@ -120,6 +147,8 @@
 		     serv->ext_name, serv->name, serv->max_proc);
 	    msg_warn("to avoid this condition, increase the process count "
 		     "in master.cf or reduce the service time per client");
+	    msg_warn("see http://www.postfix.org/STRESS_README.html for "
+		     "examples of stress-dependent configuration settings");
 	}
     }
 }
diff -ru postfix-2.5-20070824/src/master/master_conf.c postfix-2.5-20070824-stress/src/master/master_conf.c
--- postfix-2.5-20070824/src/master/master_conf.c	2005-12-29 23:54:12.000000000 +0100
+++ postfix-2.5-20070824-stress/src/master/master_conf.c	2007-09-04 09:51:49.000000000 +0200
@@ -134,6 +134,7 @@
 	    SWAP(char *, serv->ext_name, entry->ext_name);
 	    SWAP(char *, serv->path, entry->path);
 	    SWAP(ARGV *, serv->args, entry->args);
+	    SWAP(char *, serv->stress_param_val, entry->stress_param_val);
 	    master_restart_service(serv);
 	    free_master_ent(entry);
 	}
diff -ru postfix-2.5-20070824/src/master/master_ent.c postfix-2.5-20070824-stress/src/master/master_ent.c
--- postfix-2.5-20070824/src/master/master_ent.c	2006-06-15 20:07:15.000000000 +0200
+++ postfix-2.5-20070824-stress/src/master/master_ent.c	2007-09-04 09:51:49.000000000 +0200
@@ -94,6 +94,7 @@
 #include <mail_params.h>
 #include <own_inet_addr.h>
 #include <wildcard_inet_addr.h>
+#include <mail_conf.h>
 
 /* Local stuff. */
 
@@ -511,6 +512,14 @@
 	argv_add(serv->args, "-u", (char *) 0);
     if (chroot)
 	argv_add(serv->args, "-c", (char *) 0);
+    if ((serv->flags & MASTER_FLAG_LOCAL_ONLY) == 0) {
+	argv_add(serv->args, "-o", "stress=" CONFIG_BOOL_YES, (char *) 0);
+	serv->stress_param_val =
+	    serv->args->argv[serv->args->argc - 1] + sizeof("stress=") - 1;
+	serv->stress_param_val[0] = 0;
+    } else
+	serv->stress_param_val = 0;
+    serv->stress_expire_time = 0;
     if (serv->listen_fd_count > 1)
 	argv_add(serv->args, "-s",
 	    vstring_str(vstring_sprintf(junk, "%d", serv->listen_fd_count)),
diff -ru postfix-2.5-20070824/src/master/master.h postfix-2.5-20070824-stress/src/master/master.h
--- postfix-2.5-20070824/src/master/master.h	2005-12-29 23:54:12.000000000 +0100
+++ postfix-2.5-20070824-stress/src/master/master.h	2007-09-04 09:51:49.000000000 +0200
@@ -47,6 +47,8 @@
     int     max_proc;			/* upper bound on # processes */
     char   *path;			/* command pathname */
     struct ARGV *args;			/* argument vector */
+    char   *stress_param_val;		/* stress value: "yes" or empty */
+    time_t  stress_expire_time;		/* stress pulse stretcher */
     int     avail_proc;			/* idle processes */
     int     total_proc;			/* number of processes */
     int     throttle_delay;		/* failure recovery parameter */
diff -ru postfix-2.5-20070824/src/master/master_spawn.c postfix-2.5-20070824-stress/src/master/master_spawn.c
--- postfix-2.5-20070824/src/master/master_spawn.c	2006-06-15 20:07:15.000000000 +0200
+++ postfix-2.5-20070824-stress/src/master/master_spawn.c	2007-09-05 10:54:38.000000000 +0200
@@ -70,6 +70,10 @@
 #include <vstring.h>
 #include <argv.h>
 
+/* Global library. */
+
+#include <mail_conf.h>
+
 /* Application-specific. */
 
 #include "master_proto.h"
@@ -177,6 +181,10 @@
 	 * connection and run the requested command. Leave child stderr
 	 * alone. Disable exit handlers: they should be executed by the
 	 * parent only.
+	 * 
+	 * When we reach the process limit on a public internet service, we
+	 * create stress-mode processes until the process count stays below
+	 * the limit for some amount of time. See master_avail_listen().
 	 */
     case 0:
 	msg_cleanup((void (*) (void)) 0);	/* disable exit handler */
@@ -216,6 +224,8 @@
 	vstring_sprintf(env_gen, "%s=%o", MASTER_GEN_NAME, master_generation);
 	if (putenv(vstring_str(env_gen)) < 0)
 	    msg_fatal("%s: putenv: %m", myname);
+	if (serv->stress_param_val && serv->stress_expire_time > event_time())
+	    serv->stress_param_val[0] = CONFIG_BOOL_YES[0];
 
 	execvp(serv->path, serv->args->argv);
 	msg_fatal("%s: exec %s: %m", myname, serv->path);
