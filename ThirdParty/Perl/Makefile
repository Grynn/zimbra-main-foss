# Makefile for entire install tree, for RPM packages.

# EXECUTABLES

PERL_ROOT ?= $(shell pwd)
P4_ROOT ?= $(shell cd $(PERL_ROOT)/../..; pwd)
ZIMBRA_HOME ?= /opt/zimbra

LOGFILE ?= /tmp/ThirdParty-Perllibs.log

BUILD_PLATFORM ?= $(shell sh $(P4_ROOT)/ZimbraBuild/rpmconf/Build/get_plat_tag.sh)

PERL 	:= $(shell which perl)
GZIP    := $(shell which gzip)
BZIP2   := $(shell which bzip2)
CURL    := $(shell which curl)
TAR     := $(shell which tar)
FTP     := $(shell which ftp)
LYNX    := $(shell which lynx)
GPG     := $(shell which gpg)
LESS    := $(shell which less)
WGET    := $(shell which wget)
MAKE    := $(shell which make)
SED     := $(shell which sed)
CMIRROR	?= http://buildmaster.lab.zimbra.com:8080/cpan/

BDB_VERSION ?= 4.7.25.4
SSL_VERSION ?= 0.9.8k
LDAP_VERSION ?= 2.4.16.11z
BDB_INC ?= $(ZIMBRA_HOME)/bdb-$(BDB_VERSION)/include
BDB_LIB ?= $(ZIMBRA_HOME)/bdb-$(BDB_VERSION)/lib

MYSQL_INCLUDE := $(ZIMBRA_HOME)/mysql/include

LDAP_INCLUDE := $(ZIMBRA_HOME)/openldap/include
LDAP_LIB := $(ZIMBRA_HOME)/openldap-clibs-$(LDAP_VERSION)/lib
SASL_INCLUDE := $(ZIMBRA_HOME)/cyrus-sasl/include

ifeq ($(BUILD_PLATFORM), MACOSX)
	MYSQL_INCLUDE := $(ZIMBRA_HOME)/mysql/include/mysql
endif
ifeq ($(BUILD_PLATFORM), MACOSXx86)
	MYSQL_INCLUDE := $(ZIMBRA_HOME)/mysql/include/mysql
endif

ifeq (MACOSX,$(findstring MACOSX,$(BUILD_PLATFORM)))
	EXPAT_INCLUDE := EXPATINCPATH=$(ZIMBRA_HOME)/include
	EXPAT_LIB := EXPATLIBPATH=$(ZIMBRA_HOME)/lib
endif

# DESTINATIONS

# Order is important here

DBD_PERL_LIBS 	:= \
	DBD::mysql \

PRE_PERL_LIBS	:= \
	Array::Compare \
	Tree::DAG_Node \
	Sub::Uplevel \
	Test::Exception \
	Test::Warn

PERL_LIBS 	:= \
	IO \
	Scalar::Util \
	IO::Socket::SSL \
	Socket6 \
	DBI \
	IO::Zlib \
	Bit::Vector \
	HTML::Tagset \
	HTML::Parser \
	URI \
	Net::HTTP \
	Net::SMTP \
	Proc::ProcessTable \
	HTTP::Parser \
	IO::Stringy \
	MIME::Lite \
	Mail::Mailer \
	D/DO/DONEILL/MIME-tools-5.427.tar.gz \
	SOAP::Lite \
	Net::Telnet \
	Config::IniFiles \
	Cache::FastMmap \
	Device::SerialPort \
	Date::Calc \
	Date::Manip \
	Date::Parse \
	Time::HiRes \
	Convert::ASN1 \
	Net::LDAP \
	Net::Server \
	Unix::Syslog \
	Parallel::ForkManager \
	Package::Constants \
	IO::Compress::Base \
	IO::Compress::Gzip \
	Compress::Raw::Zlib \
	P/PM/PMQS/Compress-Zlib-1.42.tar.gz \
	Archive::Tar \
	Digest::SHA1 \
	Digest::HMAC \
	Digest::HMAC_MD5 \
	Convert::TNEF \
	Convert::UUlib \
	Net::IP \
	Net::DNS \
	File::Tail \
	File::Temp \
	File::Grep \
	Data::UUID \
	List::Compare \
	Getopt::Easy \
	Crypt::SaltedHash \
	Archive::Zip  \
	Digest::SHA \
	Error \
	Mail::DKIM \
	XML::SAX::Expat \
	XML::Simple \
	IO::Socket::INET6 \
	DBD::SQLite

NET_SSLeay := \
	Net-SSLeay-1.35

CRYPT_SSLeay := \
	Crypt-SSLeay-0.57

CRYPT_RANDOM := \
	Crypt-OpenSSL-Random-0.04

CRYPT_RSA := \
	Crypt-OpenSSL-RSA-0.25

DBFILE_PERL_LIBS := \
	DB_File

BDB_PERL_LIBS := \
	BerkeleyDB-0.38

SA_PERL_LIBS = \
	Mail-SpamAssassin-3.2.5

SWATCH = \
	swatch-3.2.3

LDAPAPI = \
	Net-LDAPapi-3.0.3

XML_PARSER = \
	XML-Parser-2.36

PERL_MM_USE_DEFAULT	:= 1
export PERL_MM_USE_DEFAULT

JAVA_HOME		:= /usr/local/java
export JAVA_HOME

TMPDIR	:= tmp

PERL_LIB_SOURCE  := $(shell pwd)

P4_ROOT ?= $(shell cd $(PERL_LIB_SOURCE)/../..; pwd)

BUILD_PLATFORM ?= $(shell sh $(P4_ROOT)/ZimbraBuild/rpmconf/Build/get_plat_tag.sh)

PERL_TGZ_DEST_DIR := $(P4_ROOT)/ThirdPartyBuilds/$(BUILD_PLATFORM)/perl
PERL_TGZ_DEST	:= $(PERL_TGZ_DEST_DIR)/perllib.tgz
PERL_BIN_TGZ_DEST := $(PERL_TGZ_DEST_DIR)/perlbin.tgz

ifeq ($(BUILD_PLATFORM), )
        BUILD_PLATFORM := "UNKNOWN"
endif

DEST_DIR		:= $(PERL_LIB_SOURCE)/zimbramon
DEST_LIB_DIR	:= $(DEST_DIR)/lib
DEST_BIN_DIR	:= $(DEST_DIR)/bin

ifeq (MACOSXx86,$(findstring MACOSXx86,$(BUILD_PLATFORM)))
	DEST_BIN_DIR	:=	$(DEST_DIR)/usr/bin
endif

ifeq ($(BUILD_PLATFORM), MACOSX)
	DEST_BIN_DIR  :=	$(DEST_DIR)/usr/bin
endif

# TARGETS

CLEAN_TARGETS	=	\
		$(TMPDIR) \
		$(DEST_DIR) \
		$(PERL_TGZ_DEST) \
		$(PERL_BIN_TGZ_DEST)

all: allclean setup $(DEST_LIB_DIR) $(DEST_BIN_DIR) $(PERL_TGZ_DEST_DIR)
	mkdir -p $(TMPDIR)
	@echo "Logging to $(LOGFILE)"

	@for lib in $(CRYPT_SSLeay); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xfz $$lib.tar.gz; cd $$lib; \
			$(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR) --lib=$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib LDFLAGS="-L$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib -R$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib"; \
			LD_RUN_PATH="$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib" $(MAKE); $(MAKE) install;) >>$(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done

	@for lib in $(CRYPT_RANDOM); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xfz $$lib.tar.gz; cd $$lib; \
			$(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR) LIBS="-L$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib -R$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib -lssl -lcrypto" INC="-I$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/include"; \
			LD_RUN_PATH="$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib" $(MAKE); $(MAKE) install;) >>$(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done

	@for lib in $(CRYPT_RSA); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xfz $$lib.tar.gz; cd $$lib; \
			$(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR) LIBS="-L$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib -R$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib -lssl -lcrypto" INC="-I$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/include"; \
			LD_RUN_PATH="$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)/lib" $(MAKE); $(MAKE) install;) >>$(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done

	@for lib in $(PRE_PERL_LIBS); do \
		echo -n "Compiling perl lib $$lib ..."; \
		LDFLAGS="-fPIC" CFLAGS="-fPIC" BERKELEYDB_INCLUDE=$(BDB_INC) BERKELEYDB_LIB=$(BDB_LIB) $(PERL) -I$(DEST_LIB_DIR) -MCPAN -e "$$CPAN::Config->{make_arg}.=' CCCDLFLAGS="-fPIC" CFLAGS="-fPIC" LDFLAGS="-fPIC"'; $$CPAN::Config->{makepl_arg}.=' CCCDLFLAGS="-fPIC" CFLAGS="-fPIC" LDFLAGS="-fPIC"'; force (\"install\", \"$$lib\")" >> $(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done

	@for lib in $(NET_SSLeay); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xfz $$lib.tar.gz; cd $$lib; \
		OPENSSL_PREFIX=$(ZIMBRA_HOME)/openssl-$(SSL_VERSION) $(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR); \
		LD_RUN_PATH="$(ZIMBRA_HOME)/openssl-$(SSL_VERSION)" $(MAKE); $(MAKE) install;) >>$(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done
	
	@for lib in $(XML_PARSER); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xfz $$lib.tar.gz; cd $$lib; \
		$(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR) $(EXPAT_LIB) $(EXPAT_INCLUDE); \
		$(MAKE); $(MAKE) install;) >>$(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done
	
	@for lib in $(PERL_LIBS); do \
		echo -n "Compiling perl lib $$lib ..."; \
		LDFLAGS="-fPIC" CFLAGS="-fPIC" BERKELEYDB_INCLUDE=$(BDB_INC) BERKELEYDB_LIB=$(BDB_LIB) $(PERL) -I$(DEST_LIB_DIR) -MCPAN -e "$$CPAN::Config->{make_arg}.=' CCCDLFLAGS="-fPIC" CFLAGS="-fPIC" LDFLAGS="-fPIC"'; $$CPAN::Config->{makepl_arg}.=' CCCDLFLAGS="-fPIC" CFLAGS="-fPIC" LDFLAGS="-fPIC"'; force (\"install\", \"$$lib\")" >> $(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done

	@for lib in $(LDAPAPI); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xfz $$lib.tar.gz; cd $$lib; \
			$(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR) \
				-sdk openldap -lib_path $(LDAP_LIB) -include_path $(LDAP_INCLUDE) -sasl_include_path $(SASL_INCLUDE); \
			LD_RUN_PATH="$(LDAP_LIB)" $(MAKE); $(MAKE) install;) >> $(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then echo "FAILED."; else echo "done."; fi \
	done

	@for lib in $(BDB_PERL_LIBS); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xfz $$lib.tar.gz; cd $$lib; \
		BERKELEYDB_INCLUDE=$(BDB_INC) BERKELEYDB_LIB=$(BDB_LIB) $(BDB_FILE_ARGS) $(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR); \
		LD_RUN_PATH=$(BDB_LIB) $(MAKE); $(MAKE) install;) >> $(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done

	@for lib in $(DBFILE_PERL_LIBS); do \
		echo -n "Compiling perl lib $$lib ..."; \
		LD_RUN_PATH=$(ZIMBRA_HOME)/$(BDB_LIB) DB_FILE_INCLUDE=$(BDB_INC) DB_FILE_LIB=$(BDB_LIB) $(DB_FILE_ARGS) $(PERL) -I$(DEST_LIB_DIR) -MCPAN -e "force (\"install\", \"$$lib\")" >> $(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done

	@echo -n "Compiling perl lib DBD::mysql ..."; \
	$(PERL) -I$(DEST_LIB_DIR) -MCPAN -e 'get DBI; $$CPAN::Config->{makepl_arg}.=" --nocatchstderr --mysql_config=\"$(ZIMBRA_HOME)/mysql/bin/mysql_config\" --libs=\"-L$(ZIMBRA_HOME)/mysql/lib -lmysqlclient -lz -lm\" --cflags=\" -I$(MYSQL_INCLUDE) -Os -fno-common\" "; $$CPAN::Config->{make_arg} .=" LD_RUN_PATH=/opt/zimbra/mysql/lib"; force ("install", "DBD::mysql")' >> $(LOGFILE) 2>&1; \
	if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \

	@for lib in $(SA_PERL_LIBS); do \
		echo -n "Compiling perl lib $$lib" ...; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xzf $$lib.tar.gz; cd $$lib; \
			$(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(ZIMBRA_HOME)/zimbramon LIB=$(ZIMBRA_HOME)/zimbramon/lib DATADIR=$(ZIMBRA_HOME)/conf/spamassassin CONFDIR=/etc/mail/spamassassin LOCALSTATEDIR=/var/spamassassin; \
			$(MAKE); $(MAKE) install DESTDIR=$(DEST_DIR); \
			cp -R $(DEST_DIR)/opt/zimbra/zimbramon/* $(DEST_DIR); \
			rm -rf $(DEST_DIR)/opt;) >> $(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done	

	@for lib in $(SWATCH); do \
		echo -n "Compiling perl lib $$lib ..."; \
		cp $(PERL_LIB_SOURCE)/$$lib.tar.gz $(TMPDIR); \
		(cd $(TMPDIR); tar xzf $$lib.tar.gz; cd $$lib; \
			$(SED) -i .bak -e 's#/usr/lib/sendmail /usr/sbin/sendmail#/opt/zimbra/postfix/sbin/sendmail#' lib/Swatch/Actions.pm; \
			rm -f lib/Swatch/Actions.pm.bak; \
			BERKELEYDB_INCLUDE=$(BDB_INC) BERKELEYDB_LIB=$(BDB_LIB) \
			$(PERL) -I$(DEST_LIB_DIR) Makefile.PL PREFIX=$(DEST_DIR) LIB=$(DEST_LIB_DIR); \
			$(MAKE); $(MAKE) install;) >> $(LOGFILE) 2>&1; \
		if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi \
	done	
	@echo -n "Creating $(PERL_TGZ_DEST)..."; \
	(cd $(DEST_LIB_DIR); rm -f i386-linux-thread-multi/goferperf.pl; \
	tar czf $(PERL_TGZ_DEST) .); \
	if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi
	@echo -n "Creating $(PERL_BIN_TGZ_DEST)..."; \
	(cd $(DEST_BIN_DIR); \
	tar cfz $(PERL_BIN_TGZ_DEST) sa-compile sa-learn sa-update spamassassin spamc spamd); \
	if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi
	chmod -R a+w $(PERL_TGZ_DEST_DIR)/*


tarball:
	@echo -n "Creating $(PERL_TGZ_DEST)..."; \
	(cd $(DEST_LIB_DIR); tar czf $(PERL_TGZ_DEST) .; \
	if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi)
	@echo -n "Creating $(PERL_BIN_TGZ_DEST)..."; \
	(cd $(DEST_BIN_DIR); \
	tar cfz $(PERL_BIN_TGZ_DEST) sa-compile sa-learn sa-update spamassassin spamc spamd; \
	if [ $$? -ne 0 ]; then  echo "FAILED.";  else  echo "done.";  fi)
	chmod -R a+w $(PERL_TGZ_DEST_DIR)/*

$(PERL_TGZ_DEST_DIR):
	mkdir -p $@

$(DEST_LIB_DIR):
	mkdir -p $@

$(DEST_BIN_DIR):
	mkdir -p $@

DBD:
	echo "Compiling perl lib DBD::mysql"; \
	$(PERL) -I$(DEST_LIB_DIR) -MCPAN -e 'get DBI; $$CPAN::Config->{makepl_arg}.=" --nocatchstderr --mysql_config=\"/opt/zimbra/mysql/bin/mysql_config\" --libs=\"-L/opt/zimbra/mysql/lib -lmysqlclient -lz -lm\" --cflags=\" -I$(MYSQL_INCLUDE) -Os -fno-common\" "; $$CPAN::Config->{make_arg} .=" LD_RUN_PATH=/opt/zimbra/mysql/lib"; force ("install", "DBD::mysql")' ; \


setup:
	mkdir -p ${HOME}/.cpan/CPAN
	sed -e "s|@@LYNX@@|$(LYNX)|g" -e "s|@@WGET@@|$(WGET)|g" -e "s|@@LESS@@|$(LESS)|g" -e "s|@@GPG@@|$(GPG)|g" -e "s|@@UNZIP@@|$(UNZIP)|g" -e "s|@@CURL@@|$(CURL)|g" -e "s|@@BZIP2@@|$(BZIP2)|g" -e "s|@@MAKE@@|$(MAKE)|g" -e "s|@@FTP@@|$(FTP)|g" -e "s|@@TAR@@|$(TAR)|g" -e "s|@@GZIP@@|$(GZIP)|g" -e "s|@@BUILD_ROOT@@|$(PERL_ROOT)|g" -e "s|@@CMIRROR@@|$(CMIRROR)|g" MyConfig.pm.template > ${HOME}/.cpan/CPAN/MyConfig.pm 

p4edit: $(PERL_TGZ_DEST) 
	p4 add $(PERL_TGZ_DEST)
	p4 edit $(PERL_TGZ_DEST)

allclean:
	rm -rf $(CLEAN_TARGETS)
	rm -f $(LOGFILE)

clean:
	rm -rf $(CLEAN_TARGETS)
