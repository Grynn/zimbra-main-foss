--- openldap-2-4/servers/slapd/overlays/syncprov.c	2011-06-22 11:09:54.585413909 -0700
+++ openldap-head/servers/slapd/overlays/syncprov.c	2011-06-27 12:33:58.512087525 -0700
@@ -2548,6 +2548,21 @@
 			i++;
 		}
 
+		if (srs->sr_state.numcsns != numcsns) {
+			/* consumer doesn't have the right number of CSNs */
+			changed = SS_CHANGED;
+			if ( srs->sr_state.ctxcsn ) {
+				ber_bvarray_free_x( srs->sr_state.ctxcsn, op->o_tmpmemctx );
+				srs->sr_state.ctxcsn = NULL;
+			}
+			if ( srs->sr_state.sids ) {
+				slap_sl_free( srs->sr_state.sids, op->o_tmpmemctx );
+				srs->sr_state.sids = NULL;
+			}
+			srs->sr_state.numcsns = 0;
+			goto shortcut;
+		}
+
 		/* Find the smallest CSN which differs from contextCSN */
 		mincsn.bv_len = 0;
 		maxcsn.bv_len = 0;
@@ -2594,28 +2609,24 @@
 		}
 
 		/* If nothing has changed, shortcut it */
-		if ( srs->sr_state.numcsns == numcsns ) {
-			if ( !changed && !dirty ) {
-				do_present = 0;
+		if ( !changed && !dirty ) {
+			do_present = 0;
 no_change:		if ( !(op->o_sync_mode & SLAP_SYNC_PERSIST) ) {
-					LDAPControl	*ctrls[2];
+				LDAPControl	*ctrls[2];
 
-					ctrls[0] = NULL;
-					ctrls[1] = NULL;
-					syncprov_done_ctrl( op, rs, ctrls, 0, 0,
-						NULL, LDAP_SYNC_REFRESH_DELETES );
-					rs->sr_ctrls = ctrls;
-					rs->sr_err = LDAP_SUCCESS;
-					send_ldap_result( op, rs );
-					rs->sr_ctrls = NULL;
-					return rs->sr_err;
-				}
-				goto shortcut;
+				ctrls[0] = NULL;
+				ctrls[1] = NULL;
+				syncprov_done_ctrl( op, rs, ctrls, 0, 0,
+					NULL, LDAP_SYNC_REFRESH_DELETES );
+				rs->sr_ctrls = ctrls;
+				rs->sr_err = LDAP_SUCCESS;
+				send_ldap_result( op, rs );
+				rs->sr_ctrls = NULL;
+				return rs->sr_err;
 			}
-		} else {
-			/* consumer doesn't have the right number of CSNs */
-			changed = SS_CHANGED;
+			goto shortcut;
 		}
+
 		/* Do we have a sessionlog for this search? */
 		sl=si->si_logs;
 		if ( sl ) {
@@ -3132,6 +3143,9 @@
 {
     slap_overinst   *on = (slap_overinst *) be->bd_info;
     syncprov_info_t *si = (syncprov_info_t *)on->on_bi.bi_private;
+#ifdef SLAP_CONFIG_DELETE
+	syncops *so, *sonext;
+#endif /* SLAP_CONFIG_DELETE */
 
 	if ( slapMode & SLAP_TOOL_MODE ) {
 		return 0;
@@ -3151,6 +3165,20 @@
 		syncprov_checkpoint( op, on );
 	}
 
+#ifdef SLAP_CONFIG_DELETE
+	ldap_pvt_thread_mutex_lock( &si->si_ops_mutex );
+	for ( so=si->si_ops, sonext=so;  so; so=sonext  ) {
+		SlapReply rs = {REP_RESULT};
+		rs.sr_err = LDAP_UNAVAILABLE;
+		send_ldap_result( so->s_op, &rs );
+		sonext=so->s_next;
+		syncprov_drop_psearch( so, 0);
+	}
+	si->si_ops=NULL;
+	ldap_pvt_thread_mutex_unlock( &si->si_ops_mutex );
+	overlay_unregister_control( be, LDAP_CONTROL_SYNC );
+#endif /* SLAP_CONFIG_DELETE */
+
     return 0;
 }
 
--- openldap-2-4/tests/scripts/test058-syncrepl-asymmetric	2011-06-22 15:16:58.532912507 -0700
+++ openldap-head/tests/scripts/test058-syncrepl-asymmetric	2011-06-27 12:33:58.512087525 -0700
@@ -116,8 +116,8 @@
 	exit 0
 fi
 
-echo "Test 058 is currently disabled"
-exit 0
+#echo "Test 058 is currently disabled"
+#exit 0
 
 echo "running defines.sh"
 . $SRCDIR/scripts/defines.sh
@@ -134,6 +134,8 @@
 SS2_DIR=$TESTDIR/ss2
 SSC_DIR=$TESTDIR/ssc
 
+MNUM=1
+
 mkdir -p $TESTDIR
 
 for dir in $SMC_DIR $SM1_DIR $SM2_DIR $SS1_DIR $SS2_DIR $SSC_DIR; do
@@ -979,6 +981,29 @@
 	exit $RC
 fi
 
+# Test for ITS#6716, modify on central master to ensure that the CSN
+# order is "sid2 < sid3 < sid1".  When site1 master starts it is likely
+# to sync with central master before it syncs with site1 master. When
+# central master syncs with site1 master they will share the sid1 and
+# sid3 CSNs, the additonal sid2 CSN hold by site1 master will be the
+# oldest. Central master will not receive the changes made on site1
+# master unless it completely ignores the CSNs presented by central
+# master.
+echo "Using ldapmodify to modify central master..."
+$LDAPMODIFY -D "$MANAGERDN" -H $URI1 -w $PASSWD <<EOF >> $TESTOUT 2>&1
+dn: dc=example,dc=com
+changetype: modify
+add: description
+description: Modify$MNUM
+
+EOF
+RC=$?
+if test $RC != 0 ; then
+	echo "ldapmodify failed ($RC)!"
+	test $KILLSERVERS != no && kill -HUP $KILLPIDS
+	exit $RC
+fi
+
 if test -z "$SM1_PID" ; then
 	echo "Restarting site1 master slapd on TCP/IP port $PORT2..."
 	cd $SM1_DIR
@@ -1027,6 +1052,44 @@
 	exit $RC
 fi
 
+echo "Using ldapsearch to check that site1 master received central master update..."
+RC=32
+for i in 1 2 3 4 5; do
+	RESULT=`$LDAPSEARCH -H $URI2 \
+		-s base -b "$BASEDN" \
+		"(description=Modify$MNUM)" 2>&1 | awk '/^dn:/ {print "OK"}'`
+	if test "x$RESULT$nullOK" = "xOK" ; then
+		RC=0
+		break
+	fi
+	echo "Waiting $i seconds for syncrepl to receive changes..."
+	sleep $i
+done
+if test $RC != 0 ; then
+	echo "ldapsearch failed ($RC)!"
+	test $KILLSERVERS != no && kill -HUP $KILLPIDS
+	exit $RC
+fi
+
+echo "Using ldapsearch to check that site2 master received central master update..."
+RC=32
+for i in 1 2 3 4 5; do
+	RESULT=`$LDAPSEARCH -H $URI3 \
+		-s base -b "$BASEDN" \
+		"(description=Modify$MNUM)" 2>&1 | awk '/^dn:/ {print "OK"}'`
+	if test "x$RESULT$nullOK" = "xOK" ; then
+		RC=0
+		break
+	fi
+	echo "Waiting $i seconds for syncrepl to receive changes..."
+	sleep $i
+done
+if test $RC != 0 ; then
+	echo "ldapsearch failed ($RC)!"
+	test $KILLSERVERS != no && kill -HUP $KILLPIDS
+	exit $RC
+fi
+
 # Test done, now some more intialization...
 
 echo "Adding syncrepl consumer on central search..."
@@ -1519,8 +1582,6 @@
 echo "Checking contextCSN after initial replication..."
 . $TESTDIR/checkcsn.sh
 
-MNUM=1
-
 # TEST:
 # Test that updates to the first backend on central master, which should
 # be replicated to all servers actually is so, and that the contextCSN is
