#!/usr/bin/perl -w

# Use to start appropriate failover script (client or server)

use strict;
use lib "$ENV{ZIMBRA_HOME}/zimbramon/lib";
use Getopt::Std;
use Zimbra::Failover::Debug qw(setDebug);
use Zimbra::Failover::Config;
use Zimbra::Failover::Tcp;
use Zimbra::Failover::Serial;
use Zimbra::Failover::Pid;

my $config = Zimbra::Failover::Config->getConfig();

my $service = "";

sub usage() {
    print "Failover Control\n";
    print "Usage: $0 [start|stop]\n";
    print "\t-D: debug mode\n";
    exit(-1);
}

sub checkAlreadyRunning {
	my $server = shift;
    my @pids = Zimbra::Failover::Pid::readPidFile($server);
    my $pid;
    foreach $pid (@pids) {
        if (Zimbra::Failover::Pid::isRunning($pid)) {
			return \@pids;
        }
    }
	return undef;
}

sub control_service {
	my $cmd = shift;
	my $service = shift;
	my $pids;

	if ($cmd eq "stop") {
		$pids = checkAlreadyRunning($service);
		if (defined ($pids)) {
			foreach (@$pids) {
				print STDERR "Sending TERM signal to $_\n";
				kill ('TERM', $_);
			}
		} else {
			print STDERR "Service $service not running\n";
		}
	} else {
		$pids = checkAlreadyRunning($service);
		if (defined ($pids)) {
			print STDERR "Service $service already running\n";
		} else {
			print STDERR "Starting $ENV{ZIMBRA_HOME}/bin/$service.pl\n";
			system ("$ENV{ZIMBRA_HOME}/bin/$service.pl &");
		}
	}
}

my %opts;
getopts("D", \%opts) or usage();
setDebug($opts{D});

my $cmd = lc($ARGV[0]);

usage() unless ($cmd eq "stop" || $cmd eq "start");

my $role = $config->getCurrentRole();
if ($role eq 'master') {
	$service = 'zmhad';
} elsif ($role eq 'slave') {
	$service = 'zmhac';
} elsif ($role eq 'standalone') {
	exit(0);
} else {
	print STDERR "Unknown role: $role\n";
	exit (-1);
}
control_service($cmd, $service);

exit (0);

