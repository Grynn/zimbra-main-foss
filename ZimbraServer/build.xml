<project name="ZimbraServer" default="jar">

	<property environment="env"/>

	<!--
	     This machine's hostname.  Use ZIMBRA_HOSTNAME environment variable
	     if set.  If not, use "hostname" command output.
	-->
	<exec executable="hostname" outputproperty="exec.hostname"/>
	<condition property="zimbra.server.hostname" value="${env.ZIMBRA_HOSTNAME}">
		<isset property="env.ZIMBRA_HOSTNAME"/>
	</condition>
	<condition property="zimbra.server.hostname" value="${exec.hostname}">
		<not>
			<isset property="zimbra.server.hostname"/>
		</not>
	</condition>

	<!--
	     SMTP server for outgoing email.  Use ZIMBRA_SMTP_HOST environment
	     variable if set.  Otherwise default to "localhost".
	-->
	<condition property="zimbra.smtp.host" value="${env.ZIMBRA_SMTP_HOST}">
		<isset property="env.ZIMBRA_SMTP_HOST"/>
	</condition>
	<condition property="zimbra.smtp.host" value="localhost">
		<not>
			<isset property="zimbra.smtp.host"/>
		</not>
	</condition>

	<!--
		 Default email view, group by conversation or by message
	-->
	<condition property="zimbra.prefGroupMailBy"
			   value="${env.ZIMBRA_GROUP_MAIL_BY}">
		<isset property="env.ZIMBRA_GROUP_MAIL_BY"/>
	</condition>
	<condition property="zimbra.prefGroupMailBy" value="conversation">
		<not>
			<isset property="zimbra.prefGroupMailBy"/>
		</not>
	</condition>

	<property name="build.dir" location="build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.metainf.dir" location="${build.dir}/classes/META-INF/services" />
	<property name="dist.dir" location="build/dist" />
	<property name="dist.bin.dir" location="${dist.dir}/bin" />
	<property name="dist.libexec.dir" location="${dist.dir}/libexec" />
	<property name="dist.conf.dir" location="${dist.dir}/conf" />
	<property name="dist.l10n.msgs.dir" location="${dist.dir}/conf/msgs" />
	<property name="dist.db.dir" location="${dist.dir}/db" />
	<property name="dist.lib.dir" location="${dist.dir}/lib" />
	<property name="dist.jars.dir" location="${dist.dir}/lib/jars" />
	<property name="dist.ext.dir" location="${dist.dir}/lib/ext" />
	<property name="dist.tomcat.dir" location="${dist.dir}/tomcat" />
	<property name="dist.tomcat.webapps.dir" location="${dist.tomcat.dir}/webapps" />
	<property name="dist.tomcat.conf.dir" location="${dist.tomcat.dir}/conf" />
	<property name="dist.tomcat.commonlib.dir" location="${dist.tomcat.dir}/common/lib" />
	<property name="dist.openldap.dir" location="${dist.dir}/openldap" />
	<property name="dist.openldap.etc.dir" location="${dist.openldap.dir}/etc/openldap" />
	<property name="dist.openldap.schema.dir" location="${dist.openldap.etc.dir}/schema" />
	<property name="dist.tarfile" value="dev-service.tar" />
	<property name="dist.zimlet.dir" location="${dist.dir}/zimlets" />

	<property name="config.dir" location="conf" />
	<condition property="web.xml.source" value="${config.dir}/web.xml">
		<not>
			<isset property="is-production" />
		</not>
	</condition>
	<condition property="web.xml.source" value="${config.dir}/production/web.xml">
		<isset property="is-production" />
	</condition>

	<property name="warfile" location="${dist.tomcat.webapps.dir}/service.war" />

	<property name="generated.dir" location="${build.dir}/generated" />
	<property name="generated.java.dir" location="${generated.dir}/src/java" />
	<property name="jars.dir" location="jars" />
	<property name="lib.dir" location="lib" />
	<property name="ext.dir" location="lib/ext" />
	<property name="src.dir" location="src" />
	<property name="src.java.dir" location="${src.dir}/java" />
	<property name="src.bin.dir" location="${src.dir}/bin" />
	<property name="src.db.dir" location="${src.dir}/db" />

	<property name="deploy.war" value="${warfile}" />
	<property name="deploy.host" value="localhost" />
	<property name="deploy.port" value="7070" />
	<property name="deploy.url" value="http://${deploy.host}:${deploy.port}/manager/" />
	<property name="deploy.user" value="zimbra" />
	<property name="deploy.password" value="zimbra" />
	<property name="deploy.path" value="/service" />

	<property name="lmtp.host" value="localhost" />
	<property name="lmtp.port" value="7025" />
	<property name="lmtpinject.numthreads" value="1" />	

	<property name="javacc.main.class" value="org.javacc.parser.Main" />

	<property name="zimbra.home.dir" location="/opt/zimbra" />
	<property name="tomcat.home.dir" location="${zimbra.home.dir}/tomcat" />

	<property name="ical4j.jar" value="ical4j-0.9.16-patched.jar" />

	<property name="zimlets" value="com_zimbra_phone,com_zimbra_tracking,com_zimbra_url,com_zimbra_email,com_zimbra_date"/>

	<condition property="is-windows">
		<os family="windows" />
	</condition>
	<condition property="is-unix">
		<not><os family="windows" /></not>
	</condition>

	<condition property="native.os" value="MacOSX"><os name="Mac OS X"/></condition>
	<condition property="native.os" value="Linux"><os name="Linux"/></condition>
	<condition property="native.so" value="jnilib"><os name="Mac OS X"/></condition>
	<condition property="native.so" value="so"><not><os name="Mac OS X"/></not></condition>

	<condition property="ldapmodify" value="${zimbra.home.dir}/openldap/ldapmodify">
		<isset property="is-windows" />
	</condition>
	<condition property="ldapmodify" value="${zimbra.home.dir}/openldap/bin/ldapmodify">
		<isset property="is-unix" />
	</condition>

	<condition property="ldapdelete" value="${zimbra.home.dir}/openldap/ldapdelete">
		<isset property="is-windows" />
	</condition>
	<condition property="ldapdelete" value="${zimbra.home.dir}/openldap/bin/ldapdelete">
		<isset property="is-unix" />
	</condition>

	<condition property="slapd.conf" value="conf/ldap/slapd.win.conf">
		<isset property="is-windows" />
	</condition>
	<condition property="slapd.conf" value="conf/ldap/slapd.conf">
		<isset property="is-unix" />
	</condition>
	<property name="slapd.conf.in" location="${slapd.conf}" />

	<condition property="slapd.conf.out" value="${zimbra.home.dir}/openldap/slapd.conf">
		<isset property="is-windows" />
	</condition>
	<condition property="slapd.conf.out" value="${zimbra.home.dir}/conf/slapd.conf">
		<isset property="is-unix" />
	</condition>

	<condition property="zimbra.schema.dir" value="${zimbra.home.dir}/openldap/etc/schema/">
		<isset property="is-windows" />
	</condition>
	<condition property="zimbra.schema.dir" value="${zimbra.home.dir}/openldap/etc/openldap/schema">
		<isset property="is-unix" />
	</condition>
	
	<taskdef resource="net/sf/antcontrib/antlib.xml">
	   <classpath>
	     <pathelement location="jars/ant-contrib-1.0b1.jar"/>
	   </classpath>
	</taskdef>
	
	<path id="class.path">
		<pathelement location="${build.classes.dir}" />
		<fileset dir="${jars.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="class.path" />

	<path id="all.java.path">
		<pathelement location="${src.java.dir}" />
		<pathelement location="${generated.java.dir}" />
	</path>

	<fileset dir="${src.java.dir}" id="src.java.files">
		<include name="**/*.java" />
	</fileset>

	<fileset dir="${generated.java.dir}" id="generated.java.files">
		<include name="**/*.java" />
	</fileset>


	<target name="build-init">
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.bin.dir}" />
		<mkdir dir="${dist.libexec.dir}" />
		<mkdir dir="${dist.conf.dir}" />
		<mkdir dir="${dist.l10n.msgs.dir}" />
		<mkdir dir="${dist.lib.dir}" />
		<mkdir dir="${dist.jars.dir}" />
		<mkdir dir="${dist.ext.dir}" />
		<mkdir dir="${dist.tomcat.webapps.dir}" />
		<mkdir dir="${dist.tomcat.conf.dir}" />
		<mkdir dir="${dist.tomcat.commonlib.dir}" />
		<mkdir dir="${dist.openldap.dir}" />
		<mkdir dir="${dist.openldap.etc.dir}" />
		<mkdir dir="${dist.openldap.schema.dir}" />
		<mkdir dir="${generated.java.dir}" />
		<mkdir dir="${dist.zimlet.dir}" />
	</target>

    <target name="javadoc" depends="set-buildinfo-vars">
        <javadoc sourcepath="src/java" destdir="docs/api" classpathref="class.path"
                 access="private" packagenames="com.zimbra.*" additionalparam='-tag perms:m:"Permissions Required:"'
                 breakiterator="yes" windowtitle="ZimbraServer v${zimbra.buildinfo.version}">
        	<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        	<link href="http://java.sun.com/products/javamail/javadocs/"/>
        	<link href="http://jakarta.apache.org/commons/logging/api/"/>
        	<link href="http://ical4j.sourceforge.net/api/"/>
    	</javadoc>
    </target>

	<target name="javacc-internal">
		<mkdir dir="${output.dir}" />
		<java classname="${javacc.main.class}" fork="true" classpathref="class.path" failonerror="true">
			<sysproperty key="install.root" file="${javacc.home}" />
			<arg value="-OUTPUT_DIRECTORY=${output.dir}" />
			<arg value="${target}" />
		</java>
	</target>

	<!-- invoke the "javacc" task with (target.classdir=com/foo/bar and target="gub.jj")  -->
	<target name="javacc">
		<antcall target="javacc-internal">
			<!-- <param name="output.dir" location="${generated.java.dir}/${target.classdir}"/> -->
			<param name="output.dir" location="${src.java.dir}/${target.classdir}" />
			<param name="target" location="${src.java.dir}/${target.classdir}/${target}" />
		</antcall>
	</target>

	<target name="javacc-ZimbraQueryParser">
		<antcall target="javacc">
			<param name="target.classdir" value="com/zimbra/cs/index/queryparser" />
			<param name="target" value="ZimbraQueryParser.jj" />
		</antcall>
	</target>

	<target name="set-buildinfo-vars">
		<tstamp />
		<condition property="zimbra.buildinfo.version" value="2.0">
			<not>
				<isset property="${zimbra.buildinfo.version}" />
			</not>
		</condition>
		<condition property="zimbra.buildinfo.release" value="${user.name}">
			<not>
				<isset property="${zimbra.buildinfo.release}" />
			</not>
		</condition>
		<condition property="zimbra.buildinfo.date" value="${DSTAMP}-${TSTAMP}">
			<not>
				<isset property="${zimbra.buildinfo.date}" />
			</not>
		</condition>
		<condition property="zimbra.buildinfo.host" value="${zimbra.server.hostname}">
			<not>
				<isset property="${zimbra.buildinfo.host}" />
			</not>
		</condition>

		<echo>Version: ${zimbra.buildinfo.version}</echo>
	</target>
	
	<target name="generate-buildinfo" depends="set-buildinfo-vars">
		<mkdir dir="${build.dir}/buildinfo" />
		<echo file="${build.dir}/buildinfo/BuildInfoGenerated.java">
			package com.zimbra.cs.util;
			class BuildInfoGenerated {
				public static final String VERSION = "${zimbra.buildinfo.version}";
				public static final String RELEASE = "${zimbra.buildinfo.release}";
				public static final String DATE = "${DSTAMP}-${TSTAMP}";
				public static final String HOST = "${zimbra.buildinfo.host}";
			}
		</echo>
		<javac destdir="${build.classes.dir}" debug="true" srcdir="${build.dir}/buildinfo">
		</javac>
	</target>

	<target name="compile" depends="build-init" description="Compiles the source code">
		<javac destdir="${build.classes.dir}" debug="true" classpathref="class.path">
			<src refid="all.java.path" />
		</javac>

		<echo>Hostname: ${zimbra.server.hostname}</echo>

		<antcall target="generate-buildinfo"/>

		<java classname="com.zimbra.cs.db.Versions" fork="true" classpathref="class.path" failonerror="true">
			<arg value="-o" />
			<arg value="${build.dir}" />
		</java>
	</target>

	<target name="jar" depends="compile" description="Creates the jar file">
		<copy todir="${build.classes.dir}/com/zimbra/cs/account/">
			<fileset dir="${config.dir}" includes="zimbraattrs.xml" />
		</copy>
		<jar destfile="${dist.jars.dir}/zimbrastore.jar" basedir="${build.classes.dir}" />
	</target>

	<target name="clean" description="Removes any temporary files">
		<delete dir="${build.dir}" />
	</target>

	<!-- activation.jar keeps mail.jar open.  As a result, on Windows you
       cannot undeploy because Tomcat is unable to complete delete the
       service directory. 
   	
   	   zimbra-native.jar opens a shared library so it should not be in a war
   	   file which can be redeployed. 
   	   
   	   Please copy {mail,activation,zimbra-native}.jar to $TOMCAT\common\lib
   -->
	<property name="war.exclude" value="${ical4j.jar},servlet-api.jar,mail.jar,activation.jar,zimbra-native.jar,KeyView.jar" />

	<target name="war" depends="jar">
		<echo>war.exclude=${war.exclude}</echo>
		<war warfile="${warfile}" webxml="${web.xml.source}">
			<fileset dir="WebRoot"/>
			<lib dir="${dist.jars.dir}" includes="zimbrastore.jar" />
			<lib dir="${jars.dir}" includes="*.jar" excludes="${war.exclude}" />
			<classes dir="${config.dir}" includes="sieveConfig.xml" />
		</war>
	</target>

	<target name="deploy" depends="service-deploy,install-zimlets" description="Deploy service.war to tomcat"/>
	
	<target name="service-deploy" depends="war">
		<echo message="Updating ${zimbra.home.dir}/conf/log4j.properties; if it fails on windows, try again." />
		<copy todir="${zimbra.home.dir}/conf" file="${config.dir}/log4j.properties" />
		<echo message="Updating localized message files" />
		<copy todir="${zimbra.home.dir}/conf/msgs" overwrite="true">
			<fileset dir="${config.dir}/msgs"/>
		</copy>
		<echo message="Wait for tomcat to start at http://${deploy.host}:${deploy.port}/" />
		<waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<http url="http://${deploy.host}:${deploy.port}/" />
		</waitfor>
		<deploy url="${deploy.url}" username="${deploy.user}" password="${deploy.password}" path="${deploy.path}" war="${deploy.war}" update="true" />
	</target>

	<target name="dev-dist" depends="jar,war,dev-dist-core,dev-dist-files,dev-dist-tar"
		description="Build tar file of basic dev build to unpack over RPM install"/>
	
	<target name="dev-dist-files">
		<copy todir="${dist.openldap.etc.dir}" file="${config.dir}/ldap/zimbra_mimehandlers.ldif" />
	</target>
	
	<target name="dev-dist-core">
		<delete>
			<fileset dir="${dist.dir}" includes="${dist.tarfile}" />
		</delete>
		<copy todir="${dist.bin.dir}">
			<fileset dir="${src.bin.dir}" includes="*" excludes="*.bat,zm*init" />
		</copy>
		<copy todir="${dist.libexec.dir}">
			<fileset dir="${src.bin.dir}" includes="zm*init" excludes="*.bat" />
		</copy>
		<fixcrlf srcdir="${dist.bin.dir}" eol="unix" includes="**" />
		<fixcrlf srcdir="${dist.libexec.dir}" eol="unix" includes="**" />

		<copy todir="${dist.conf.dir}" overwrite="true">
			<fileset dir="${config.dir}" includes="log4j.properties*"/>
		</copy>
		<copy todir="${dist.l10n.msgs.dir}" overwrite="true">
			<fileset dir="${config.dir}/msgs"/>
		</copy>

		<copy todir="${dist.openldap.etc.dir}" file="${config.dir}/ldap/zimbra.ldif" />
		<copy todir="${dist.openldap.schema.dir}" file="${config.dir}/ldap/zimbra.schema" />
		<copy todir="${dist.openldap.schema.dir}" file="${config.dir}/ldap/amavisd.schema" />
		<copy todir="${dist.db.dir}" file="${src.db.dir}/db.sql" />
		<copy todir="${dist.db.dir}" file="${build.dir}/versions-init.sql" />
		<copy tofile="${zimbra.home.dir}/lib/libzimbra-native.${native.so}" file="${lib.dir}/libzimbra-native.${native.so}.${native.os}.${os.arch}" failonerror="false" verbose="true"/>
		<copy todir="${dist.ext.dir}" >
			<fileset dir="${ext.dir}" includes="*/*.jar" />
		</copy>
		<copy todir="${dist.jars.dir}">
			<fileset dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar" />
		</copy>
		<copy todir="${dist.tomcat.conf.dir}">
			<fileset dir="${config.dir}" includes="server.xml,tomcat-users.xml" />
		</copy>
		<fixcrlf srcdir="${dist.conf.dir}" eol="unix" includes="**" />
		<copy todir="${dist.tomcat.commonlib.dir}">
			<fileset dir="${jars.dir}" includes="${ical4j.jar},mail.jar,activation.jar,zimbra-native.jar" />
		</copy>
		<copy file="${config.dir}/localconfig.xml" todir="${dist.conf.dir}"/>
		<!--
  	<tar destfile="${dist.dir}/test-msgs.tar">
  	  <tarfileset dir="data/TestMailRaw"
  	  			  prefix="TestMailRaw"
  	  			  includes="**"
				  excludes="CVS/*"
  	  			  mode="640" username="zimbra" group="zimbra"/>
  	</tar>
  	-->
	</target>

	<target name="dev-dist-tar">
		<tar destfile="${dist.dir}/${dist.tarfile}">
			<tarfileset dir="${dist.dir}" includes="**" excludes="bin/*,*.sh" mode="640" username="zimbra" group="zimbra" />
			<tarfileset dir="${dist.bin.dir}" prefix="bin" includes="**" mode="750" username="zimbra" group="zimbra" />
		</tar>
	</target>
		
	<!-- There are two ways to reset the world:
  		(a) If your tomcat is a service, use "reset-the-world".
 		(b) If your tomcat is inside eclipse then do this:
 				1. stop tomcat
 				2. run the target "reset-the-world-stage1"
 				3. start tomcat
 				4. run the target "reset-the-world-stage2" -->

	<target name="reset-the-world" depends="reset-the-world-stage1,reset-the-world-stage2" 
		description="Reset the world"/>

	<target name="reset-the-world-stage1" depends="clean,compile,jar,init" description="Run when tomcat is stopped." />

	<target name="reset-the-world-stage2" depends="service-deploy,deploy-zimlets,inject" description="Run when tomcat is running." />

	<target name="init" depends="stop-servers,quick-init,ldap-init,tomcat-init,start-ldap,ldap-load,start-tomcat" />
	
	<target name="inject" depends="compile" description="Insert messages into the system">
		<echo>Inserting default contacts: user1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.soap.SoapTestHarness" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-f data/soap/samplecontacts.xml" />
		</java>
		<echo>Creating default search folders: user1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.soap.SoapTestHarness" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-f data/soap/samplesearchfolders.xml" />
		</java>
		<echo message="Wait for lmtp host=${lmtp.host} port=${lmtp.port}" />
		<waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<socket server="${lmtp.host}" port="${lmtp.port}" />
		</waitfor>
		<echo>LmtpInject messages</echo>
		<java classname="com.zimbra.cs.lmtpserver.utils.LmtpInject" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-t ${lmtpinject.numthreads} -a ${lmtp.host} -p ${lmtp.port} -r user1@${zimbra.server.hostname} -s ho@example.zimbra.com -d" />
			<arg path="data/TestMailRaw" />
		</java>
	</target>

	<target name="import-wiki" description="Import Wiki documents into the system">
		<echo>Importing Wiki documents for: user1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.wiki.ImportWiki" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-d data/wiki" />
		</java>
	</target>

    <!-- Insert one directory (data/testmsgs) of mail -->
    <target name="inject1" depends="compile">
        <echo message="Wait for lmtp host=${lmtp.host} port=${lmtp.port}" />
        <waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second">
            <socket server="${lmtp.host}" port="${lmtp.port}" />
        </waitfor>
        <echo>LmtpInject messages</echo>
        <java classname="com.zimbra.cs.lmtpserver.utils.LmtpInject" fork="true" classpathref="class.path" failonerror="true">
            <arg line="-t ${lmtpinject.numthreads} -a ${lmtp.host} -p ${lmtp.port} -r user1@${zimbra.server.hostname} -s ho@example.zimbra.com -d" />
            <arg path="data/testmsg" />
        </java>
    </target>

    <target name="localhost-ssl-cert" description="make a cert for ssl access">
		<delete failonerror="no">
			<fileset dir="${tomcat.home.dir}/conf" includes="keystore" />
		</delete>
		<genkey alias="tomcat" storepass="zimbra" keyalg="rsa" verbose="false" keystore="${tomcat.home.dir}/conf/keystore" validity="365">
			<dname>
				<param name="CN" value="localhost" />
				<param name="OU" value="Engineering" />
				<param name="O" value="Zimbra Systems" />
				<param name="C" value="US" />
			</dname>
		</genkey>
		<genkey alias="tomcat-dsa" storepass="zimbra" keyalg="dsa" verbose="false" keystore="${tomcat.home.dir}/conf/keystore" validity="365">
			<dname>
				<param name="CN" value="localhost" />
				<param name="OU" value="Engineering" />
				<param name="O" value="Zimbra Systems" />
				<param name="C" value="US" />
			</dname>
		</genkey>
	</target>

	<target name="dir-init">
		<echo message="If the following deletes fail, wait for your tomcat" />
		<echo message="to stop (or stop your tomcat as the case may be)" />
		<echo message="and try again later." />
		<delete dir="${zimbra.home.dir}/store" />
		<delete dir="${zimbra.home.dir}/index" />
		<delete dir="${zimbra.home.dir}/redolog" />
		<delete dir="${zimbra.home.dir}/repl" />
		<delete dir="${zimbra.home.dir}/backup" />
		<delete dir="${zimbra.home.dir}/lib/ext" />
		<delete dir="${zimbra.home.dir}/conf/msgs" />
		<delete failonerror="no">
			<fileset dir="${zimbra.home.dir}/log" includes="*.log" />
		</delete>
		<delete failonerror="no">
			<fileset dir="${tomcat.home.dir}/logs" includes="*" />
		</delete>

		<mkdir dir="${zimbra.home.dir}" />
		<mkdir dir="${zimbra.home.dir}/bin" />
		<mkdir dir="${zimbra.home.dir}/lib" />
		<mkdir dir="${zimbra.home.dir}/log" />
		<mkdir dir="${zimbra.home.dir}/store" />
		<mkdir dir="${zimbra.home.dir}/index" />
		<mkdir dir="${zimbra.home.dir}/redolog" />
		<mkdir dir="${zimbra.home.dir}/redolog/archive" />
		<mkdir dir="${zimbra.home.dir}/repl" />
		<mkdir dir="${zimbra.home.dir}/backup" />
		<mkdir dir="${zimbra.home.dir}/conf" />
		<copy tofile="${zimbra.home.dir}/conf/localconfig.xml" file="${config.dir}/localconfig-dev.xml" overwrite="true"/>
		<copy todir="${zimbra.home.dir}/conf" file="${config.dir}/log4j.properties" />
		<mkdir dir="${tomcat.home.dir}" />
		<mkdir dir="${tomcat.home.dir}/conf" />
		<mkdir dir="${tomcat.home.dir}/conf/msgs" />
		<mkdir dir="${tomcat.home.dir}/common" />
		<mkdir dir="${tomcat.home.dir}/common/lib" />
		<mkdir dir="${zimbra.home.dir}/db" />
		<copy todir="${zimbra.home.dir}/db">
			<fileset dir="${src.db.dir}" />
		</copy>
	</target>

	<target name="db-init" description="Recreate the database tables">
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:7306/" userid="root" password="zimbra" 
			 classpathref="class.path" onerror="continue" keepformat="true" src="src/db/dropdb.sql" />

		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://127.0.0.1:7306/" userid="root" password="zimbra"
			 classpathref="class.path" onerror="abort" keepformat="true" src="src/db/db.sql" />

		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://127.0.0.1:7306/" userid="root" password="zimbra"
			 classpathref="class.path" onerror="abort" keepformat="false" src="${build.dir}/versions-init.sql" />
	</target>

	<!-- for quickly wiping out database and files between tests; server start/stop is up to user -->
	<target name="quick-init" depends="db-init,dir-init" />

	<target name="ldap-init">
		<!-- We have to force overwrite or a freshly installed openldap's configs won't overwritten. -->
		<copy failonerror="true" overwrite="true" file="${slapd.conf.in}" tofile="${slapd.conf.out}" />
		<copy failonerror="true" overwrite="true" file="conf/ldap/zimbra.schema" todir="${zimbra.schema.dir}" />
		<copy failonerror="true" overwrite="true" file="conf/ldap/amavisd.schema" todir="${zimbra.schema.dir}" />
		<delete dir="${zimbra.home.dir}/openldap/var/openldap-data" />
		<mkdir dir="${zimbra.home.dir}/openldap/var/openldap-data" />
	</target>

	<target name="ldap-load" depends="ldap-load-step1,ldap-load-accounts,ldap-load-mime-handlers" />

	<target name="ldap-load-step1" description="rub it">
		<exec executable="${ldapmodify}">
			<arg line="-a -c -w zimbra -D uid=zimbra,cn=admins,cn=zimbra -x -f" />
			<arg file="conf/ldap/zimbra.ldif" />
		</exec>
		<echo>Editing localconfig zimbra_server_hostname to be ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.localconfig.Main" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-e zimbra_server_hostname=${zimbra.server.hostname}"/>
		</java>
		<echo>Setting zimbraLogHostname to ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ModifyConfig zimbraLogHostname ${zimbra.server.hostname}" />
		</java>
		<echo>Provisioning server entry for ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="CreateServer ${zimbra.server.hostname} zimbraSmtpHostname ${zimbra.smtp.host} zimbraMailPort 7070 zimbraMailMode http zimbraImapCleartextLoginEnabled TRUE" />
		</java>
		<echo>Setting installed-service attributes on server ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ModifyServer ${zimbra.server.hostname} zimbraServiceInstalled ldap zimbraServiceInstalled mta zimbraServiceInstalled mailbox" />
		</java>
		<echo>Setting enabled-service attributes on server ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ModifyServer ${zimbra.server.hostname} zimbraServiceEnabled ldap zimbraServiceEnabled mta zimbraServiceEnabled mailbox" />
		</java>
		<echo>Creating domain: ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="cd ${zimbra.server.hostname}" />
		</java>
		<echo>Setting default domain: ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="mcf zimbraDefaultDomainName ${zimbra.server.hostname}" />
		</java>
	</target>
	
	<target name="ldap-load-accounts">
		<echo>Creating account: admin@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="mc default zimbraFeatureIMEnabled TRUE" />
		</java>
		<!-- This account is used during QA tests. -->
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ca admin@${zimbra.server.hostname} test123 zimbraMailHost ${zimbra.server.hostname} cn 'Administrator' displayName 'Administrator' zimbraIsAdminAccount TRUE zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana' zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} telephoneNumber '+1 650 555 0000'"/>
		</java>
		<echo>Creating account: user1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ca user1@${zimbra.server.hostname} test123 zimbraMailHost ${zimbra.server.hostname} cn 'Demo User One' displayName 'Demo User One' zimbraMailQuota 62914560 zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana' zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} telephoneNumber '+1 650 555 1111'"/>
		</java>
		<echo>Creating account: user2@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ca user2@${zimbra.server.hostname} test123 zimbraMailHost ${zimbra.server.hostname} cn 'Demo User Two' displayName 'Demo User Two' zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana' zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} telephoneNumber '+1 650 555 2222'"/>
		</java>
		<echo>Creating account: user3@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ca user3@${zimbra.server.hostname} test123 zimbraMailHost ${zimbra.server.hostname} cn 'Demo User Three' displayName 'Demo User Three' zimbraAttachmentsIndexingEnabled FALSE zimbraPrefTimeZoneId '(GMT-05.00) Eastern Time (US &amp; Canada)' zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} telephoneNumber '+1 650 555 3333'"/>
		</java>
		<echo>Creating account: user4@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ca user4@${zimbra.server.hostname} test123 zimbraMailHost ${zimbra.server.hostname} cn 'Demo User Four' displayName 'Demo User Four' zimbraAttachmentsIndexingEnabled FALSE zimbraPrefTimeZoneId '(GMT-07.00) Arizona' zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} telephoneNumber '+1 650 555 4444'"/>
		</java>

		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ca spam-sink@${zimbra.server.hostname} test123 zimbraMailHost ${zimbra.server.hostname} zimbraAttachmentsIndexingEnabled FALSE zimbraMailQuota 0" />
		</java>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="mcf zimbraSpamIsSpamAccount spam-sink@${zimbra.server.hostname}" />
		</java>
		<echo>Setting up not junk account</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ca ham-sink@${zimbra.server.hostname} test123 zimbraMailHost ${zimbra.server.hostname} zimbraAttachmentsIndexingEnabled FALSE zimbraMailQuota 0" />
		</java>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="mcf zimbraSpamIsNotSpamAccount ham-sink@${zimbra.server.hostname}" />
		</java>

		<echo>Creating calendar resource: room-mississippi@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ccr room-mississippi@${zimbra.server.hostname}
				       displayName 'Mississippi Conference Room'
					   description 'Projector, DVD'
					   zimbraNotes 'The door squeaks.'
				       zimbraCalResType Location
					   zimbraCalResAutoAcceptDecline TRUE
					   zimbraCalResAutoDeclineIfBusy TRUE
					   zimbraCalResAutoDeclineRecurring FALSE
					   zimbraCalResLocationDisplayName 'Site: HQ, Building: A, Floor: 11, Room 1101'
					   zimbraCalResSite HQ
					   zimbraCalResBuilding A
					   zimbraCalResFloor 11
					   zimbraCalResRoom 1101
					   zimbraCalResCapacity 10
					   zimbraCalResContactName 'Administrator'
					   zimbraCalResContactEmail admin@${zimbra.server.hostname}
					   zimbraCalResContactPhone '(650)555-1212'
					   street '1500 Fashion Island Blvd., Suite 100'
					   l 'San Mateo'
					   st 'California'
					   postalCode 94404
					   co USA
				       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana'
				       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}"/>
		</java>
		<echo>Creating calendar resource: room-amazon@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ccr room-amazon@${zimbra.server.hostname}
				       displayName 'Amazon Conference Room'
					   description 'TV, VCR; room is always available'
				       zimbraNotes 'A/C not working well'
				       zimbraCalResType Location
					   zimbraCalResAutoAcceptDecline TRUE
					   zimbraCalResAutoDeclineIfBusy FALSE
					   zimbraCalResAutoDeclineRecurring FALSE
					   zimbraCalResLocationDisplayName 'Room 1201, 2nd Floor of Building A at HQ'
					   zimbraCalResSite HQ
					   zimbraCalResBuilding A
					   zimbraCalResFloor 12
					   zimbraCalResRoom 1202
					   zimbraCalResCapacity 20
					   zimbraCalResContactName 'Administrator'
					   zimbraCalResContactEmail admin@${zimbra.server.hostname}
					   zimbraCalResContactPhone '(650)555-1212'
				       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana'
				       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}"/>
		</java>
		<echo>Creating calendar resource: room-nile@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ccr room-nile@${zimbra.server.hostname}
				       displayName 'Nile Conference Room'
					   description 'Projector; for single meetings only'
					   zimbraNotes 'need to get some more chairs in here'
				       zimbraCalResType Location
					   zimbraCalResAutoAcceptDecline TRUE
					   zimbraCalResAutoDeclineIfBusy TRUE
					   zimbraCalResAutoDeclineRecurring TRUE
					   zimbraCalResLocationDisplayName 'Room B201, 2nd basement floor, HQ Building B'
					   zimbraCalResSite HQ
					   zimbraCalResBuilding B
					   zimbraCalResFloor B2
					   zimbraCalResRoom B201
					   zimbraCalResCapacity 100
					   zimbraCalResContactName 'Administrator'
					   zimbraCalResContactEmail admin@${zimbra.server.hostname}
					   zimbraCalResContactPhone '(650)555-1212'
				       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana'
				       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}"/>
		</java>
		<echo>Creating calendar resource: projector1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ccr projector1@${zimbra.server.hostname}
				       displayName 'Projector'
					   description '800x600 max resolution'
					   zimbraNotes 'usually works okay'
				       zimbraCalResType Equipment
					   zimbraCalResAutoAcceptDecline FALSE
					   zimbraCalResAutoDeclineIfBusy FALSE
					   zimbraCalResAutoDeclineRecurring FALSE
					   zimbraCalResLocationDisplayName 'HQ Building B, B2 floor'
					   zimbraCalResSite HQ
					   zimbraCalResBuilding B
					   zimbraCalResFloor B2
					   zimbraCalResRoom B201
					   zimbraCalResContactName 'Administrator'
					   zimbraCalResContactEmail admin@${zimbra.server.hostname}
					   zimbraCalResContactPhone '(650)555-1212'
				       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana'
				       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}"/>
		</java>
		<echo>Creating calendar resource: pencil1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="ccr pencil1@${zimbra.server.hostname}
				       displayName '#2 pencil'
					   description 'a writing tool'
				       zimbraNotes 'must occasionally be sharpened'
				       zimbraCalResType Equipment
					   zimbraCalResAutoAcceptDecline TRUE
					   zimbraCalResAutoDeclineIfBusy TRUE
					   zimbraCalResAutoDeclineRecurring TRUE
					   street '1500 Fashion Island Blvd, Suite 100'
					   l 'San Mateo'
				       st CA
				       postalCode 94404
				       co USA
					   zimbraCalResContactName 'Administrator'
					   zimbraCalResContactEmail admin@${zimbra.server.hostname}
					   zimbraCalResContactPhone '(650)555-1212'
				       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada) / Tijuana'
				       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}"/>
		</java>

	</target>

	<target name="ldap-load-mime-handlers">
		<exec executable="${ldapmodify}">
			<arg line="-a -c -w zimbra -D uid=zimbra,cn=admins,cn=zimbra -x -f" />
			<arg file="conf/ldap/zimbra_mimehandlers.ldif" />
		</exec>
	</target>

	<target name="reload-zimlets" depends="install-zimlets,restart-tomcat"/>

	<target name="package-zimlets" depends="build-init,package-zimlets-core"/>
	<target name="package-zimlets-core">
		<foreach list="${zimlets}" target="package-zimlet" param="zimlet"/>
		<!-- todo:  remove these classes from service.jar -->
		<!-- todo2:  just use RegexHandler instead of creating custom classes -->
		<zip destfile="${dist.zimlet.dir}/com_zimbra_phone.zip" update="true">
			<fileset dir="${build.classes.dir}" includes="**/NANPHandler.class"/>
		</zip>
		<zip destfile="${dist.zimlet.dir}/com_zimbra_tracking.zip" update="true">
			<fileset dir="${build.classes.dir}" includes="**/TrackingHandler.class"/>
		</zip>
		<zip destfile="${dist.zimlet.dir}/com_zimbra_url.zip" update="true" >
			<fileset dir="${build.classes.dir}" includes="**/URLHandler.class"/>
		</zip>
	</target>

	<target name="package-zimlet">
		<echo>${zimlet}</echo>
		<zip destfile="${dist.zimlet.dir}/${zimlet}.zip" update="true" >
			<fileset dir="${config.dir}/zimlets/${zimlet}" />
		</zip>
	</target>

	<target name="deploy-zimlets" depends="package-zimlets">
		<foreach list="${zimlets}" target="install-zimlet" param="zimlet">
			<param name="action" value="deploy"/>
		</foreach>
	</target>

	<target name="install-zimlets" depends="package-zimlets">
		<foreach list="${zimlets}" target="install-zimlet" param="zimlet">
			<param name="action" value="install"/>
		</foreach>
	</target>

	<target name="install-zimlet">
		<echo>${action} ${zimlet}</echo>
		<java classname="com.zimbra.cs.zimlet.ZimletUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-q" />
			<arg line="${action}" />
			<arg file="${dist.zimlet.dir}/${zimlet}.zip" />
		</java>
	</target>

    <target name="tomcat-init" depends="localhost-ssl-cert,tomcat-init-unix">
		<copy todir="${tomcat.home.dir}/common/lib" file="${jars.dir}/${ical4j.jar}" />
		<copy todir="${tomcat.home.dir}/common/lib" file="${jars.dir}/activation.jar" />
		<copy todir="${tomcat.home.dir}/common/lib" file="${jars.dir}/mail.jar" />
		<copy todir="${tomcat.home.dir}/common/lib" file="${jars.dir}/zimbra-native.jar" />
		<copy todir="${tomcat.home.dir}/common/endorsed" file="${jars.dir}/zimbra-charset.jar" />
		<copy todir="${zimbra.home.dir}/conf" file="${config.dir}/log4j.properties" />
		<copy todir="${zimbra.home.dir}/lib/ext">
    		<fileset dir="${ext.dir}" includes="*/*.jar"/>
    	</copy>
		<copy todir="${zimbra.home.dir}/lib/jars">
			<fileset dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar" />
		</copy>
		<copy todir="${zimbra.home.dir}/lib/jars" file="${dist.jars.dir}/zimbrastore.jar" />
	</target>

	<target name="tomcat-init-unix" if="is-unix">
		<copy tofile="${zimbra.home.dir}/lib/libzimbra-native.${native.so}" file="${lib.dir}/libzimbra-native.${native.so}.${native.os}.${os.arch}" verbose="true"/>
		<copy todir="${zimbra.home.dir}/bin">
			<fileset dir="${src.bin.dir}" includes="*" />
		</copy>
		<chmod perm="a+rx">
			<fileset dir="${zimbra.home.dir}/bin" includes="*" />
		</chmod>
	</target>

	<target name="stop-servers" depends="stop-tomcat,stop-ldap" />
	
	<!-- LDAP service control -->
	<target name="stop-ldap" depends="stop-ldap-windows,stop-ldap-unix" />
	
	<target name="stop-ldap-windows" if="is-windows">
		<exec executable="net">
			<arg value="stop" />
			<arg value="openldap directory service" />
		</exec>
	</target>
		
	<target name="stop-ldap-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/ldap">
			<arg value="stop" />
		</exec>
	</target>
	
	<target name="start-ldap" depends="start-ldap-windows,start-ldap-unix" />

	<target name="start-ldap-windows" if="is-windows">
		<exec executable="net">
			<arg value="start" />
			<arg value="openldap directory service" />
		</exec>
	</target>

	<target name="start-ldap-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/ldap">
			<arg value="start" />
		</exec>
	</target>

	<!-- Tomcat service control -->
	<target name="restart-tomcat" depends="stop-tomcat,start-tomcat"/>
	<target name="stop-tomcat" depends="stop-tomcat-windows,stop-tomcat-unix"/>

	<target name="stop-tomcat-windows" if="is-windows">
		<exec executable="net">
			<arg value="stop" />
			<arg value="apache tomcat" />
		</exec>
		<!-- Wait for Tomcat to really go away. -->
		<echo>Waiting for tomcat to stop</echo>
		<waitfor checkevery="1" checkeveryunit="second" maxwait="10" maxwaitunit="second">
			<not><http url="http://${deploy.host}:${deploy.port}/" /></not>
		</waitfor>
	</target>

	<target name="stop-tomcat-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/tomcat">
			<arg value="stop" />
		</exec>
	</target>

	<target name="start-tomcat" depends="start-tomcat-windows,start-tomcat-unix" />

	<target name="start-tomcat-windows" if="is-windows">
		<exec executable="net">
			<arg value="start" />
			<arg value="apache tomcat" />
		</exec>
	</target>

	<target name="start-tomcat-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/tomcat">
			<arg value="start" />
		</exec>
	</target>

	<target name="empty" description="Dummy Target used by project_builder to force eclipse to refresh" />

</project>
