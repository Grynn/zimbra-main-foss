#!/usr/bin/perl
#
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010 Zimbra, Inc.
#
# The contents of this file are subject to the Zimbra Public License
# Version 1.3 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****
#
use strict;
use lib '/opt/zimbra/zimbramon/lib';
use Net::LDAP;
use XML::Simple;
use Getopt::Long;
use Data::UUID;

if ( ! -d "/opt/zimbra/opendkim" ) {
  print "ERROR: opendkim does not appear to be installed - exiting\n";
  exit(1);
}

my $id = getpwuid($<);
chomp $id;
if ($id ne "zimbra") {
  print STDERR "Error: must be run as zimbra user\n";
  exit (1);
}

my $keygen = "/opt/zimbra/opendkim/bin/opendkim-genkey";
my ($add, $help, $query, $update, $domain, $delete);

my $opts_good = GetOptions(
        'h|help' => \$help,
        'a|add' => \$add,
        'd|domain=s' => \$domain,
        'q|query' => \$query,
		'r|remove' => \$delete,
        'u|update' => \$update,
);

if (!$opts_good) {
        print STDERR "\n";
        usage();
}
if ($help) {
        usage(0);
}

if (!($domain)) {
  usage(0);
}

if (!($add) && !($query) && !($update) && !($delete)) {
  usage(0);
}

if ($add+$query+$update+$delete > 1) {
  usage(0);
}

my $localxml = XMLin("/opt/zimbra/conf/localconfig.xml");
my $ldap_master_url = $localxml->{key}->{ldap_master_url}->{value};
my $zimbra_admin_dn = $localxml->{key}->{zimbra_ldap_userdn}->{value};
my $zimbra_admin_password = $localxml->{key}->{zimbra_ldap_password}->{value};
chomp($zimbra_admin_password);
my $zimbra_home = $localxml->{key}->{zimbra_home}->{value};
my $ldap_starttls_supported = $localxml->{key}->{ldap_starttls_supported}->{value};
my $zimbra_require_interprocess_security = $localxml->{key}->{zimbra_require_interprocess_security}->{value};

if ($zimbra_home eq "") {
   $zimbra_home = "/opt/zimbra";
}

my $mesg;
my $ldap = Net::LDAP->new($ldap_master_url) or die "$@";

if ($ldap_master_url !~ /^ldaps/i) {
  if ($ldap_starttls_supported) {
    $mesg = $ldap->start_tls(
              verify => 'none',
              capath => "${zimbra_home}/conf/ca",
     ) or die "start_tls: $@";
     $mesg->code && die "Could not execute StartTLS\n";
  }
}
if (!defined($ldap)) {
  die "Server down\n";
}
$mesg = $ldap->bind($zimbra_admin_dn, password=>$zimbra_admin_password);
$mesg->code && die "Bind: ". $mesg->error . "\n";

$mesg = $ldap ->search(
          base=>"",
          filter=>"(&(objectClass=zimbraDomain)(zimbraDomainName=$domain))",
          scope=>"sub",
);
my $size = $mesg->count;
if ($size == 0) {
  print "Domain $domain not found.\n";
  exit(1);
}

if($add) {
  $mesg = $ldap->search(
       base=>"",
	   filter=>"(&(objectClass=zimbraDomain)(zimbraDomainName=$domain)(DKIMSelector=*))",
	   scope=>"sub",
  );
  my $size = $mesg->count;
  if ($size > 0) {
    print "Error: Domain $domain already has DKIM enabled.\n";
	exit(1);
  }
  my $selector;
  my $ug = Data::UUID->new;
  $selector = $ug->create_str();

} elsif ($query) {
  print "DKIM Information for domain $domain\n";
  $mesg = $ldap->search(
       base=>"",
	   filter=>"(&(objectClass=zimbraDomain)(zimbraDomainName=$domain)(DKIMSelector=*))",
	   scope=>"sub",
  );
  my $size = $mesg->count;
  if ($size == 0) {
    print "No DKIM data\n";
  } else {
    my $entry=$mesg->entry($size-1);
    my $attrval=$entry->get_value("DKIMSelector");
    print "   DKIM Selector: $attrval\n";
    my $attrval=$entry->get_value("DKIMKey");
    print "   DKIM Private Key: $attrval\n";
    my $attrval=$entry->get_value("DKIMPublicKey");
    print "   DKIM Public Key: $attrval\n";
    my $attrval=$entry->get_value("DKIMIdentity");
    print "   DKIM Identity:$attrval\n";
    my $attrval=$entry->get_value("DKIMDomain");
    print "   DKIM Domain: $attrval";
  }
} elsif ($update) {
  $mesg = $ldap->search(
       base=>"",
	   filter=>"(&(objectClass=zimbraDomain)(zimbraDomainName=$domain)(DKIMSelector=*))",
	   scope=>"sub",
  );
  my $size = $mesg->count;
  if ($size == 0 ) {
    print "Error: Domain $domain doesn't have DKIM enabled.\n";
	exit(1);
  }
  my $selector;
  my $ug = Data::UUID->new;
  $selector = $ug->create_str();
} elsif ($delete) {
}

$ldap->unbind();
exit;

sub usage() {
  print "$0 [-a] [-q] [-r] [-x] -d domain\n";
  print "-a: Add new key pair and selector for domain [default]\n";
  print "-h: Show this usage block\n";
  print "-q: Query DKIM information for domain\n";
  print "-r: Remove DKIM keys for domain\n";
  print "-u: Update keys for domain\n";
  print "-d domain: Domain to use\n";
  print "One of [a, q, r, or u] must be supplied\n";
  exit 1;
}
