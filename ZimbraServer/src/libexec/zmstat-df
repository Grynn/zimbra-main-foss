#!/usr/bin/perl -w
# 
# ***** BEGIN LICENSE BLOCK *****
# 
# Zimbra Collaboration Suite Server
# Copyright (C) 2007 Zimbra, Inc.
# 
# The contents of this file are subject to the Yahoo! Public License
# Version 1.0 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# 
# ***** END LICENSE BLOCK *****
# 

# Not a typo, /bin/df (not file-descriptors)

use strict;
use Getopt::Long;
use lib "/opt/zimbra/zimbramon/lib";
use Zimbra::Mon::Zmstat;
use Zimbra::Mon::Logger;
use vars qw($LOGFH $CONSOLE $LOGFILE $ROTATE_NOW $ROTATE_DEFER);

zmstatInit();

my $DF = '/bin/df';
my $HEADING = 'timestamp, path, disk, disk_use, disk_pct_used, disk_space';

sub get_df_stat() {
    open(DF, "$DF |") || die "Can't open $DF: $!";
    my $dev;
    my @stats;
    while (<DF>) {
         next if ($_ =~ /^Filesystem\s+/);
         my ($space, $used, $avail, $pct, $path);
         if ($_ =~ /^(\S+)\s*$/) {
             $dev = $1;
             next;
         } elsif ($_ =~ /^(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\%\s+(.+)/) {
             $dev   = $1;
             $space = $2;
             $used  = $3;
             $avail = $4;
             $pct   = $5;
             $path  = $6;
         } elsif ($_ =~ /^\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\%\s+(.+)/) {
             $space = $1;
             $used  = $2;
             $avail = $3;
             $pct   = $4;
             $path  = $5;
        }
        push(@stats, {
            path => $path,
            disk => $dev,
            disk_use => $used,
            disk_pct_used => $pct,
            disk_space => $space
        });
    }
    @stats;
}
sub sighup {
    if (!$CONSOLE) {
        $LOGFH = rotateLogFile($LOGFH, $LOGFILE, $HEADING);
    } else {
        $ROTATE_NOW = 1;
    }
}
$SIG{HUP} = \&sighup;

sub usage {
    print STDERR << '_USAGE_';
Usage: zmstat-df [options]
Monitor disk usage
-i, --interval: output a line every N seconds
-l, --log:      log file (default is /opt/zimbra/zmstat/df.csv)
-c, --console:  output to stdout

If logging to a file, rotation occurs when a HUP signal is sent or when
the date changes.  The current log is renamed to <dir>/YYY-MM-DD/df.csv
and a new file is created.
_USAGE_
    exit(1);
}

$| = 1;

$LOGFILE = getLogFilePath('df.csv');
my $interval = getZmstatInterval();
my $opts_good = GetOptions(
    'interval=i' => \$interval,
    'log=s' => \$LOGFILE,
    'console' => \$CONSOLE,
);
if (!$opts_good) {
    print STDERR "\n";
    usage();
}
createPidFile('zmstat-df.pid');

my $date = getDate();
if ($CONSOLE) {
    $LOGFH = \*STDOUT;
    $LOGFH->print($HEADING . "\n");
    
} else {
    $LOGFH = openLogFile($LOGFILE, $HEADING);
}
waitUntilNiceRoundSecond($interval);

while (1) {
    my @stats = get_df_stat();
    my $tstamp = getTstamp();
    my $currDate = getDate();
    if ($currDate ne $date && !$CONSOLE) {
        $LOGFH = rotateLogFile($LOGFH, $LOGFILE, $HEADING, $date);
        $date = $currDate;
    }
    $ROTATE_DEFER = 1;
    foreach my $stat (@stats) {
    	my $line = sprintf("%s, %s, %s, %d, %d, %d", $tstamp,
                           $stat->{path}, $stat->{disk}, $stat->{disk_use},
                           $stat->{disk_space}, $stat->{disk_pct_used});
        $LOGFH->print("$line\n");
        Zimbra::Mon::Logger::Log( "info", "zmstat-df: ${HEADING}:: $line"); 
    }
    $LOGFH->flush();
    $ROTATE_DEFER = 0;
    if ($ROTATE_NOW) {
        $ROTATE_NOW = 0;
        $LOGFH = rotateLogFile($LOGFH, $LOGFILE, $HEADING);
    }
    sleep($interval);
}
