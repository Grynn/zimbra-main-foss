package com.zimbra.cs.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Connection wrapper that uses RetryPreparedStatement
 *
 */
public class RetryConnection extends DebugConnection {

    RetryConnection(Connection conn) {
        super(conn);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new RetryPreparedStatement(this, mConn.prepareStatement(sql), sql);
    }


    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency)
    throws SQLException {
        return new RetryPreparedStatement(
            this, mConn.prepareStatement(sql, resultSetType, resultSetConcurrency), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency,
                                              int resultSetHoldability)
    throws SQLException {
        return new RetryPreparedStatement(
           this, mConn.prepareStatement(sql, resultSetType,
                    resultSetConcurrency, resultSetHoldability), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
    throws SQLException {
        return new RetryPreparedStatement(
            this, mConn.prepareStatement(sql, autoGeneratedKeys), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
    throws SQLException {
        return new RetryPreparedStatement(
            this, mConn.prepareStatement(sql, columnIndexes), sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
        throws SQLException {
        return new RetryPreparedStatement(
            this, mConn.prepareStatement(sql, columnNames), sql);
    }
}
