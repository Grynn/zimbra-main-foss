#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite Server.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2005, 2006 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 

source `dirname $0`/zmshutil || exit 1
zmsetvars

#
# Expected by catalina scripts
#
export JAVA_HOME=${tomcat_java_home}
if [ ! -d ${tomcat_directory} ]; then
	exit 0
fi
zmassert -d ${tomcat_java_home}
zmassert -d ${tomcat_directory}

#
# Memory for use by JVM
#
memkb=$(zmsysmemkb)
jm=`expr $memkb '*' ${tomcat_java_heap_memory_percent} / 100 / 1024`

#
# Help see if tomcat process is running, note that CATALINA_PID is
# passed down to tomcat scripts which do the actual writing of the pid
# file.
#
if [ x${tomcat_pidfile} = "x" ]; then
	tomcat_pidfile="/opt/zimbra/log/tomcat.pid"
fi

export CATALINA_PID=${tomcat_pidfile}

if [ -s ${tomcat_pidfile} ]; then
    pid=`cat ${tomcat_pidfile}`
fi


isrunning() {
    kill -0 "$pid" 2> /dev/null
    return
}

#
# Expand war files.
#
mk_download_dir() {
	if [ -d "${tomcat_directory}/webapps/zimbra/downloads" ]; then
		cat >${tomcat_directory}/webapps/zimbra/downloads/index.html<<EOF
<HTML><BODY>
EOF
		for i in ${tomcat_directory}/webapps/zimbra/downloads/*; do
			filename=`basename $i`
			if [ x$filename = "xindex.html" ]; then
				continue
			fi
			cat >>${tomcat_directory}/webapps/zimbra/downloads/index.html<<EOF
<BR>
<A HREF="/zimbra/downloads/${filename}">${filename}</A>
EOF
		done
		cat >>${tomcat_directory}/webapps/zimbra/downloads/index.html<<EOF
</BODY></HTML>
EOF
	fi
}

rewriteconfig() {
    /opt/zimbra/libexec/zmmtaconfig mailbox > /dev/null 2>&1
}

rewriteWebXml() {
    /opt/zimbra/libexec/zmmtaconfig webxml > /dev/null 2>&1
}

#
# Main
#
case "$1" in
    'start')
        mk_download_dir
		if [ x$2 = "x" ]; then
		   rewriteconfig
		fi
		rewriteWebXml
		/opt/zimbra/bin/zmtlsctl
        if [ -s ${tomcat_pidfile} ]; then
            if isrunning; then
                echo "Error: tomcat already running (pid $pid)"
                exit 0
            fi
        fi
        # Create the work directories so they're owned by zimbra
        mkdir -p ${tomcat_directory}/work/Catalina/localhost/_/org/apache/jsp/public_
        mkdir -p ${tomcat_directory}/work/Catalina/localhost/zimbra/org/apache/jsp/public_
        mkdir -p ${tomcat_directory}/work/Catalina/localhost/service/org/apache/jsp/public_
        mkdir -p ${tomcat_directory}/work/Catalina/localhost/zimbraAdmin/org/apache/jsp/public_
        mkdir -p ${tomcat_directory}/work/Catalina/localhost/manager
                
        # export ZIMBRA_TOMCAT_START_DEBUG=1
        sudo ${zimbra_home}/libexec/zmtomcatmgr start \
            > ${tomcat_directory}/logs/catalina.out 2>&1
		exit $?
        ;;

    'kill')
        if [ ! -s "${tomcat_pidfile}" ]; then
            echo "Error: no pid in ${tomcat_pidfile}"
            exit 0
        fi
        if ! isrunning; then
            echo "Error: tomcat not running (pid $pid), stale pid file?"
            exit 0
        fi
        echo "Sending TERM signal to tomcat (pid $pid)"
        kill -TERM "$pid" 2> /dev/null
        if isrunning; then
                sleep 5
                echo "Sending -9 signal to tomcat (pid $pid)"
                kill -9 "$pid" 2> /dev/null
        fi
        ;;

    'stop')
        if [ ! -s "${tomcat_pidfile}" ]; then
            echo "Error: no pid in ${tomcat_pidfile}"
            exit 0
        fi
        if ! isrunning; then
            echo "Error: tomcat not running (pid $pid), stale pid file?"
            exit 0
        fi


        # At this point, we know a tomcat java process is running and
        # we have it's pid.  We'll loop because (a) the tomcat server
        # might just be starting so the first "catalina.sh stop"
        # request might fail and (b) if for some reason we couldn't
        # stop it I want this script to sit here and loop and not
        # pretend that it did something.

		lines=`wc -l ${tomcat_directory}/logs/catalina.out | awk '{print $1}'`
		kill -3 $pid
		sleep 2
		newlines=`wc -l ${tomcat_directory}/logs/catalina.out | awk '{print $1}'`
		difflines=`expr $newlines - $lines`
		tail -${difflines} ${tomcat_directory}/logs/catalina.out > ${tomcat_directory}/logs/stacktrace.$$

        count=0

        while true; do
            # Every n seconds we send invoke one of these
			sudo ${zimbra_home}/libexec/zmtomcatmgr stop
            ${tomcat_directory}/bin/catalina.sh stop
            echo -n "Waiting "
            for ((i = 0; i < 5; i++)); do
                sleep 1;
                if ! isrunning; then
                    rm -f ${tomcat_pidfile}
                    break
                fi
                echo -n "."
            done 
            if [ -e ${tomcat_pidfile} ]; then
                echo " trying again"
            else 
                echo " shutdown ok"
                break
            fi
            count=`expr $count + 1`
            if [ $count -gt 3 ]; then
                echo "Giving up - killing $pid"
                kill -TERM $pid
                break
            fi
        done
        ;;
    
    'restart')
        $0 stop
        $0 start
        ;;
    
    'status')
        kill -0 "$pid" 2> /dev/null
        exit $?
        ;;

    *)
        echo "Usage: $0 start|stop|kill|restart|status"
        exit 1
        ;;
esac
