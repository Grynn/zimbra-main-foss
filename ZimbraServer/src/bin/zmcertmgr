#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# 
# Zimbra Collaboration Suite Server
# Copyright (C) 2007 Zimbra, Inc.
# 
# The contents of this file are subject to the Yahoo! Public License
# Version 1.0 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# 
# ***** END LICENSE BLOCK *****
# 

if [ x`whoami` != "xroot" ]; then
  echo "$0 must be run as user root"
  exit 1
fi

#drop these
#zimbra_key=zimbra.key
#zimbra_crt=zimbra.crt
#zimbra_csr=zimbra.csr

platform=`/opt/zimbra/libexec/get_plat_tag.sh 2> /dev/null` || exit 1
source `dirname $0`/zmshutil || exit 1
zmsetvars \
  zimbra_home \
  zimbra_log_directory \
  zimbra_tmp_directory \
  zimbra_java_home \
  ldap_is_master \
  mailboxd_directory \
  mailboxd_server \
  mailboxd_keystore \
  mailboxd_keystore_password \
  mailboxd_truststore_password \
  postfix_smtpd_tls_cert_file \
  postfix_smtpd_tls_key_file
  
export JAVA_HOME=${zimbra_java_home}

#echo "postfix_smtpd_tls_key_file = $postfix_smtpd_tls_key_file "
#echo "postfix_smtpd_tls_cert_file = $postfix_smtpd_tls_cert_file "
#echo "mailboxd_keystore = $mailboxd_keystore "
#echo "mailboxd_directory = $mailboxd_directory "
zimbra_home=${zimbra_home:=/opt/zimbra}
zimbra_conf_directory=${zimbra_home}/conf
zimbra_ssl_conf=${zimbra_conf_directory}/zmssl.cnf

csr_download_directory=${zimbra_home}/mailboxd/webapps/zimbraAdmin/tmp
csr_download_file=${csr_download_directory}/current.csr
crt_download_file=${csr_download_directory}/current.crt

zimbra_ssl_directory=${zimbra_home}/ssl/zimbra
zimbra_ca_directory=${zimbra_ssl_directory}/ca
zimbra_self_cert_directory=${zimbra_ssl_directory}/server
zimbra_comm_cert_directory=${zimbra_ssl_directory}/commercial

zimbra_ca_crt=${zimbra_ca_directory}/ca.pem
zimbra_ca_key=${zimbra_ca_directory}/ca.key
zimbra_ca_csr=${zimbra_ca_directory}/ca.csr
zimbra_ca_srl=${zimbra_ca_directory}/ca.srl
server_key=${zimbra_self_cert_directory}/server.key
server_crt=${zimbra_self_cert_directory}/server.crt
server_csr=${zimbra_self_cert_directory}/server.csr
commercial_key=${zimbra_comm_cert_directory}/commercial.key
commercial_crt=${zimbra_comm_cert_directory}/commercial.crt
commercial_csr=${zimbra_comm_cert_directory}/commercial.csr

subject_alt_names=""

#zimbra_comm_csr_directory=${zimbra_home}/ssl/comm_csr
#zimbra_self_csr_directory=${zimbra_home}/ssl/self_csr

# this avoid "unable to write 'random state' errors from openssl
export RANDFILE=${zimbra_home}/ssl/.rnd

#Default subject with the RDN values
SUBJECT="/C=US/ST=CA/L=San Mateo/O=Zimbra/OU=Zimbra Collaboration Suite/CN=${zimbra_server_hostname}"
validation_days=365

#OUTPUT_PREFIX="##### OUTPUT:"
ERROR_PREFIX="XXXXX ERROR:"

if [ -f "${zimbra_java_home}/lib/security/cacerts" ]; then
  CACERTS=${zimbra_java_home}/lib/security/cacerts
else
  CACERTS=${zimbra_java_home}/jre/lib/security/cacerts
fi

backupSSLDirs() {
  if [ x"${1}" != "x" ]; then
    ACTION_ROOT_DIR=${1}
  fi
  
  if [ -d "${ACTION_ROOT_DIR}" ]; then
    appendix=`date +%Y%m%d%H%M%S`
    echo "** Backup ${ACTION_ROOT_DIR} to ${ACTION_ROOT_DIR}.${appendix} "
    cp -r ${ACTION_ROOT_DIR} ${ACTION_ROOT_DIR}.${appendix}
  fi
}

initSSLDirs() {

  if [ ! -d "${zimbra_ssl_directory}" ]; then
    echo "** Creating directory ${zimbra_ssl_directory}"
    mkdir -p ${zimbra_ssl_directory}
  fi
  chmod -R 740 ${zimbra_ssl_directory}

  if [ ! -f "$RANDFILE" ]; then
    touch $RANDFILE
  fi
  chmod 740 $RANDFILE

  if [ ! -d "${zimbra_ca_directory}" ]; then
    echo "** Creating directory ${zimbra_ca_directory}"
    mkdir -p ${zimbra_ca_directory}
    mkdir -p ${zimbra_ca_directory}/newcerts
    touch ${zimbra_ca_directory}/index.txt
  fi
  chmod -R 740 ${zimbra_ca_directory}

  if [ ! -d "${zimbra_self_cert_directory}" ]; then
    echo "** Creating directory ${zimbra_self_cert_directory}"
    mkdir -p ${zimbra_self_cert_directory}
  fi
  chmod -R 740 ${zimbra_self_cert_directory}

  if [ ! -d "${zimbra_comm_cert_directory}" ]; then
    echo "** Creating directory ${zimbra_comm_cert_directory}"
    mkdir -p ${zimbra_comm_cert_directory}
  fi
  chmod -R 740 ${zimbra_comm_cert_directory}

  # bug this should only happen on store nodes
  if [ ! -d "${csr_download_directory}" ]; then
    echo "** Creating directory ${csr_download_directory}"
    mkdir -p ${csr_download_directory}
  fi
  chown zimbra:zimbra ${csr_download_directory}
  chmod -R 740 ${csr_download_directory}
    
}


getHostInfo() {

  if [ "x$platform" = "xMACOSX" -o "x$platform" = "xMACOSXx86" ]; then
    HH=`hostname`
    return
  else
    H=`hostname --fqdn`
  fi
  HH=`echo $H | grep '\.'`

  if [ "x$HH" = "x" ]; then
    echo "${ERROR_PREFIX}  fully qualified host name not found - please correct"
    exit 1
  fi

}

createCAKey() {

  if [ ! -f ${zimbra_ssl_conf} ]; then
    createConf "$subject_alt_names"
  fi

  createCASerial

  echo -n "** Creating CA private key ${zimbra_ca_key}..."
  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)
  openssl req -batch -subj "${SUBJECT}" \
    -config ${zimbra_ssl_conf} \
    -new -newkey rsa:1024 -nodes  \
    -out ${zimbra_ca_csr} \
    -keyout ${zimbra_ca_key} > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat ${tmpfile}
    echo
  else 
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
  
}


createCACert() {

  echo -n "** Creating CA cert ${zimbra_ca_crt}..."

  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)
  openssl x509 -trustout \
    -signkey ${zimbra_ca_key} \
    -days ${validation_days} \
    -CAserial ${zimbra_ca_srl} \
    -req -in ${zimbra_ca_csr} \
    -out ${zimbra_ca_crt} > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat ${tmpfile}
    echo
  else 
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}

createKeystore () {
  type=$1
  if [ x"$type" = "xself" ]; then
    current_crt=${server_crt}
    current_key=${server_key}
  else 
    current_crt=${commercial_crt} 
    current_key=${commercial_key} 
  fi

  if [ ! -f ${current_crt} ]; then
    echo "${ERROR_PREFIX} Certificate $current_crt does not exist."
    usage
  elif [ ! -f ${current_key} ]; then
    echo "${ERROR_PREFIX} Private key ${current_key} does not exist."
    usage
  fi
  
  # clean up the previous settings first 
  if [ -f "${mailboxd_keystore}" ]; then
    ${zimbra_java_home}/bin/keytool -delete -alias ${mailboxd_server} \
      -keystore ${mailboxd_keystore} -storepass ${mailboxd_keystore_password} > /dev/null 2>&1
  fi
  
  #4. Loading keys and certificates via PKCS12 
  #(you need both the private key and the certificate in the keystore.)
  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)

  echo -n "** Creating pkcs12 file ${zimbra_ssl_directory}/${mailboxd_server}.pkcs12..."

  openssl pkcs12 \
    -inkey ${current_key} -in ${current_crt} -name ${mailboxd_server} \
    -export -out ${zimbra_ssl_directory}/${mailboxd_server}.pkcs12 \
    -passout pass:${mailboxd_keystore_password} > ${tmpfile} 2>&1
  if [ $? != 0 ]; then
    echo "failed."
    echo
    echo "${ERROR_PREFIX} failed to create ${mailboxd_server}.pkcs12"
    cat ${tmpfile}
    echo
    exit 1
  else
    echo "done."
  fi

  if [ ! -s "${zimbra_ssl_directory}/${mailboxd_server}.pkcs12" ]; then
    echo "${ERROR_PREFIX} failed to create ${mailboxd_server}.pkcs12"
    exit 1
  fi
  
  echo -n "** Creating keystore file ${mailboxd_keystore}..."
  #5. Load the resulting PKCS12 file into a JSSE keystore
  #${zimbra_home}/bin/zmjava com.zimbra.cert.MyPKCS12Import ${mailboxd_server}.pkcs12 ${mailboxd_keystore} ${mailboxd_keystore_password} ${mailboxd_keystore_password}
  ${zimbra_java_home}/bin/java -classpath ${zimbra_home}/lib/ext/com_zimbra_cert_manager/com_zimbra_cert_manager.jar com.zimbra.cert.MyPKCS12Import ${zimbra_ssl_directory}/${mailboxd_server}.pkcs12 ${mailboxd_keystore} ${mailboxd_keystore_password} ${mailboxd_keystore_password} > ${tmpfile} 2>&1
  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat ${tmpfile}
    echo
  else
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}


updateCACERTS() {
  echo -n "** Importing CA ${zimbra_ca_crt} into CACERTS..."
  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)
  ${zimbra_java_home}/bin/keytool -delete -alias my_ca -keystore ${CACERTS} -storepass ${mailboxd_truststore_password} > /dev/null 2>&1
  ${zimbra_java_home}/bin/keytool -import -noprompt -keystore ${CACERTS} -file ${zimbra_ca_crt} -alias my_ca -storepass ${mailboxd_truststore_password} > ${tmpfile} 2>&1
  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat $tmpfile
    echo
  else
    echo "done."
  fi
  rm -f $tmpfile 2>/dev/null

}

createCA() {

  if [ ! -d "${zimbra_ssl_directory}" ]; then
    initSSLDirs
  fi
  
  if [ ! -f ${zimbra_ssl_conf} ]; then
    createConf "$subject_alt_names"
  fi

  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)
  chown zimbra ${tmpfile}
  if [ ! -f ${zimbra_ca_key} ]; then
    echo -n "** Retrieving CA private key from ldap..."
    su - zimbra -c "zmprov -l -- gacf zimbraCertAuthorityKeySelfSigned | sed  -e 's/^zimbraCertAuthorityKeySelfSigned: //' > ${tmpfile} 2> /dev/null" 2>/dev/null && mv -f ${tmpfile} ${zimbra_ca_key} 2> /dev/null
    if [ $? = 0 -a -s "${zimbra_ca_key}" ]; then
      echo "done."
    else
      echo "failed."
    fi
  fi
  rm -f ${tmpfile} 2> /dev/null

  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)
  chown zimbra ${tmpfile}
  if [ ! -f ${zimbra_ca_crt} ]; then
    echo -n "** Retrieving CA cert from ldap..."
    su - zimbra -c "zmprov -l -- gacf zimbraCertAuthorityCertSelfSigned | sed  -e 's/^zimbraCertAuthorityCertSelfSigned: //' > ${tmpfile} 2> /dev/null" 2> /dev/null && mv -f ${tmpfile} ${zimbra_ca_crt} 2> /dev/null
    if [ $? = 0 -a -s "${zimbra_ca_crt}" ]; then
      echo "done."
    else
      echo "failed."
    fi
  fi
  rm -f ${tmpfile} 2> /dev/null

  # Create key/crt if it didn't exist in LDAP
  if [ ! -s "${zimbra_ca_key}" ]; then
    createCAKey
  fi
  if [ ! -s "${zimbra_ca_crt}" ]; then
    createCACert  
  fi

}

deployCA() {

  updateCACERTS

  if [ x"$ldap_is_master" = "xtrue" ]; then
    echo -n "** Saving CA in ldap..."
    cert=`cat ${zimbra_ca_crt}` 
    key=`cat ${zimbra_ca_key}`
    su - zimbra -c "zmprov -l -- mcf zimbraCertAuthorityCertSelfSigned \"$cert\""
    su - zimbra -c "zmprov -l -- mcf zimbraCertAuthorityKeySelfSigned \"$key\""
    echo "done."
  fi


  echo -n "** Copying CA to ${zimbra_conf_directory}/ca..." 
  mkdir -p ${zimbra_conf_directory}/ca
  cp -f ${zimbra_ca_key} ${zimbra_conf_directory}/ca/ca.key
  cp -f ${zimbra_ca_crt}  ${zimbra_conf_directory}/ca/ca.pem
  chmod 644 ${zimbra_conf_directory}/ca/ca.pem ${zimbra_conf_directory}/ca/ca.key
  echo "done."

  # add hash to ca
  ln -f -s ca.pem ${zimbra_conf_directory}/ca/`openssl x509 -hash -noout -in ${zimbra_conf_directory}/ca/ca.pem`.0
  chmod 644 ${zimbra_conf_directory}/ca/ca.pem ${zimbra_conf_directory}/ca/ca.key
}


deployCert () {

  if [ x"$1" = "x" ]; then
    type=self
  else
    type=$1
    if [ x"$type" != "xself" -a x"$type" != "xcomm" ]; then
      echo "cert type most be one of self or comm"
      usage
    fi
    shift
  fi
  if [ x"$type" = "xself" ]; then
    current_crt=${server_crt}
    current_key=${server_key}
  else 
    current_crt=${commercial_crt} 
    current_key=${commercial_key} 
  fi
  
  if [ "x$1" = "x" ]; then
    DEPLOY="all"
  elif [ "x$1" = "xmta" -o "x$1" = "xproxy" -o "x$1" = "xmailbox" -o "x$1" = "xldap" ]; then
    DEPLOY="$1"
  else
    echo "Can't deploy cert for $1.  Unknown service."
    return
  fi

  if [ $DEPLOY = "all" -o $DEPLOY = "mta" ]; then
    echo -n "** Installing mta certificate and key..."
    cp -f ${current_crt} ${postfix_smtpd_tls_cert_file}
    cp -f ${current_key} ${postfix_smtpd_tls_key_file}
    echo "done."
  fi
   
  if [ $DEPLOY = "all" -o $DEPLOY = "mta" ]; then
    echo -n "** Installing slapd certificate and key..."
    cp -f ${current_crt} ${zimbra_conf_directory}/slapd.crt
    cp -f ${current_key} ${zimbra_conf_directory}/slapd.key
    echo "done."
  fi
      
  if [ $DEPLOY = "all" -o $DEPLOY = "proxy" ]; then
    echo -n "** Installing proxy certificate and key..."
    #cp -f ${current_crt} ${zimbra_conf_directory}/perdition.pem
    #cp -f ${current_key} ${zimbra_conf_directory}/perdition.key
  
    cp -f ${current_crt} ${zimbra_conf_directory}/nginx.crt
    cp -f ${current_key} ${zimbra_conf_directory}/nginx.key
    echo "done."
  fi

  echo -n "** Installing CA to ${zimbra_conf_directory}/ca..." 
  mkdir -p ${zimbra_conf_directory}/ca
  cp -f ${zimbra_ca_key} ${zimbra_conf_directory}/ca/ca.key
  cp -f ${zimbra_ca_crt}  ${zimbra_conf_directory}/ca/ca.pem
  chmod 644 ${zimbra_conf_directory}/ca/ca.pem ${zimbra_conf_directory}/ca/ca.key
  echo "done."
 
 
}



createConf() {

  ALTNAMES=""
  althosts=`echo $* | sed -e "s/,/ /g"` 
  for alt in $althosts; do
    if [ "x$ALTNAMES" = "x" ]; then
      ALTNAMES="subjectAltName = DNS:${zimbra_server_hostname},DNS:${alt}"
    else 
      ALTNAMES="${ALTNAMES},DNS:${alt}"
    fi
  done
  cat ${zimbra_conf_directory}/zmssl.cnf.new | \
    sed -e "s/@@HOSTNAME@@/$zimbra_server_hostname/" \
    -e "s/@@SUBJECT_ALT_NAMES@@/$ALTNAMES/"  > ${zimbra_ssl_conf}
}

createCASerial() {
  SER=`date "+%s"`
  echo "$SER" > ${zimbra_ca_srl}
}

createServerCertReq() {

  type=$1
  if [ x"$type" = "xself" ]; then
    current_crt=${server_crt}
    current_key=${server_key}
  else 
    current_crt=${commercial_crt} 
    current_key=${commercial_key} 
  fi
  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)

  echo -n "** Creating server cert request ${current_csr}..."

  openssl req -new -nodes -out ${current_csr} -keyout ${current_key} \
    -newkey rsa:1024 -config ${zimbra_ssl_conf} \
    -subj "${SUBJECT}" -batch > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat $tmpfile
    echo
  else
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}

createServerCert() {

  createCASerial  

  createConf "$subject_alt_names"

  #why do we need verify the crt here? The cert is not even created yet.
  #We need to allow validation_days to be changed
  if [ -s "${server_crt}" -a "x${IS_NEW_CRT}" != "x-new" ]; then
	$0 verifycrt self ${server_key} ${server_crt} > /dev/null 2>&1
    if [ $? = 0 ]; then
      echo "** ${server_crt} already exists."
      return
    fi
  fi

  # make sure the CA exists
  if [ ! -s "${zimbra_ca_crt}" ]; then
    createCA
  fi

  # make sure the csr req exists
  if [ ! -s "${server_csr}" ]; then
    gencsr
  fi

  tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "Failed to create tmpfile" && exit 1)
  echo -n "** Signing cert request ${server_csr}..."
  if [ -f "${zimbra_ca_directory}/index.txt.attr" ]; then
    rm ${zimbra_ca_directory}/index.txt.attr
  fi
  if [ -s ${zimbra_ca_directory}/index.txt -o ! -e ${zimbra_ca_directory}/index.txt ]; then
    cp -f /dev/null ${zimbra_ca_directory}/index.txt
  fi
	
  #echo "validation days = " + 	${validation_days} 
  openssl ca -out ${server_crt} -notext \
    -config ${zimbra_ssl_conf} \
    -days ${validation_days} \
    -in ${server_csr} -keyfile ${zimbra_ca_key} \
    -extensions v3_req -extfile ${zimbra_ssl_conf} \
    -cert ${zimbra_ca_crt} -batch > ${tmpfile} 2>&1

  #openssl x509 -req -in ${server_csr} \
  #  -CA ${zimbra_ca_crt}  -CAkey ${zimbra_ca_key} \
  #  -days ${validation_days} -CAserial ${zimbra_ca_srl} \
  #  -extensions v3_req -extfile ${zimbra_ssl_conf} \
  #  -out ${server_crt} > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat $tmpfile
    echo
  else
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}


viewstagedcrt() {
  if [ x"${1}" = "x" ]; then
    if [ -f "${zimbra_home}/conf/slapd.crt" ]; then
      current_crt=${zimbra_home}/conf/slapd.crt
    elif [ -f "${zimbra_home}/conf/smtpd.crt" ]; then
      current_crt=${zimbra_home}/conf/smtpd.crt
    else
      usage
    fi
  elif [  x"${1}" != "xself" -a x"${1}" != "xcomm" ]; then
    usage
  else  
    type=$1 
    if [ x"$type" = "xself" ]; then
      current_crt=${server_crt}
    else 
      current_crt=${commercial_crt} 
    fi
  fi

  if [ x"$2" != "x" ]; then
    current_crt=${2}
  fi
 
  if [ ! -f "${current_crt}" ]; then
    echo "$ERROR_PREFIX Certificate file ${current_crt} does not exist."
    usage
  fi 
  openssl x509  -in ${current_crt} -dates -subject -issuer -noout
  getsubjectaltnames ${current_crt} crt
}

getsubjectaltnames() {
  cert=$1
  if [ ! -f "$cert" ]; then
    return
  fi
  case "${2}" in
    "crt") 
      req=x509
      ;;
    "csr")
      req="req"
      ;;
    *)
      return
  esac

  names=`openssl $req -in ${cert} -text | sed -n '/Subject Alternative Name/{n;p;}' | sed 's/^[ \t]*//' | sed 's/DNS://g'`
  echo "SubjectAltName= $names"
}

viewdeployedcrt() {
  if [ "x$1" = "x" ]; then
    VIEW="all"
  elif [ "x$1" = "xall" -o "x$1" = "xmta" -o "x$1" = "xproxy" -o "x$1" = "xmailboxd" -o "x$1" = "xldap" ]; then
    VIEW="$1"
  else
    echo "${ERROR_PREFIX} Can't view cert for $1.  Unknown service."
    return
  fi

  if [ $VIEW = "all" -o $VIEW = "mta" ]; then
    service_crt=/opt/zimbra/conf/smtpd.crt
    echo "::service mta::"
    if [ -f "${service_crt}" ]; then
      openssl x509  -in ${service_crt} -dates -subject -issuer -noout
      getsubjectaltnames $service_crt crt
    else 
      echo "${ERROR_PREFIX} ${service_crt} does not exist"
    fi
  fi

  if [ $VIEW = "all" -o $VIEW = "proxy" ]; then
    service_crt=/opt/zimbra/conf/nginx.crt
    echo "::service proxy::"
    if [ -f "${service_crt}" ]; then
      openssl x509  -in ${service_crt} -dates -subject -issuer -noout
      getsubjectaltnames $service_crt crt
    else 
      echo "${ERROR_PREFIX} ${service_crt} does not exist"
    fi
  fi
  
  if [ $VIEW = "all" -o $VIEW = "mailboxd" ]; then
    service_der=/opt/zimbra/mailboxd/etc/mailboxd.der
    service_crt=/opt/zimbra/mailboxd/etc/mailboxd.pem
    echo "::service mailboxd::"
    tmpfile=`mktemp -t zmcertmgr.XXXXXX 2> /dev/null` || (echo "${ERROR_PREFIX} Failed to create tmpfile" && exit 1)
    ${zimbra_java_home}/bin/keytool -export -file ${service_der} -alias ${mailboxd_server} \
      -keystore ${mailboxd_keystore} -storepass ${mailboxd_keystore_password} > ${tmpfile} 2>&1
    if [ $? != 0 ]; then
      echo "${ERROR_PREFIX} failed to export ${service_crt} from keystore."
      echo
      cat $tmpfile
      echo
    fi
    rm -f $tmpfile 2>/dev/null
    if [ -f "${service_der}" ]; then
      openssl x509  -inform DER -outform PEM -in ${service_der} -out ${service_crt}
      openssl x509  -in ${service_crt} -dates -subject -issuer -noout
      getsubjectaltnames $service_crt crt
    else 
      echo "${ERROR_PREFIX} ${service_crt} does not exist"
    fi
  fi

  if [ $VIEW = "all" -o $VIEW = "ldap" ]; then
    service_crt=/opt/zimbra/conf/slapd.crt
    echo "::service ldap::"
    if [ -f "${service_crt}" ]; then
      openssl x509  -in ${service_crt} -dates -subject -issuer -noout
      getsubjectaltnames $service_crt crt
    else 
      echo "${ERROR_PREFIX} ${service_crt} does not exist"
    fi
  fi
}

showcsr() {
  type=$1
  
  if [ x"${1}" = "x" ] || [  x"${1}" != "xself" -a x"${1}" != "xcomm" ]; then
    usage
  else  
    type=$1 
    if [ x"$type" = "xself" ]; then
      current_csr=${server_csr}
    else 
      current_csr=${commercial_csr} 
    fi
  fi

  if [ x"$2" != "x" ]; then
    current_csr=${2}
  fi
  if [ ! -f "${current_csr}" ]; then
    echo "$ERROR_PREFIX Certificate Request file ${current_csr} does not exist."
    usage
  fi

  openssl req -in ${current_csr} -subject -noout
  getsubjectaltnames ${current_csr} csr
}

gencsr() {
  
  echo "** Generating a server csr for download $*"

  if [ x"$1" = "x" ]; then
    type=self
  else
    type=$1
    if [ x"$type" != "xself" -a x"$type" != "xcomm" ]; then
      echo "$ERROR_PREFIX certificate type most be one of self or comm"
      usage
    fi
    shift
  fi

  if [ x"$1" = "x-new" ]; then
    IS_NEW_CSR=$1 #Allow the scripts to overwrite the existing csr
    shift
  fi

  if [ "x${1}" != "x" ]; then 
    SUBJECT="${1}"
    echo "subj=$SUBJECT"
    shift
  fi

  if [ x"$1" = "x-subjectAltNames" ]; then
    shift
    subject_alt_names=$@
  fi

  if [ x"$type" = "xself" ]; then
    current_csr=${server_csr}
  else 
    current_csr=${commercial_csr} 
  fi

  if [ -f "${current_csr}" ]; then      
    if [ x"${IS_NEW_CSR}" != "x-new" ]; then
      echo "${ERROR_PREFIX} The Certificate Signing Request already existed."
      usage
    fi
    createConf "$subject_alt_names"
  fi
  
  backupSSLDirs 
  initSSLDirs
  createCA
  createServerCertReq $type
  
  if [ x"$type" = "xcomm" ]; then 
    if [ -f "${csr_download_file}" ]; then 
      rm -rf ${csr_download_file}
    fi
    cp -f ${commercial_csr} ${csr_download_file}
    chmod 444 ${csr_download_file}
    chown root ${csr_download_file}
  fi
}

install() {
  #Arg 1 = [self|comm] (Required)
  #Arg 2 = <validation_days> (Optional)
  
  if [ x"${1}" = "x" ] || [  x"${1}" != "xself" -a x"${1}" != "xcomm" ]; then
    usage
  else  
    type=$1 
    shift
    if [ "$type" = "self" ]; then
      if [ ! -s "${server_csr}" ]; then
        gencsr
      fi
      current_crt=${server_crt}
    elif [ "$type" = "comm" ]; then
      if [ ! -f "${crt_download_file}" ]; then
        echo "${ERROR_PREFIX} ${crt_download_file} does not exist."
        usage
      fi
      cp -f ${crt_download_file} ${commercial_crt}
      current_crt=${commercial_crt}
    fi
    
    if [ x"${1}" = "x-new" ]; then
      IS_NEW_CRT=$1 #Allow the scripts to overwrite the existing csr
      shift
    fi

    if [ x"${1}" != "x" ]; then
      validation_days=$1
      shift
    fi

    if [ x"${1}" = "x-allserver" ]; then
      subject_alt_names=`su - zimbra -c "zmprov -l gas | xargs "`
      gencsr self -new 
      shift
    fi
    
    echo "** Installing Certificates from ${current_crt}"
    backupSSLDirs ${zimbra_ssl_directory}
    
    if [ "x$type" = "xself" ]; then
      createServerCert
    fi
  fi
 
  if [ "x${mailboxd_server}" != "x" ]; then 
    createKeystore $type
  fi
  
  deployCert $type

}

verifycrt () {
  if [ x"${1}" = "x" ] || [  x"${1}" != "xself" -a x"${1}" != "xcomm" ]; then
    usage
  else  
    type=$1 
    shift
    key=$1
  	crt=$2
    
    if [ x"${key}" = "x" ] ; then
    	if [ "$type" = "self" ]; then
      		key=${server_key}
    	elif [ "$type" = "comm" ]; then
      		key=${commercial_key}
      	fi
    fi
  
 	if [ x"${crt}" = "x" ] ; then
    	if [ "$type" = "self" ]; then
      		crt=${server_crt}
    	elif [ "$type" = "comm" ]; then
      		crt=${commercial_crt}
      	fi
    fi
  fi  
  
  if [ ! -f $key ]; then
    echo "${ERROR_PREFIX} Can't find private key  ${key}  "
    exit 1
  elif [ ! -f $crt ]; then
    echo "${ERROR_PREFIX} Can't find certificate ${crt} "
    exit 1
  else
    key_md5=`openssl rsa -noout -modulus -in ${key} | openssl md5`
    crt_md5=`openssl x509 -noout -modulus -in ${crt} | openssl md5`
  
    echo "key_md5=${key_md5}"
    echo "crt_md5=${crt_md5}"  
  fi
  
  if [ x"${key_md5}" != "x"  -a  x"${key_md5}" = x"${crt_md5}" ] ; then
    echo "Matched: valid certificate (${crt}) and private key (${key}) matching pair"
  else
    echo "${ERROR_PREFIX} Unmatching certificate (${crt}) and private key (${key}) pair"
    exit 1 
  fi
}

migrate () {
  initSSLDirs
  prev_ssl_directory=${zimbra_home}/ssl/ssl
  echo "** Migrating ssl certs from ${prev_ssl_directory} to ${zimbra_ssl_directory}"
  prev_ca_directory=${prev_ssl_directory}/ca
  prev_cert_directory=${prev_ssl_directory}/server

  prev_ca_crt=${prev_ca_directory}/ca.pem
  prev_ca_key=${prev_ca_directory}/ca.key
  prev_ca_csr=${prev_ca_directory}/ca.csr
  prev_ca_srl=${prev_ca_directory}/ca.srl
  prev_server_key=${prev_cert_directory}/server.key
  prev_server_crt=${prev_cert_directory}/server.crt
  prev_server_csr=${prev_cert_directory}/server.csr
  prev_mailboxd_crt=${prev_cert_directory}/mailboxd.crt
  prev_mailboxd_csr=${prev_cert_directory}/mailboxd.csr

  if [ -f "${prev_ca_crt}" ]; then
    cp -f ${prev_ca_crt} ${zimbra_ca_crt}
  else 
    echo "${prev_ca_crt} not found"
  fi
  if [ -f "${prev_ca_key}" ]; then
    cp -f ${prev_ca_key} ${zimbra_ca_key}
  fi
  if [ -f "${prev_ca_csr}" ]; then
    cp -f ${prev_ca_csr} ${zimbra_ca_csr}
  fi
  if [ -f "${prev_ca_srl}" ]; then
    cp -f ${prev_ca_srl} ${zimbra_ca_srl}
  fi

  if [ -f "${prev_server_key}" ]; then
    cp -f ${prev_server_key} ${server_key}
  fi
  if [ -f "${prev_server_crt}" ]; then
    cp -f ${prev_server_crt} ${server_crt}
  fi
  if [ -f "${prev_server_csr}" ]; then
    cp -f ${prev_server_csr} ${server_csr}
  fi

  if [ -f "${prev_mailboxd_crt}" ]; then
    cp -f ${prev_mailboxd_crt} ${commercial_crt}
  fi
  if [ -f "${prev_mailboxd_csr}" ]; then
    cp -f ${prev_mailboxd_csr} ${commercial_csr}
  fi
  chmod -R 740 ${zimbra_ssl_directory}

}

###Main Execution###

usage () {
  echo "Usage: "
  echo "  $0 viewdeployedcrt [all|ldap|mta|proxy|mailboxd]"
  echo "  $0 viewstagedcrt <self|comm> [certfile]"
  echo "  $0 gencsr  <self|comm> [-new] [subject] [-subjectAltNames \"host1,host2\"]"
  echo "  $0 install <self|comm> [-new] [validation_days]"
  echo "  $0 viewcsr <self|comm> [csr_file]"
  echo "  $0 verifycrt <self|comm> [priv_key] [certfile]"
  echo
  echo "Comments:  "
  echo "1) Default <certfile> is ${server_crt} for server and ${commercial_crt} for commercial "
  echo "2) Default <subject> is \"/C=US/ST=N_A/L=N_A/O=Zimbra Collaboration Suite/CN=${zimbra_server_hostname}\" "
  echo "3) Default <validation_days> is 365. "
  echo "4) install self is to install the certificates using self signed csr is in ${zimbra_self_cert_directory}"
  echo "5) install comm is to install the certificates using commercially signed certificate in ${zimbra_comm_cert_directory} "
  echo "6) default <csr_file> is ${zimbra_csr}"
  echo "7) for verifycrt, by default for self priv_key is ${server_key} and the certfile is ${server_crt},  for comm priv_key is ${commercial_key} and the certfile is ${commercial_crt}"

  echo
  
  exit 1;
}


if [ $# = 0 ]; then
  usage
fi

ACTION=$1
shift

ACTION_ROOT_DIR=${zimbra_ssl_directory}
 
# check for valid usage
if [ x"$ACTION" = "xviewdeployedcrt" ]; then
  viewdeployedcrt $@ 
elif [ x"$ACTION" = "xviewstagedcrt" -o x"$ACTION" = "xviewcrt" ]; then
  viewstagedcrt  $@
elif [ x"$ACTION" = "xviewcsr" ]; then
  showcsr  $@
elif [ x"$ACTION" = "xcreateca" ]; then
  createCA $@
elif [ x"$ACTION" = "xdeployca" ]; then
  deployCA $@
elif [ x"$ACTION" = "xgencsr" ]; then
  gencsr "$@"
elif [ x"$ACTION" = "xinstall" ]; then
  install $@
elif [ x"$ACTION" = "xverifycrt" ]; then
  verifycrt $@
elif [ x"$ACTION" = "xmigrate" ]; then
  migrate $@
else
  usage
fi

exit 0 

