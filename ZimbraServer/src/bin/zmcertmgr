#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite Server.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2007 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 

if [ x`whoami` != "xroot" ]; then
  echo "$0 must be run as user root"
  exit 1
fi

#drop these
#zimbra_key=zimbra.key
#zimbra_crt=zimbra.crt
#zimbra_csr=zimbra.csr

platform=`/opt/zimbra/libexec/get_plat_tag.sh 2> /dev/null` || exit 1
source `dirname $0`/zmshutil || exit 1
zmsetvars \
  zimbra_home \
  zimbra_log_directory \
  zimbra_tmp_directory \
  zimbra_java_home \
  ldap_is_master \
  mailboxd_directory \
  mailboxd_server \
  mailboxd_keystore \
  mailboxd_keystore_password \
  mailboxd_truststore_password \
  postfix_smtpd_tls_cert_file \
  postfix_smtpd_tls_key_file
  
export JAVA_HOME=${zimbra_java_home}

#echo "postfix_smtpd_tls_key_file = $postfix_smtpd_tls_key_file "
#echo "postfix_smtpd_tls_cert_file = $postfix_smtpd_tls_cert_file "
#echo "mailboxd_keystore = $mailboxd_keystore "
#echo "mailboxd_directory = $mailboxd_directory "
zimbra_home=${zimbra_home:=/opt/zimbra}
zimbra_conf_directory=${zimbra_home}/conf
zimbra_ssl_conf=${zimbra_conf_directory}/zmssl.cnf

csr_download_directory=${zimbra_home}/mailboxd/webapps/zimbraAdmin/tmp
csr_download_file=${csr_download_directory}/current.csr

zimbra_ssl_directory=${zimbra_home}/ssl/zimbra
zimbra_ca_directory=${zimbra_ssl_directory}/ca
zimbra_cert_directory=${zimbra_ssl_directory}/server

zimbra_ca_crt=${zimbra_ca_directory}/ca.pem
zimbra_ca_key=${zimbra_ca_directory}/ca.key
zimbra_ca_csr=${zimbra_ca_directory}/ca.csr
zimbra_ca_srl=${zimbra_ca_directory}/ca.srl
server_key=${zimbra_cert_directory}/server.key
server_crt=${zimbra_cert_directory}/server.crt
server_csr=${zimbra_cert_directory}/server.csr
mailboxd_crt=${zimbra_cert_directory}/mailbox.crt
mailboxd_csr=${zimbra_cert_directory}/mailbox.csr
commercial_crt=${zimbra_cert_directory}/commercial.crt

#zimbra_comm_csr_directory=${zimbra_home}/ssl/comm_csr
#zimbra_self_csr_directory=${zimbra_home}/ssl/self_csr

# this avoid "unable to write 'random state' errors from openssl
export RANDFILE=${zimbra_home}/ssl/.rnd

#Default subject with the RDN values
SUBJECT="/C=US/ST=CA/L=San Mateo/O=Zimbra/OU=Zimbra Collaboration Suite/CN=${zimbra_server_hostname}"
validation_days=365

#OUTPUT_PREFIX="##### OUTPUT:"
ERROR_PREFIX="XXXXX ERROR:"

if [ -f "${zimbra_java_home}/lib/security/cacerts" ]; then
  CACERTS=${zimbra_java_home}/lib/security/cacerts
else
  CACERTS=${zimbra_java_home}/jre/lib/security/cacerts
fi

backupSSLDirs() {
  if [ x"${1}" != "x" ]; then
    ACTION_ROOT_DIR=${1}
  fi
  
  if [ -d "${ACTION_ROOT_DIR}" ]; then
    appendix=`date +%Y%m%d%H%M%S`
    echo "** Backup ${ACTION_ROOT_DIR} to ${ACTION_ROOT_DIR}.${appendix} "
    cp -r ${ACTION_ROOT_DIR} ${ACTION_ROOT_DIR}.${appendix}
  fi
}

initSSLDirs() {

  if [ ! -d "${zimbra_ssl_directory}" ]; then
    echo "** Creating directory ${zimbra_ssl_directory}"
    mkdir -p ${zimbra_ssl_directory}
  fi
  chmod -R 740 ${zimbra_ssl_directory}

  if [ ! -f "$RANDFILE" ]; then
    touch $RANDFILE
  fi
  chmod 740 $RANDFILE

  if [ ! -d "${zimbra_ca_directory}" ]; then
    echo "** Creating directory ${zimbra_ca_directory}"
    mkdir -p ${zimbra_ca_directory}
    mkdir -p ${zimbra_ca_directory}/newcerts
    touch ${zimbra_ca_directory}/index.txt
  fi
  chmod -R 740 ${zimbra_ca_directory}

  if [ ! -d "${zimbra_cert_directory}" ]; then
    echo "** Creating directory ${zimbra_cert_directory}"
    mkdir -p ${zimbra_cert_directory}
  fi
  chmod -R 740 ${zimbra_cert_directory}

  # bug this should only happen on store nodes
  if [ ! -d "${csr_download_directory}" ]; then
    echo "** Creating directory ${csr_download_directory}"
    mkdir -p ${csr_download_directory}
  fi
  chmod -R 740 ${csr_download_directory}
    
}


getHostInfo() {

  if [ "x$platform" = "xMACOSX" -o "x$platform" = "xMACOSXx86" ]; then
    HH=`hostname`
    return
  else
    H=`hostname --fqdn`
  fi
  HH=`echo $H | grep '\.'`

  if [ "x$HH" = "x" ]; then
    echo "${ERROR_PREFIX}  fully qualified host name not found - please correct"
    exit 1
  fi

}

createCAKey() {

  createConf
  createCASerial

  echo -n "** Creating CA private key ${zimbra_ca_key}..."
  tmpfile=`mktemp` 
  openssl req -batch -subj "${SUBJECT}" \
    -config ${zimbra_ssl_conf} \
    -new -newkey rsa:1024 -nodes  \
    -out ${zimbra_ca_csr} \
    -keyout ${zimbra_ca_key} > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat ${tmpfile}
    echo
  else 
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
  
}


createCACert() {

  echo -n "** Creating CA cert ${zimbra_ca_crt}..."

  tmpfile=`mktemp` 
  openssl x509 -trustout \
    -signkey ${zimbra_ca_key} \
    -days ${validation_days} \
    -CAserial ${zimbra_ca_srl} \
    -req -in ${zimbra_ca_csr} \
    -out ${zimbra_ca_crt} > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat ${tmpfile}
    echo
  else 
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}

createKeystore () {
  echo -n "** Creating keystore file ${mailboxd_keystore}..."
  
  # clean up the previous settings first 
  if [ -f "${mailboxd_keystore}" ]; then
    ${zimbra_home}/java/bin/keytool -delete -alias ${mailboxd_server} \
      -keystore ${mailboxd_keystore} -storepass ${mailboxd_keystore_password} > /dev/null 2>&1
  fi
  
  #4. Loading keys and certificates via PKCS12 
  #(you need both the private key and the certificate in the keystore.)
  tmpfile=`mktemp`
  openssl pkcs12 \
    -inkey ${server_key} -in ${server_crt} -name ${mailboxd_server} \
    -export -out ${zimbra_ssl_directory}/${mailboxd_server}.pkcs12 \
    -passout pass:${mailboxd_keystore_password} > ${tmpfile} 2>&1
  
  #5. Load the resulting PKCS12 file into a JSSE keystore
  #${zimbra_home}/bin/zmjava com.zimbra.cert.MyPKCS12Import ${mailboxd_server}.pkcs12 ${mailboxd_keystore} ${mailboxd_keystore_password} ${mailboxd_keystore_password}
  ${zimbra_java_home}/bin/java -classpath ${zimbra_home}/lib/ext/zimbra_cert_manager/zimbra_cert_manager.jar com.zimbra.cert.MyPKCS12Import ${zimbra_ssl_directory}/${mailboxd_server}.pkcs12 ${mailboxd_keystore} ${mailboxd_keystore_password} ${mailboxd_keystore_password} > ${tmpfile} 2>&1
  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat ${tmpfile}
    echo
  else
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}


updateCACERTS() {
  echo -n "** Importing CA ${zimbra_ca_crt} into CACERTS..."
  tmpfile=`mktemp`
  ${zimbra_home}/java/bin/keytool -delete -alias my_ca -keystore ${CACERTS} -storepass ${mailboxd_truststore_password} 2> /dev/null
  ${zimbra_home}/java/bin/keytool -import -noprompt -keystore ${CACERTS} -file ${zimbra_ca_crt} -alias my_ca -storepass ${mailboxd_truststore_password} > ${tmpfile} 2>&1
  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat $tmpfile
    echo
  else
    echo "done."
  fi
  rm -f $tmpfile 2>/dev/null

}

createCA() {

  if [ ! -d "${zimbra_ssl_directory}" ]; then
    initSSLDirs
  fi

  tmpfile=`mktemp`
  chown zimbra ${tmpfile}
  if [ ! -f ${zimbra_ca_key} ]; then
    echo -n "** Retrieving CA private key from ldap..."
    su - zimbra -c "zmprov -l -- gacf zimbraCertAuthorityKeySelfSigned | sed  -e 's/^zimbraCertAuthorityKeySelfSigned: //' > ${tmpfile} 2> /dev/null" 2>/dev/null && mv -f ${tmpfile} ${zimbra_ca_key} 2> /dev/null
    if [ $? = 0 -a -s "${zimbra_ca_key}" ]; then
      echo "done."
    else
      echo "failed."
    fi
  fi
  rm -f ${tmpfile} 2> /dev/null

  tmpfile=`mktemp`
  chown zimbra ${tmpfile}
  if [ ! -f ${zimbra_ca_crt} ]; then
    echo -n "** Retrieving CA cert from ldap..."
    su - zimbra -c "zmprov -l -- gacf zimbraCertAuthorityCertSelfSigned | sed  -e 's/^zimbraCertAuthorityCertSelfSigned: //' > ${tmpfile} 2> /dev/null" 2> /dev/null && mv -f ${tmpfile} ${zimbra_ca_crt} 2> /dev/null
    if [ $? = 0 -a -s "${zimbra_ca_crt}" ]; then
      echo "done."
    else
      echo "failed."
    fi
  fi
  rm -f ${tmpfile} 2> /dev/null

  # Create key/crt if it didn't exist in LDAP
  if [ ! -s "${zimbra_ca_key}" ]; then
    createCAKey
  fi
  if [ ! -s "${zimbra_ca_crt}" ]; then
    createCACert  
  fi

}

deployCA() {

  updateCACERTS

  if [ x"$ldap_is_master" = "xtrue" ]; then
    echo -n "** Saving CA in ldap..."
    cert=`cat ${zimbra_ca_crt}` 
    key=`cat ${zimbra_ca_key}`
    su - zimbra -c "zmprov -l -- mcf zimbraCertAuthorityCertSelfSigned \"$cert\""
    su - zimbra -c "zmprov -l -- mcf zimbraCertAuthorityKeySelfSigned \"$key\""
    echo "done."
  fi


  echo -n "** Copying CA to ${zimbra_conf_directory}/ca..." 
  mkdir -p ${zimbra_conf_directory}/ca
  cp -f ${zimbra_ca_key} ${zimbra_conf_directory}/ca/ca.key
  cp -f ${zimbra_ca_crt}  ${zimbra_conf_directory}/ca/ca.pem
  chmod 644 ${zimbra_conf_directory}/ca/ca.pem ${zimbra_conf_directory}/ca/ca.key
  echo "done."

  # add hash to ca
  ln -f -s ca.pem ${zimbra_conf_directory}/ca/`openssl x509 -hash -noout -in ${zimbra_conf_directory}/ca/ca.pem`.0
  chmod 644 ${zimbra_conf_directory}/ca/ca.pem ${zimbra_conf_directory}/ca/ca.key
}


deployCert () {

  if [ "x$1" = "x" ]; then
    DEPLOY="all"
  elif [ "x$1" = "xmta" -o "x$1" = "xproxy" -o "x$1" = "xmailbox" -o "x$1" = "xldap" ]; then
    DEPLOY="$1"
  else
    echo "Can't deploy cert for $1.  Unknown service."
    return
  fi

  if [ $DEPLOY = "all" -o $DEPLOY = "mta" ]; then
    echo -n "** Installing mta certificate and key..."
    cp -f ${server_crt} ${postfix_smtpd_tls_cert_file}
    cp -f ${server_key} ${postfix_smtpd_tls_key_file}
    echo "done."
  fi
   
  if [ $DEPLOY = "all" -o $DEPLOY = "mta" ]; then
    echo -n "** Installing slapd certificate and key..."
    cp -f ${server_crt} ${zimbra_conf_directory}/slapd.crt
    cp -f ${server_key} ${zimbra_conf_directory}/slapd.key
    echo "done."
  fi
      
  if [ $DEPLOY = "all" -o $DEPLOY = "proxy" ]; then
    echo -n "** Installing proxy certificate and key..."
    #cp -f ${server_crt} ${zimbra_conf_directory}/perdition.pem
    #cp -f ${server_key} ${zimbra_conf_directory}/perdition.key
  
    cp -f ${server_crt} ${zimbra_conf_directory}/nginx.crt
    cp -f ${server_key} ${zimbra_conf_directory}/nginx.key
    echo "done."
  fi

  echo -n "** Installing CA to ${zimbra_conf_directory}/ca..." 
  mkdir -p ${zimbra_conf_directory}/ca
  cp -f ${zimbra_ca_key} ${zimbra_conf_directory}/ca/ca.key
  cp -f ${zimbra_ca_crt}  ${zimbra_conf_directory}/ca/ca.pem
  chmod 644 ${zimbra_conf_directory}/ca/ca.pem ${zimbra_conf_directory}/ca/ca.key
  echo "done."
 
 
}



createConf() {
  cat ${zimbra_conf_directory}/zmssl.cnf.new | sed -e "s/@@HOSTNAME@@/$zimbra_server_hostname/"  > ${zimbra_ssl_conf}
}

createCASerial() {
  SER=`date "+%s"`
  echo "$SER" > ${zimbra_ca_srl}
}

createServerCertReq() {

  echo -n "** Creating server cert request ${server_csr}..."
  tmpfile=`mktemp` 

  openssl req -new -nodes -out ${server_csr} -keyout ${server_key} \
    -newkey rsa:1024 -config ${zimbra_ssl_conf} \
    -subj "${SUBJECT}" -batch > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat $tmpfile
    echo
  else
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}

createServerCert() {
  
  createCASerial  

  if [ -s "${server_crt}" ]; then
    $0 verifycrt ${server_key} ${server_crt} > /dev/null 2>&1
    if [ $? = 0 ]; then
      echo "** ${server_crt} already exists."
      return
    fi
  fi

  # make sure the CA exists
  if [ ! -s "${zimbra_ca_crt}" ]; then
    createCA
  fi

  # make sure the csr req exists
  if [ ! -s "${server_csr}" ]; then
    gencsr
  fi

  tmpfile=`mktemp` 
  echo -n "** Signing cert request ${server_csr}..."
  openssl ca -out ${server_crt} -notext \
    -config ${zimbra_ssl_conf} \
    -in ${server_csr} -keyfile ${zimbra_ca_key} \
    -cert ${zimbra_ca_crt} -batch > ${tmpfile} 2>&1

  #openssl x509 -req -in ${server_csr} \
    #-CA ${zimbra_ca_crt}  -CAkey ${zimbra_ca_key} \
    #-days ${validation_days} -CAserial ${zimbra_ca_srl} \
    #-out ${server_crt} > ${tmpfile} 2>&1

  if [ $? != 0 ]; then
    echo "failed."
    echo
    cat $tmpfile
    echo
  else
    echo "done."
  fi
  rm -f ${tmpfile} 2> /dev/null
}


showCertInfo() {
  app=$1
  in_cert=$2
  
  if [ "x${app}" = "x" ]  || [  x"$app" != "xmailbox" -a x"$app" != "xserver" ]; then
    usage
  fi
  
  if [ x"${in_cert}" = "x" ]; then
    if [  x"$app" = "xmailbox" ]; then
      in_cert=${server_crt}
    elif [  x"$app" = "xserver" ]; then
      in_cert=${server_crt}
    else
      usage
    fi
  fi
  openssl x509  -in ${in_cert} -dates -subject -issuer -noout
}

showcsr() {
  in_csr=$1
  if [ x"${in_csr}" = "x" ]; then
    in_csr=${server_csr}
  fi
  openssl req -in ${in_csr} -subject -noout
}

gencsr() {
  
  echo "** Generating a server csr for download"
  
  if [ -f "${server_csr}" ]; then      
    if [ x"${IS_NEW_CSR}" != "x-new" ]; then
      echo "${ERROR_PREFIX} The Certificate Signing Request already existed."
      usage
    fi
    
  fi
  
  backupSSLDirs 
  initSSLDirs
  createCA
  createServerCertReq
   
  cp -f ${server_csr} ${csr_download_file}
}

install() {
  #Arg 1 = [self|comm] (Required)
  #Arg 2 = <validation_days> (Optional)
  
  if [ x"${1}" = "x" ] || [  x"${1}" != "xself" -a x"${1}" != "xcomm" ]; then
    usage
  else  
    if [ x"${2}" != "x" ]; then
      validation_days=$2
    fi

    if [ x"${1}" = "xself" ]; then    
      if [ ! -f "${zimbra_ca_crt}" ]; then
        gencsr
      fi
    fi
    
    if [ x"${1}" = "xcomm" ]; then
      if [ ! -f "${commercial_crt}" ]; then
        echo "${ERROR_PREFIX} ${commercial_crt} does not exist."
        usage
      fi
    fi
    
    echo "** Installing Certificates from ${zimbra_cert_directory}"
    
    backupSSLDirs ${zimbra_ssl_directory}
    rm -f ${csr_download_file}

    
    if [ x"${1}" = "xcomm" ]; then
      cp -f ${commercial_crt} ${mailboxd_crt}
    elif [ x"${1}" = "xself" ]; then
      createServerCert
    fi
  fi
  
  createKeystore
  
  deployCert

}

verifycrt () {
  key=$1
  crt=$2
  
  if [ x"${1}" = "x" ]; then
    key=${server_key} 
  fi
  
  if [ x"${2}" = "x" ]; then
    crt=${commercial_crt}
  fi
  
  if [ ! -f $key ]; then
    echo "${ERROR_PREFIX} Can't find private key  ${key}  "
    exit 1
  elif [ ! -f $crt ]; then
    echo "${ERROR_PREFIX} Can't find certificate ${crt} "
    exit 1
  else
    key_md5=`openssl rsa -noout -modulus -in ${key} | openssl md5`
    crt_md5=`openssl x509 -noout -modulus -in ${crt} | openssl md5`
  
    echo "key_md5=${key_md5}"
    echo "crt_md5=${crt_md5}"  
  fi
  
  if [ x"${key_md5}" != "x"  -a  x"${key_md5}" = x"${crt_md5}" ] ; then
    echo "Matched: valid certificate and private key matching pair"
  else
    echo "${ERROR_PREFIX} Unmatching certificate and private key pair"
    exit 1 
  fi
}

migrate () {
  initSSLDirs
  prev_ssl_directory=${zimbra_home}/ssl/ssl
  echo "** Migrating ssl certs from ${prev_ssl_directory} to ${zimbra_ssl_directory}"
  prev_ca_directory=${prev_ssl_directory}/ca
  prev_cert_directory=${prev_ssl_directory}/server

  prev_ca_crt=${prev_ca_directory}/ca.pem
  prev_ca_key=${prev_ca_directory}/ca.key
  prev_ca_csr=${prev_ca_directory}/ca.csr
  prev_ca_srl=${prev_ca_directory}/ca.srl
  prev_server_key=${prev_cert_directory}/server.key
  prev_server_crt=${prev_cert_directory}/server.crt
  prev_server_csr=${prev_cert_directory}/server.csr
  prev_mailboxd_crt=${prev_cert_directory}/mailboxd.crt
  prev_mailboxd_csr=${prev_cert_directory}/mailboxd.csr

  if [ -f "${prev_ca_crt}" ]; then
    cp -f ${prev_ca_crt} ${zimbra_ca_crt}
  else 
    echo "${prev_ca_crt} not found"
  fi
  if [ -f "${prev_ca_key}" ]; then
    cp -f ${prev_ca_key} ${zimbra_ca_key}
  fi
  if [ -f "${prev_ca_csr}" ]; then
    cp -f ${prev_ca_csr} ${zimbra_ca_csr}
  fi
  if [ -f "${prev_ca_srl}" ]; then
    cp -f ${prev_ca_srl} ${zimbra_ca_srl}
  fi

  if [ -f "${prev_server_key}" ]; then
    cp -f ${prev_server_key} ${server_key}
  fi
  if [ -f "${prev_server_crt}" ]; then
    cp -f ${prev_server_crt} ${server_crt}
  fi
  if [ -f "${prev_server_csr}" ]; then
    cp -f ${prev_server_csr} ${server_csr}
  fi

  if [ -f "${prev_mailboxd_crt}" ]; then
    cp -f ${prev_mailboxd_crt} ${mailboxd_crt}
  fi
  if [ -f "${prev_mailboxd_csr}" ]; then
    cp -f ${prev_mailboxd_csr} ${mailboxd_csr}
  fi
  chown -R 740 ${zimbra_ssl_directory}

}

#Export Private Key from the JKS keystore
#See http://www.zimbra.com/forums/administrators/9832-exporting-private-key-keystore-use-postfix-apache.html#post51656
#Or http://www.anandsekar.com/2006/01/19/exporting-the-private-key-from-a-jks-keystore/
# And the java file is compiled into zimbra_cert_manager.jar as MyExportPrivKey

###Main Execution###

usage () {
  echo "Usage: "
  echo "1) $0 view [mailbox|server] <certfile>"
  echo "2) $0 gencsr  <-new> <subject> "
  echo "3) $0 install [self|comm] <validation_days>"
  echo "4) $0 viewcsr <csr_file>"
  echo "5) $0 verifycrt <priv_key> <certfile>"
  echo
  echo "Comments:  "
  echo "1) Default <certfile> is ${server_crt} for server and  ${mailboxd_crt} for mailbox. "
  echo "2) Default <subject> is \"/C=US/ST=N_A/L=N_A/O=Zimbra Collaboration Suite/CN=${zimbra_server_hostname}\" "
  echo "3) Default <validation_days> is 365. "
  echo "4) install self is to instlal the certificates using self signed csr is in ${zimbra_cert_directory}"
  echo "5) install comm is to install the certificates using commercially signed certificate in ${zimbra_cert_directory} "
  echo "6) default <csr_file> is ${zimbra_csr}"
  echo "7) for verifycrt, by default priv_key is ${server_key} and the certfile is ${commercial_crt} "

  echo
  
  exit 1;
}


if [ $# = 0 ]; then
  usage
fi

ACTION=$1
shift

ACTION_ROOT_DIR=${zimbra_ssl_directory}
 
# check for valid usage
if [ x"$ACTION" = "xview" ]; then
   showCertInfo $@ 
elif [ x"$ACTION" = "xcreateca" ]; then
  createCA $@
elif [ x"$ACTION" = "xdeployca" ]; then
  deployCA $@
elif [ x"$ACTION" = "xgencsr" ]; then
  
  if [ x"$1" = "x-new" ]; then
    IS_NEW_CSR=$1 #Allow the scripts to overwrite the existing csr
    shift
  fi
  
  #Set SUBJECT
  subj=$1
  if [ "x${subj}" != "x" ]; then 
    echo "SUBJECT=${subj}"
    SUBJECT=${subj}
  fi

  gencsr $@
  
elif [ x"$ACTION" = "xinstall" ]; then
  install $@
elif [ x"$ACTION" = "xviewcsr" ]; then
  showcsr  $@
elif [ x"$ACTION" = "xverifycrt" ]; then
  verifycrt $@
elif [ x"$ACTION" = "xmigrate" ]; then
  migrate $@
else
  usage
fi

exit 0 

