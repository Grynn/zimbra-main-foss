#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: ZPL 1.1
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2005 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 

use strict;

# List of authorized commands and their corresponding scripts
#

my %commands = (
	"start" => {
		"args" => {
			"mailbox"	=> {
				"script"	=> [ "/opt/zimbra/bin/tomcat start", 
								"/opt/zimbra/bin/zmconvertdctl start",
								"/opt/zimbra/bin/mysql.server start" ],
				"user"		=> "zimbra",
			},
			"ldap"	=> {
				"script"	=> [ "/opt/zimbra/bin/ldap start" ],
				"user"		=> "zimbra",
			},
			"mta"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmsaslauthdctl start",
								"/opt/zimbra/bin/postfix start",
								"/opt/zimbra/bin/zmmtaconfigctl start" ],
				"user"		=> "zimbra",
			},
			"antispam"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmamavisdctl start",
								"/opt/zimbra/bin/zmmtaconfigctl start" ],
				"user"		=> "zimbra",
			},
			"antivirus"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmamavisdctl start",
								"/opt/zimbra/bin/zmclamdctl start",
								"/opt/zimbra/bin/zmmtaconfigctl start" ],
				"user"		=> "zimbra",
			},
			"snmp"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmswatchctl start" ],
				"user"		=> "zimbra",
			},
		},
	},
	"stop" => {
		"args" => {
			"mailbox"	=> {
				"script"	=> [ "/opt/zimbra/bin/tomcat stop", 
								"/opt/zimbra/bin/zmconvertdctl stop",
								"/opt/zimbra/bin/mysql.server stop" ],
				"user"		=> "zimbra",
			},
			"ldap"	=> {
				"script"	=> [ "/opt/zimbra/bin/ldap stop" ],
				"user"		=> "zimbra",
			},
			"mta"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmsaslauthdctl stop",
								"/opt/zimbra/bin/postfix stop",
								"/opt/zimbra/bin/zmmtaconfigctl stop" ],
				"user"		=> "zimbra",
			},
			"antispam"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmamavisdctl stop",
								"/opt/zimbra/bin/zmmtaconfigctl stop" ],
				"user"		=> "zimbra",
			},
			"antivirus"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmamavisdctl stop",
								"/opt/zimbra/bin/zmclamdctl stop",
								"/opt/zimbra/bin/zmmtaconfigctl stop" ],
				"user"		=> "zimbra",
			},
			"snmp"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmswatchctl stop" ],
				"user"		=> "zimbra",
			},
		},
	},
	"startup" => {
		"script"	=> [ "/opt/zimbra/bin/zmcontrol startup" ],
		"user"		=> "zimbra",
	},
	"shutdown" => {
		"script"	=> [ "/opt/zimbra/bin/zmcontrol shutdown" ],
		"user"		=> "zimbra",
	},
	"msgtrace" => {
		"script"	=> [ "/opt/zimbra/bin/zmmsgtrace" ],
		"user"		=> "zimbra",
	},
	"postqueue" => {
		"script"	=> [ "/opt/zimbra/postfix/sbin/postqueue" ],
		"user"		=> "zimbra",
	},
);

sub runCommand {
	my $user = shift;
	my $command = shift;
	my $args = shift;

	foreach my $cm (@$command) {
		my $cmdstr = "$cm $args";
		if ($user ne "root") {
			$cmdstr = "su - $user -c \"$cmdstr\"";
		}
		if (open COMMAND, "$cmdstr $args |") {
			print "STARTCMD: $cmdstr $args\n";
			while (<COMMAND>) {
				print $_;
			}
			close COMMAND;
			print "ENDCMD: $cmdstr $args\n";
		} else {
			print "Can't run $cmdstr: $!\n\n";
		}
	}
}

while (<>) {
	chomp;
	my ($host, $command, $args) = split (' ', $_, 3);

	# Ignore the host for now...

	if (defined ($commands{$command}{script})) {
		runCommand ($commands{$command}{user}, $commands{$command}{script}, $args);
		next;
	} else {
		my @a = split (' ', $args);
		my $arg = shift @a;

		if (defined ($commands{$command}{args}{$arg}{script})) {
			runCommand ($commands{$command}{args}{$arg}{user}, 
				$commands{$command}{args}{$arg}{script}, join(' ',@a));
			next;
		} 
	}
	print STDERR "Unknown command $_\n";
}
