#!/bin/sh
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: ZPL 1.1
# 
# The contents of this file are subject to the Zimbra Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2005 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
CONF=/opt/zimbra/conf
B=/opt/zimbra/ssl
BASE=${B}/ssl

JAVA_HOME=/opt/zimbra/java

TOMCAT=/opt/zimbra/tomcat/conf

mkdir -p ${BASE}/ca
mkdir -p ${BASE}/cert
mkdir -p ${BASE}/server

getHostInfo() {

	H=`hostname --fqdn`

	# $H=$H.zimbrasys.com

	HH=`echo $H | grep '\.'`

	if [ "x$HH" = "x" ]; then
		echo "Error - fully qualified host name not found - please correct"
		exit
	fi

}

createConf() {
	cat ${CONF}/zmssl.cnf.in | sed -e "s/@@HOSTNAME@@/$H/" > ${BASE}/zmssl.cnf
}

createKey() {

	echo "** Creating CA private key"
	echo

	openssl req -batch -config ${BASE}/zmssl.cnf -new -newkey \
		rsa:1024 -nodes -out ${BASE}/ca/ca.csr -keyout ${BASE}/ca/ca.key

}

createCert() {

	echo "** Creating CA cert"
	echo

	openssl x509 -trustout -signkey ${BASE}/ca/ca.key -days 365 \
		-req -in ${BASE}/ca/ca.csr -out ${BASE}/ca/ca.pem

}

createSerial() {
	if [ -f ${BASE}/ca/ca.srl ]; then
		SER=`cat ${BASE}/ca/ca.srl`
		SER=`expr $SER + 1`
		 if [ $SER -lt 10 ]; then
		 	SER="0$SER"
		 fi
	else
		SER="02"
	fi
	echo "$SER" > ${BASE}/ca/ca.srl
}

importCA() {
	echo "** Importing CA"
	echo

	# rm -f ${JAVA_HOME}/jre/lib/security/cacerts

	keytool -import -noprompt -keystore \
		${JAVA_HOME}/jre/lib/security/cacerts -file \
		${BASE}/ca/ca.pem -alias my_ca -storepass changeit
}

createKeyStore() {

	echo "** Creating keystore"
	echo

	rm -f ${TOMCAT}/keystore

	keytool -genkey -dname "CN=$H, OU=Zimbra, O=Zimbra, L=NA, S=NA, C=US" \
		-alias tomcat -keyalg RSA -keysize 1024 -keystore ${TOMCAT}/keystore \
		-storetype JKS -storepass zimbra -keypass zimbra

}

createCertReq() {

	echo "** Creating server cert request"
	echo

	keytool -certreq -keyalg RSA -alias tomcat -file \
		${BASE}/server/server.csr -keystore \
		${TOMCAT}/keystore -storepass zimbra

	cp ${BASE}/server/server.csr /tmp/server.csr.$$
	cat /tmp/server.csr.$$ | sed -e \
		's/NEW CERTIFICATE REQUEST/CERTIFICATE REQUEST/' \
		> ${BASE}/server/server.csr

}

signCertReq() {

	echo "** Signing cert request"
	echo

	openssl x509 -CA ${BASE}/ca/ca.pem -CAkey ${BASE}/ca/ca.key -CAserial \
		${BASE}/ca/ca.srl -req -in ${BASE}/server/server.csr -out \
		${BASE}/server/server.crt -days 365

	openssl x509 -req -days 365 -in ${BASE}/server/server.csr \
		-signkey ${BASE}/ca/ca.key -out ${BASE}/server/smtpd.crt

}

getHostInfo

createConf

createKey

createCert

createSerial

importCA

createKeyStore

createCertReq

signCertReq

