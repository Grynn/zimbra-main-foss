#!/bin/bash
#
# ***** BEGIN LICENSE BLOCK *****
# Zimbra Collaboration Suite Server
# Copyright (C) 2005, 2006, 2007, 2008 Zimbra, Inc.
# 
# The contents of this file are subject to the Yahoo! Public License
# Version 1.0 ("License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://www.zimbra.com/license.
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
# ***** END LICENSE BLOCK *****

source `dirname $0`/../bin/zmshutil || exit 1

ID=$(id -u)

if [ $ID -ne 0 ]; then
  echo "Run as root!"
  echo ""
  exit 1
fi

platform=`/opt/zimbra/libexec/get_plat_tag.sh`

zmsetvars \
  zimbra_tmp_directory

if [ ! -d ${zimbra_tmp_directory} ]; then
  mkdir -p ${zimbra_tmp_directory} > /dev/null 2>&1
fi

if [ x"$(uname -s 2> /dev/null)" = "xDarwin" ]; then
  logfile="/var/log/zimbra.log"
  statsfile="/var/log/zimbra-stats.log"
  LOCALHOST=$(hostname)
else
  logfile="-/var/log/zimbra.log"
  statsfile="-/var/log/zimbra-stats.log"
  LOCALHOST=$(hostname --fqdn)
fi
LOGHOST=`su - zimbra -c '/opt/zimbra/bin/zmprov -l gacf | egrep "^zimbraLogHostname"'`

if [ "x$LOGHOST" = "x" ]; then
  TYPE="local"
else
  LOGHOST=`echo $LOGHOST | awk '{print $2}'`
  if [ x$LOGHOST = "x$LOCALHOST" ]; then
    TYPE="local"
  else
    TYPE="remote"
  fi
fi

usage() {
  echo ""
  echo "$0: set up syslog.conf for local or remote logging"
  echo ""
  echo "Usage:"
  echo "  $0"
  echo ""
  exit 1
}

updateSyslogNG() {

  if [ -f "/etc/syslog-ng/syslog-ng.conf.in" ]; then
    syslogconf=/etc/syslog-ng/syslog-ng.conf.in
  elif [ -f "/etc/syslog-ng/syslog-ng.conf" ]; then
    syslogconf=/etc/syslog-ng/syslog-ng.conf
  elif [ -f "/etc/syslog-ng.conf" ]; then
    syslogconf=/etc/syslog-ng.conf
  else 
    echo "Unable to locate syslog-ng.conf"
    exit 1
  fi

  # Make a backup copy
  cp -f ${syslogconf} ${syslogconf}.bak
  if [ $? != 0 ]; then
    echo "Unable to make a backup of ${syslogconf}"
    exit 1
  fi

  # create a safe temp file and make sure we have enough space to fill it
  tmpfile=$(mktemp ${zimbra_tmp_directory}/syslog-ng.conf.XXXXXX) && cp -f ${syslogconf} ${tmpfile}
  if [ $? = 0 -a -s "${tmpfile}" ]; then
    echo -n "Updating $syslogconf..."
  else 
    echo "Unable to create a temp file."
    exit 1
  fi

  grep -v zimbra ${syslogconf} > ${tmpfile}
  echo 'filter f_local0       { facility(local0); }; # zimbra' >> ${tmpfile}
  echo 'filter f_local1       { facility(local1); }; # zimbra' >> ${tmpfile}
  echo 'destination zmail { file("/var/log/zimbra.log" owner("zimbra") ); }; # zimbra ' >> ${tmpfile}
  echo 'destination zmstats { file("/var/log/zimbra-stats.log" owner("zimbra") ); }; # zimbra ' >> ${tmpfile}
  echo 'log { source(src); filter(f_mail); destination(zmail); }; # zimbra' >> ${tmpfile}
  echo 'destination local0 { file("/var/log/zimbra.log" owner("zimbra") ); }; # zimbra' >> ${tmpfile}
  echo 'log { source(src); filter(f_local0); destination(local0); }; # zimbra' >> ${tmpfile}
  echo 'log { source(src); filter(f_local1); destination(zmstats); }; # zimbra' >> ${tmpfile}
  echo 'filter f_auth       { facility(auth); }; # zimbra' >> ${tmpfile}
  echo 'destination zmauth { file("/var/log/zimbra.log" owner("zimbra") ); }; # zimbra' >> ${tmpfile}
  echo 'log { source(src); filter(f_auth); destination(zmauth); }; # zimbra' >> ${tmpfile}

  # remove duplicate logging
  sed -i -e 's:\(^destination mailinfo.*\):#\1:' ${tmpfile}
  sed -i -e 's:\(^log.*f_mailinfo\):#\1:' ${tmpfile}
  sed -i -e 's:\(^destination mailwarn.*\):#\1:' ${tmpfile}
  sed -i -e 's:\(^log.*f_mailwarn\):#\1:' ${tmpfile}
  sed -i -e 's:\(^destination mailerr.*\):#\1:' ${tmpfile}
  sed -i -e 's:\(^log.*f_mailerr\):#\1:' ${tmpfile}
  sed -i -e 's:\(^destination mail { file("/var/log/mail"); };\):#\1:' ${tmpfile}
  sed -i -e 's:\(^log.*filter(f_mail); destination(mail); };\):#\1:' ${tmpfile}
  
  mv -f ${tmpfile} ${syslogconf}
  if [ -f "/etc/logrotate.d/zimbra" ]; then
    sed -i -e 's/syslogd/syslog-ng/' /etc/logrotate.d/zimbra
  fi
  touch /var/log/zimbra.log /var/log/zimbra-stats.log 
  chown zimbra:zimbra /var/log/zimbra.log  /var/log/zimbra-stats.log
  chmod 644 /var/log/zimbra.log /var/log/zimbra-stats.log
  echo "done."
}

updateSyslog() {
  syslogconf=/etc/syslog.conf
  if [ -f "/etc/rsyslog.conf" ]; then
    syslogconf=/etc/rsyslog.conf
  fi

  # create a safe temp file and make sure we have enough space to fill it
  tmpfile=$(mktemp ${zimbra_tmp_directory}/syslog.conf.XXXXXX) && cp -f ${syslogconf} ${tmpfile}
  if [ $? = 0 -a -s "${tmpfile}" ]; then
    echo -n "Updating $syslogconf..."
  else 
    echo "Unable to create a temp file."
    exit 1
  fi

  # make a backup copy
  cp -f ${syslogconf} ${syslogconf}.bak
  if [ $? != 0 ]; then
    echo "Unable to make a backup of $syslogconf"
    exit 1
  fi

  # Remove existing entries that we may have added.
  grep -v "^local0\.\*" ${syslogconf} | grep -v "^local1\.\*" > ${tmpfile}
  sed -i -e '/^auth\.\* /d' ${tmpfile}
  sed -i -e 's/;local0.none//g' ${tmpfile}
  sed -i -e 's/;local1.none//g' ${tmpfile}
  sed -i -e 's/;auth.none//g' ${tmpfile}

  # Don't log local0 and auth twice 
  sed -i -e 's/^*.info/*.info;local0.none;local1.none;auth.none/' ${tmpfile}

  if [ $TYPE = "remote" ]; then
    echo "local0.*                @$LOGHOST" >> ${tmpfile}
    echo "local1.*                @$LOGHOST" >> ${tmpfile}
    echo "auth.*                  @$LOGHOST" >> ${tmpfile}
  fi
  echo "local0.*                $logfile" >> ${tmpfile}
  echo "local1.*                $statsfile" >> ${tmpfile}
  echo "auth.*                  $logfile" >> ${tmpfile}

  touch /var/log/zimbra.log /var/log/zimbra-stats.log 
  chown zimbra:zimbra /var/log/zimbra.log  /var/log/zimbra-stats.log
  chmod 644 /var/log/zimbra.log /var/log/zimbra-stats.log

  # create a safe temp file and make sure we have enough space to fill it
  tmpfile2=$(mktemp ${zimbra_tmp_directory}/syslog.conf.XXXXXX) && cp -f ${syslogconf} ${tmpfile2}
  if [ $? = 0 -a -s "${tmpfile2}" ]; then
    echo -n "."
  else 
    echo "Unable to create a temp file."
    exit 1
  fi
  egrep -v "^mail.*($LOGHOST|zimbra)" ${tmpfile} > ${tmpfile2}
  if [ $TYPE = "remote" ]; then
    echo "mail.*                @$LOGHOST" >> ${tmpfile2}
  fi
  echo "mail.*                $logfile" >> ${tmpfile2}
  cp -f ${tmpfile2} ${syslogconf}
  echo "done."
}

if [ -f "/etc/syslog-ng/syslog-ng.conf" \
    -o -f "/etc/syslog-ng/syslog-ng.conf.in" \
    -o -f "/etc/syslog-ng.conf" ]; then
  updateSyslogNG
fi

if [ -f "/etc/syslog.conf" -o -f "/etc/rsyslog.conf" ]; then
  updateSyslog
fi

if [ "x$platform" = "xopenSUSE_10.2" ]; then
  /sbin/rcsyslog restart > /dev/null 2>&1
  exit 0
fi

if [ x$platform = "xSuSE10" -o "x$platform" = "xSLES10_64" -o "x$platform" = "xSuSEES10" ]; then
  /sbin/SuSEconfig --module syslog-ng
  exit 0
fi

if [ x"$platform" = "xUBUNTU6" -o x"$platform" = "xUBUNTU6_64" \
     -o x"$platform" = "xUBUNTU7" -o x"$platform" = "xUBUNTU7_64" \
     -o x"$platform" = "xUBUNTU8" -o x"$platform" = "xUBUNTU8_64" \
     -o x"$platform" = "xDEBIAN4.0" -o x"$platform" = "xDEBIAN4.0_64" ]; then
  if [ -e "/etc/init.d/sysklogd" ]; then
    /etc/init.d/sysklogd restart > /dev/null 2>&1 
  else 
    echo "Unable to restart syslog.  Please do it manually."
  fi
elif [ x"$platform" = "xF10" -o x"$platform" = "xF10_64" -o x"$platform" = "xF11" -o x"$platform" = "xF11_64" ]; then
  if [ -e "/etc/init.d/rsyslog" ]; then
    /etc/init.d/rsyslog restart> /dev/null 2>&1
  else
    echo "Unable to restart rsyslog.  Please do it manually."
  fi
else 
  killall -HUP syslogd
fi
