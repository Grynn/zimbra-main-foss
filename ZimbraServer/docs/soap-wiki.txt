//
// This set of API can be used to access private Notes, or public Wiki pages.
//
// Private Notes get stored in the mailbox of the requestor.  The access to
// the private Notes will be determined by ACL of the folder the Notes are stored.
// By default Notes are accesible to the account holder only, thus private.
// 
// XXX public Wiki API is being under review, and not supported.

// Public Wiki pages are stored in a central location allocated to ZCS at the
// installation time.  The access to the Wiki pages also follow the ACL on the
// folder the pages are stored.  By default the Wiki pages are available to
// everyone.  Anyone can add a new revision or delete the Wiki page created by
// someone else.
//
// The optional attribute 'type' for each command determines whether the request
// is for Notes or Wiki.  If the type element is not specified, the server will
// default to Wiki.
//

// Create
//
// A Document represents a file.  A file can be created by uploading to FileUploadServlet.
// Or it can refer to an attachment of an existing message.
// The request should contain either <upload> element or <msg> element, but not both.
// When <upload> is used, the document should be first uploaded to FileUploadServlet, and
// then use the upload-id from the FileUploadResponse.
// When <m> is used, the document is retrieved from an existing message in the mailbox,
// identified by the msg-id and part-id.
<SaveDocumentRequest>
  <doc [name="{file-name}"] [ct="{content-type}"] [l="{folder-id}"]>
    [<upload id="{upload-id}"/>]
    [<m id="{msg-id}" part="{part-id}"/>]
  </doc>
</SaveDocumentRequest>

<SaveDocumentResponse>
  <doc id="{item-id}"/>
</SaveDocumentResponse>

//
// A Wiki is a versioned HTML document.
// folder-id argument is valid when the new wiki document is being created,
// otherwise it's ignored, and the subsequent revision is stored in the same folder.
<SaveWikiRequest>
  <w name="{wikiword}" [l="{folder-id}"]> ... contents ... </w>
</SaveWikiRequest>

<SaveWikiResponse>
  <w id="{item-id}"/>
</SaveWikiResponse>

//
// Search
// Documents and Wiki documents can be indexed.  
// Use the existing Search API with "types" set to wiki or document.
//

// Get
// through the rest URL:
// http://server/zimbra/user/[~]{account-name}/?id={item-id}
//
// through the SOAP API:
// the list of wiki words are managed by the server.  

//
// ListWiki
// XXX ListWiki is under the review.  using the search is probably a better long term solution.
// returns list of wiki words for this account.  if folder-id is specified, then the list
// will include only the items in the folder.
// created-date: date the first revision was created.
// modified-date: date the last revision was made.
// last-edited-by: user that made the last revision.
<ListWikiRequest [l="{folder-id}"]/>

<ListWikiResponse>
  [<w name="{word}" ver="{head-version}" cd="{created-date}" md="{modified-date}" cr="{creator}" leb="{last-edited-by}" l="{folder}"/>]+
</ListWikiResponse>

//
// GetWiki
// returns the latest version if version is omitted from the request.
<GetWikiRequest>
  <w name="{word}" [ver="{version}"]/>
</GetWikiRequest>

<GetWikiResponse>
  <w name="{word}" ver="{version}" cr="{creator}" id="{message-id}" s="{size}" d="{created-date}" md="{modified-date}" l="{folder}" [f="{flags}"] [t="{tags}"]>
   ... contents ...
  </w>
</GetWikiResponse>

//
// DeleteWiki
// deletes all the revision of the wiki document by moving to trash folder.
// delete can be performed by anyone who has delete access to the folder the wiki document is stored.
<DeleteWikiRequest [type="wiki|note"]>
  <w name="{word}"/>
</DeleteWikiRequest>

<DeleteWikiResponse/>

//
// DiffWiki
<DiffWikiRequest>
  <w name="{word}" v1="{version}" v2="{version}"/>
</DiffWikiRequest>

<DiffWikiResponse>
  <!-- TBD -->
</DiffWikiResponse>
