=================
1. Introduction
=================
Role based delegate admin is about "who" can do "what" on "which" objects.  

The following terms are used in modeling and implementation of the system:

1.1 Grantees - "who" can do
    One or a group of Zimbra admin users that can be granted permissions for scoped 
    operations(i.e. rights) on specified target objects.
        Grantee can be:
            - an account: 
                  the grant is applied to the authenticated account
                  
            - a group(i.e. "distribution list"):
                  the grant is applied to any authenticated account in the group


1.2 Targets - on "which" objects 
    Objects on which operations can be performed and rights can be granted on.
        A target can be:
            - account
            - calendar resource
            - cos
            - distribution list
            - domain
            - global config
            - global grant
            - right (TODO)
            - server
           
    There are three aspects of targets that need to be dealt with:
    (A) target object, on which a rights are granted.
    (B) type of target, for which rights are applicable.
    (C) scope of targets, in which granted rights are effective.
    
    Depending on the context, we are dealing with different aspects of a "target".
    See "2. About Targets" for discussion on targets.
        

1.3 Rights - "what" can or cannot be done
    See "3. Rights" for the full list of rights for each target type.
    
    - positive rights
      For example: allow setPassword
                   allow createAccount
    
    - negative rights
      Rights specifically denied to a grantee.
      For example: deny setPassword
                   deny createAccount
                 
      Purpose of negative rights is to partially negate rights granted to a wider scope of grantees or 
      granted on a wider scope of targets.
      
      Use cases:
          - negate a subset of grantees:
              . all members of group-admins, except for admin-1 and admin-2, can create accounts in domain company.com.
                (admin-1 and admin-2 are in group group-admins)
              . no one in group-newbies can create accounts in domain company.com, except for admin-3 and admin-4.
                (admin-3 and admin-4 are in group group-newbies)
            
          - negate a subset of targets:
              . admin-2 can change password of all accounts in domain company.com, except for ceo@company.com and cfo@company.com.
                (ceo@company.com and cfo@company.com are in domain company.com)
              . Password of members in group-bosses cannot be changed by admin-1, except for foo. 
                (foo is in group group-bosses)                           
    

    
1.4 Grant
    The assertion "who can/cannot do what on which objects" is called a "grant".    

    For example:
        grantee                         right                target
        ---------------------------------------------------------------------------
        members of group-1    can       createAccount  on    domain-2  
        admin-1               cannot    setPassword    on    all users in domain-1


1.5 ACE (Access Control Entry)
    A grant is represented by an ACE.
      - An ACE defines a grant.
      - An ACE is stored in an LDAP attribute on the target entry.
      - An ACE consists of three parts:
            (1) Zimbra ID of the grantee  (e.g. 6ecd16b8-5ced-4aa0-8f95-bdc331d8c22a)
            (2) Type of the grantee       (e.g. usr)
            (3) Allowed or denied right   (e.g. -createAccount)
          
       See "4. Storage - LDAP" for storage and format of ACE.

     
1.6 ACL (Access Control List)
      A list of ACEs, stored in a LDAP attribute on target entries.  The attribute is multi-valued, 
      each value represents an ACE, the collection of all the values represents the ACL for the target.

            
==================
2. About Targets
==================
Depending on the context, there are three aspects of targets that need to be dealt with:

(A) target object, on which a rights are granted.
        As described in 1.5, ACEs are defined on target entries.  
        For example, the domain entry "company.com" is a target object.

(B) type of target, for which rights are applicable.
        Each right can only be applied on the type or types of objects that makes sense.
        For example:
            - the setPassword right is only applicable to account and calendar resource object types.  
            - the createAccount and modifyDomain rights are only applicable to domain objects.
            - the addDistributionListMember right is applicable to distribution list objects.

(C) scope of targets, in which granted rights are effective.
        Do not mix up this with (A) or (B).
        
        Some targets can "contain" 
        Take the setPassword right for example.  While it is a right that is only applicable to accounts 
        and calendar resource, the setPassword right can be granted on a domain object.  The notion of granting 
        an account/CR right on a domain specifies that the right is effective on all accounts/CRs in the domain.
        
        Following is the complete description on target scopes.  If the grant is on a:
        - account           : the account itself
        
        - calendar resource : the calendar resource itself
        
        - cos               : the cos itself
        
        - distribution list : if the right is applicable to:
                              - distribution lists: 
                                    the distribution list and all distribution lists under this distribution list.
                              - accounts and calendar resources: 
                                    all accounts and calendar resources that are direct/indirect members of this  
                                    distribution list
                              
        - domain            : if the right is applicable to: 
                              - domains:
                                    the domain itself (note, not any sub-domains under this domain)
                              - distribution lists: 
                                    all distributions lists in this domain     
                              - accounts and calendar resources: 
                                    all accounts and calendar resources in this domain
                                    
         
        - global config     : the global config itself
        
        - global grant      : the global grant target 
        
        - right             : the right definition itself

        - server            : the server itself
        

===========
3. Rights
===========

3.1 System-Defined Rights

3.1.1 High Level Rights - Rights for Functional Operations on Applicable Target Types. 

      There are two types of such rights:
      
      (A) Non-configure*** Rights
          - Usually associated with a corresponding SOAP command.
      
          - Independent of other rights on the same target.  
            For example:
                - if grantee G is allowed the setPassword, renameAccount, restoreAccount rights on 
                  account A, we do not check if G is allowed/denied the modifyAccount right on A when 
                  set password/rename account/restore account are executed.
                - if grantee G is allowed the backupAccount, viewEmail, getMailboxDump rights on 
                  domain D, we do not check if G is allowed/denied the getAccount right on A 
                  when backup account/view email/get mailbox dump are executed.
            
          - Some Operations Require Rights on Multiple Targets
            If a right involves accessing multiple targets, the grantee needs to have adequate 
            rights on all pertinent targets. 
            For example:
                - to create alias alias-1@domain-2.com for account account-1@domain-1.com, the grantee must 
                  have rights to: 
                      - addAccountAlias on account-1 (this allows adding an alias for account-1) 
                        AND 
                      - createAlias in domain-2.com (this allows creating an alias entry in domain domain-2.com)
                - Likewise to remove the alias from the account, the grantee must have rights to: 
                      - removeAccountAlias of account-1@domain-1.com
                        AND 
                      - deleteAlias in domain-2.com.
                      
      
      (B) configure*** Rights
          - Can only modify a certain subset of attributes of an entry.
            For example:
                configureQuota right can modify attributes: 
                    zimbraMailQuota
                    zimbraQuotaWarnPercent
                    zimbraQuotaWarnInterval
                    zimbraQuotaWarnMessage
          
          - Checked in SOAP get{object}/modify{object} handlers.  As follows:
    
            Definition of rights:
            (1) allow get{object}     : can read all attributes on the entry
            (2) allow modify{object}  : can *read and write* *all* attributes on the entry     (note: allow read is implied)
            (3) allow configure***    : can *read and write* *certain* attributes on the entry (note: allow read is implied)
            (4) deny get{object}      : cannot read any attributes on the entry
            (5) deny modify{object}   : cannot write any attributes on the entry               (note: does not deny read, just doesn't have a say on read)
            (6) deny configure***     : cannot write certain attributes on the entry           (note: does not deny read, just doesn't have a say on read)
    
            The above can be short-handed in this table:
            (Table-1)
                                                  allow    allow    deny    deny 
                                                  read     write    read    write
                                                  (A)      (B)      (C)     (D)
            -----------------------------------------------------------------------
            (1) allow get{object}                 all
            (2) allow modify{object}              all      all
            (3) allow setXXX and configureXXX     certain  certain
            (4) deny get{object}                                    any
            (5) deny modify{object}                                         any
            (6) deny setXXX and configureXXX                                certain
    
    
            For each attribute, the read/write permission is determined as follows:
            (Table-2)
                  
                 allow     deny     result
            --------------------------------  
            (W)                      deny
            (X)    X                 allow
            (Y)             X        deny
            (Z)    X        X        deny
             
             
            e.g. 
            1. Q: target allows modifyAccount right to the current admin, but does not have an ACE entry for configureQuota right 
                  - can the current admin modify zimbraMailQuota of the target?
               A: Yes.  Because (2):(B)="allow write all" => result in (X)
            
            
            2. Q: target allows modifyAccount right to the current admin, but has an entry for "deny configureQuota" 
                  - can the current admin modify zimbraMailQuota of the target?
               A: No.  Because (2):(B)="allow write all" and (6):(D)="deny write certain" => result in (Z)
            
            3. Q: target has ACE entry "deny getAccount" and an ACE entry "allow configureQuota" for the current admin 
                  - can the current admin see the value of zimbraMailQuota of the target?
               A: No.   Because (4):(C)="deny read all" and (3):(A)="allow read certain" =>  => result in (Z)
                  However, if the question is "can the current admin *modify* the value of zimbraMailQuota of the target?" the answer would be Yes.
                  Because (4):(D)="not specified" and (3):(B)="allow write certain" => result in (X)
 
      
      
      System-defined high level rights are described by target types below in 3.1.1.X.
      The lists are tentative, they can certainly change during the development cycles of the delegate admin
      project, and afterwards as the product evolves.

3.1.1.1 account/calendar resource:
          - getAccount                         : get all account attributes
          - modifyAccount                      : modify all account attributes
          - modifyAccountWithinInheritedLimit  : modify all account attributes within COS limit
          
          - renameAccount                      : rename account
          - deleteAccount                      : delete account
          
          - addAccountAlias                    : add alias to account
          - removeAccountAlias                 : remove alias from account
          
          - getMailboxDump                     : get mailbox dump for legal intercept
          - moveMailbox                        : move mailbox from one server to another
          - reindexMailbox                     : reindex mailbox
          - viewEmail                          : view the account's email
          
          - backupAccount                      : backup account
          - restoreAccount                     : restore account from backup
          
          - setPassword                        : set account password
          
          - configureQuota                     : configure quota
          - configureFeature                   : enable/disable features
          - configurePasswordRule              : configure password rules
          - configureLoginPolicy               : configure login/lockout policies
          - configureZimlet                    : configure available zimlets
          - configureTheme                     : configure available themes(skins)


3.1.1.2 calendar resource:
          - getCalenceResource                 : get all calendar resource attributes
          - modifyCalenceResource              : modify all calendar resource attributes
          - modifyCalenceResourceWithinInheritedLimit : modify all calendar resource attributes within COS limit
          
          - renameCalenceResource              : rename calendar resource
          - deleteCalenceResource              : delete calendar resource
          
          - addCalenceResourceAlias            : add alias to calendar resource
          - removeCalenceResourceAlias         : remove alias from calendar resource

          - getMailboxDump                     : get mailbox dump for legal intercept
          - moveMailbox                        : move mailbox from one server to another
          - reindexMailbox                     : reindex mailbox
          - viewEmail                          : view the calendar resource's email
          
          - backupCalenceResource              : backup calendar resource
          - restoreCalenceResource             : restore calendar resource from backup
          
          - setPassword                        : set calendar resource password


3.1.1.3 cos
          - getCos                             : get all cos attributes
          - modifyCos                          : modify all cos attributes
          - modifyCosWithinInheritedLimit      : modify all cos attributes within the current COS limit
          
          - renameCos                          : rename cos
          - deleteCos                          : delete cos
          
          - configureQuota                     : configure quota
          - configureFeature                   : enable/disable features
          - configurePasswordRule              : configure password rules
          - configureLoginPolicy               : configure login/lockout policies
          - configureZimlet                    : configure available zimlets
          - configureTheme                     : configure available themes(skins)

    
3.1.1.4 distribution list
          - All rights for account/calendar resource
                When account/calendar resource rights are specified on a DL entry, the ACEs are 
                interpreted as "apply to all direct or indirect account/calendar resource members 
                of this distribution list".  Also see "(C) scope of targets" under "2. About Targets".
                
          - getDistributionList               : get all distribution list attributes
          - modifyDistributionList            : modify all distribution list attributes
          
          - renameDistributionList            : rename distribution list
          - deleteDistributionList            : delete distribution list
          
          - addDistributionListAlias          : add alias to distribution list
          - removeDistributionListAlias       : remove alias from distribution list
          
          - addDistributionListMember         : add member to distribution list
          - removeDistributionListMember      : remove member from distribution list
    

3.1.1.5 domain
          - All rights for account/calendar resource
                When account/calendar resources rights are specified on a domain entry, the ACEs are 
                interpreted as "apply to all accounts/calendar resources in this domain"
          - All rights for distribution list
                When distribution list rights are specified on a domain entry, the ACEs are interpreted 
                as "apply to all distribution lists in this domain"
          Also see "(C) scope of targets" under "2. About Targets".      
                
          - getDomain                         : get all domain attributes
          - modifyDomain                      : modify all domain attributes
          - modifyDomainWithinInheritedLimit  : modify all domain attributes within global config limit
          
          - renameDomain                      : rename domain
          - deleteDomain                      : delete domain
          
          - createSubDomain                   : create sub domain
          
          - crossMailboxSearch                : run search mail (CMBS) functionality
           
          - createAccount                     : create account in the domain
          - createCalendarResource            : create calendar resource in the domain
          - createDistributionList            : create distribution list in the domain
          - createAlias                       : create alias in this domain
          - deleteAlias                       : delete alias in this domain
          
          - configureExternalGAL              : configure external GAL
          - configureExternaAuth              : configure external auth
    
>>>>> OPEN-ISSUE-1          
          Should we consider domain hierarchy like we do for DLs? 
          i.e. if G is allowed to createAccount in company.com, does G automatically have 
               right to createAccount in support.company.com and sales.company.com?
               
          For now we don't.     
<<<<<


3.1.1.6 global config
          - getGlobalConfig                  : get all global config attributes
          - modifyGlobalConfig               : modify all global config attributes


3.1.1.7 global grant          
          - all right for all other targets
          
          and
          - createCos                        : create cos
          - createTopDomain                  : create top level domain
          - createServer                     : createServer


3.1.1.8 server
          - getServer                        : get all server attributes
          - modifyServer                     : modify all server attributes
          - modifyServerWithinInheritedLimit : modify all server attributes within global config limit
          
          - deleteServer                     : delete server
          
          - deployAdminExtension             : deploy admin extensions
          - editAdminExtension               : edit admin extensions
          - removeAdminExtension             : remove admin extensions
          
          - viewMailQueue                    : view mail queues
          - manageMailQueue                  : take actions on mail queues
          - manageCertificate                : manage certificates
          - deployZimlets                    : deploy zimlets

          - configureMTA                     : configure MTA
          - configurePOP3                    : configure POP3
          - configureIMAP                    : configure IMAP
          - configurePOPProxy                : configure POP3 proxy
          - configureIMAPProxy               : configure IMAP proxy
          - configureVolumes                 : configure volumes
          - configureServiceEnabled          : configure services enabled


3.1.1.9 right 
        (see "3.2.1 Rights on Modifying Combination of Attributes on Various Entry Types" and 
             "3.2.2 Combo Rights - Rights Combining any Rights" and
             "4.2 System and Admin Defined Rights")
             
          - getRight                         : get all right attributes (not used for now)
          - modifyRight                      : modify all right attributes
          
          - renameRight                      : rename right
          - deleteRight                      : delete right
      
       
3.1.2 Attribute Level Rights - Fine-Grained Rights on Individual Attributes
          - getAttr.{attr-name}              : get this attribute
          - modifyAttr.{attr-name}           : get and modify this attribute
          - modifyAttrWithinInheritedLimit.{attr-name} : modify this attribute within inherited limit
               "inherited limit" is:
                   - for account: cos value
                   - for cos: current cos value
                   - for domain: global config value
                   - for server: global config value

          e.g. getAttr.zimbraMailQuota
               modifyAttr.zimbraMailQuota
               modifyAttrWithinInheritedLimit.zimbraMailQuota
               

3.2 User(admin) Defined Rights

    Admin defined rights can span multiple types of targets.  When an admin right spanning multiple 
    target types is granted on a target, only those sub-rights that are applicable to the target 
    type are effective.  Non-applicable sub-rights are ignored.
    
    For example, if an admin right spanning account, server, domain is granted on a domain, then only 
    the sub-rights that are applicable to domain and account are effective; rights for server will be 
    ignored.
    

3.2.1 Rights on Modifying Combination of Attributes on Various Entry Types
          e.g. admin can define a configureFooBar right that allows:
               - modify attr A, B, C on accounts/cos
               - modify attr D, E, F on accounts/cos within inherited limit
               - modify attr G, H on domains
               - modify attr I on servers
               - modify attr J, K on servers within inherited limit
               - modify attr L on global config


3.2.2 Combo Rights - Rights Combining any Rights 
      (we will probably not support this)
      
          e.g. admin can define a right that combines the following rights:
               - modifyAttrWithinInheritedLimit.zimbraMailQuota
               - configureFooBar
               - createAccount
               - backupAccount
               - restoreAccount


=================
4. Storage - LDAP
=================

4.1 Grants

    A grant, which is represented by an ACE, is stored in a LDAP attribute zimbraACE on target entries.  

    zimbraACE:
    ---------- 
        type="astring"
        cardinality="multi" (each value is an Access Control Entry, hence making an ACL)
        optionalIn="account,distributionList,cos,domain,globalConfig,server"  (TODO: cos/domain/server base)
            
            
    zimbraACE Format:
    -----------------   
        {grantee-zimbraId} {grantee-type} [-]{right} 
        
            {grantee-zimbraId} = zimbraId of the grantee
            
            {grantee-type} = usr - grantee is an admin account
                             grp - grantee is a group of admin accounts
                             
            {right} = the right.
                      if a '-' (minus sign) is prepended to the right, it means the right is 
                      specifically denied.              
        
    
         e.g.
            - On a domain target:    
                  75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 usr createAccount
                      ==> account 75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 can create accounts in this domain.
                      
                  55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 grp -setPassword
                      ==> None of any direct or indirect members of DL 55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 can  
                          set password for any accounts in this domain
                          
                  75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 usr -configureGAL
                      ==> account 75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 can configure GAL on this domain 
        
            - On an account target:
                  3b00a6bd-12ca-417d-9312-c5664a8c26b3 grp -setPassword
                      ==> None of any direct or indirect members of DL 3b00a6bd-12ca-417d-9312-c5664a8c26b3 can 
                          set password for this account.
                          
                  c2e3fd70-97ac-43a4-8caa-4bf681251a49 usr configureQuota
                      ==> account c2e3fd70-97ac-43a4-8caa-4bf681251a49 can configure quota of this account.
                       
        
    Indexing:
    ---------    
        zimbraACE is indexed.  This is to discover the "all rights granted to a grantee G" information for admin console.
        
    
    Queries:
    --------
        TODO


4.2 System and Admin Defined Rights
    
    Location in DIT
    ---------------
        All rights will be stored on the config branch (cn=zimbra).
        
        Base DN for all rights: cn=rights,cn=zimbra
        
        Base DN for system defined rights: cn=system,cn=rights,cn=zimbra
        
        Base DN for admin defined rights: cn=custom,cn=rights,cn=zimbra
        
        
    Right Definition
    ----------------
        Right attributes are captured in the object class zimbraRight.  Every right definition entry must belong to 
        object class zimbraRight, which defines the base contents of the entry. 
        
        zimbraRight is derived from the superior object classes "top" and contains the following attributes:
        -----------
       
           cn (from top)          : required, single-value, string 
                                    right name
                             
           description (from top) : optional, single-value, string 
                                    description of the right             
                     
           zimbraId               : required, single-value, immutable, string
                                    right id generated by server 
                                                    
           zimbraRightType        : required, single-value, immutable, enum of 'fixed', 'getAttrs', 'modifyAttrs', 'combo'
                                    - preset      : rights with predefined capabilities
                                    - getAttrs    : rights that can read certain attributes on an attribute type
                                    - modifyAttrs : rights that can read and write certain attributes on an attribute type
                                    - combo'      : rights that contains other rights
                 
           and following optional, single-value, string attributes:
                      
           zimbraRightAccountAttribute:
               attributes allowed on account
               
           zimbraRightCosAttribute:
               attributes allowed on cos
               
           zimbraRightDomainAttribute:
               attributes allowed on domain
               
           zimbraRightServerAttribute:
               attributes allowed on server
               
           zimbraRightGlobalConfigAttribute
               attributes allowed on global config
               
           zimbraRightAccountAttributeWithinInheritedLimit:
               attributes allowed to be modified on account within cos limit
               (applicable only if zimbraRightType is modifyAttrs)
               
           zimbraRightCosAttributeWithinInheritedLimit:
               attributes allowed to be modified on cos within current cos limit
               (applicable only if zimbraRightType is modifyAttrs)
           
           zimbraRightDomainAttributeWithinInheritedLimit:
               attributes allowed to be modified on domain within global config limit
               (applicable only if zimbraRightType is modifyAttrs)
               
           zimbraRightServerAttributeWithinInheritedLimit:
               attributes allowed to be modified on server within global config limit
               (applicable only if zimbraRightType is modifyAttrs)
                             
           zimbraRightRight
               rights contained in this right
               (applicable only if zimbraRightType is combo)   

>>>>> OPEN-ISSUE-2 
           Should we store id instead of name in zimbraACE?
           
           pros: good for rename
           cons: we are saving right name now in the current implementation
           
           We will not store zimbraId in zimbraACE for now.
<<<<<
    
    Right on Right Definition Entries
    ---------------------------------
        1. right definitions are readable to all admin accounts.  That is, the 
           getRight right is never checked.  We can consider checking it if necessary.
           
        2. right definitions are not scoped.  They are like cos's and servers, are global 
           entries that can be shared across domains.   
        
        3. rename, delete, modify of right definition entries are subject to zimbraACE 
           granted on each right definition entry.   When a right definition entry is 
           created, system automatically grants 3 rights: renameRight, deleteRight, modifyRight, 
           to the account creating the right.
          
    
4.3 Changes for Cos/Domain/Server Base Entries
    1. Need a "base DN" entry for Domains
       In the LDAP DIT, currently cos's and servers are created under the "cos base" DN(cn=cos,cn-zimbra) 
       and "server base" DN(cn=servers,cn=zimbra).  But domains are created under the LDAP root (DN = ""),
       there is no "domain base".
       For the sole purpose of (1) granting the createTopDomain right, and (2) granting rights on 
       all domains, we will create a "domain base DN" entry in LDAP: cn=domains,cn=zimbra.   Note, domain 
       entries will still be created under LDAP root, like how it is done currently.  The domain base entry 
       is just for granting rights.
       
    2. Need zimbraACE on cos/server/domain Base Entries
           

    
===================
5. Granting Rules
===================

5.1 The Most Specific Grant Takes Precedence
    A) Target Scope
       
       most specific                                                 least specific 
       --------------------------------------------------------------------------
       account  ->  group hierarchy  ->  domain(of the account)  ->  global grant
       cos                                                           global grant
       server                                                        global grant
       
       Note, there is no "domain hierarchy" in the initial release.
       Each domain is treated equally as far as target scope is concerned.
       
       e.g. 
       1. For this hierarchy:
              domain  domain.com
              domain  sub.domain.com
              group   g1@domain.com
              group   g2@domain.com (a member of group g1@domain.com)
              account user1@domain.com (a member of group g2@domain.com)
              account user2@sub.domain.com (a member of group g1@domain.com)
       
          if a right R is:
              (a) allow admin A on domain.com
              (b) deny  admin A on sub.domain.com
              (c) allow admin A on group g1@domain.com
              (d) deny  admin A on group g2@domain.com
                 
          then:
              - admin A is denied right R on user1@domain.com, because the most specific grant,
                which is (d), denies it.
                
              - admin A is allowed right R on user@@sub.domain.com, because the most specific 
                grant, which is (c), allows it.
                
          Note, in (a), (b), (c), (d), admin A is not necessarily the grantee of each grant, 
          it can be a member of the group to which the right is granted.  (see B) below) 
              
    
    
    B) Grantee Scope
    
       most specific                                 least specific 
       ------------------------------------------------------------
       account                                       group hierarchy
       
       e.g.
       1. For this hierarchy:
              group g1@domain.com
              account user1@domain.com (a member of group g1@domain.com)
              group admin-group@domain.com
              admin account admin1@domain.com (a member of group admin-group@domain.com)
              admin account admin2@domain.com (a member of group admin-group@domain.com)
          
          and the grants are:
              (a) on account entry user1@domain.com
                    {id of admin-group@domain.com} grp -rightR
                    i.e. deny any direct or indirect member of group admin-group@domain.com 
                         rightR on user1@domain.com.
                         
              (b) on account entry user1@domain.com
                    {id of admin2@domain.com} usr rightR
                    i.e. allow admin admin2@domain.com for rightR on user1@domain.com          
                
              (c) on group entry g1@domain.com
                    {id of admin1@domain.com} usr rightR
                    i.e. allow admin admin1@domain.com for rightR on any direct or indirect 
                         members of g1@domain.com
                     
          then:
              - admin1@domain.com is denied for rightR on user1@domain.com
                because grant (a) denies it.  Even if admin1@domain.com is allowed by grant (c), 
                but it is on the group level in the target scope, so grant (a) takes precedence 
                over grant (c).
                
              - admin2@domain.com is allowed for rightR on user1@domain.com
                because grant (b) allows it.  Even if grant (a) denies it, but it on the group 
                level in the grantee scope, so grant (b) takes precedence over grant (a).
       

5.2 Negative Grants Takes Precedence Over Positive Grants
    If grants are all equal in both target and grantee scope, and they conflict with each other, 
    then the negative grant takes precedence.
    
    e.g. 
    1. For this hierarchy:
           group admin-group1@domain.com
           group admin-group2@domain.com
           admin account admin1@domain.com (a member in both admin-group1@domain.com and admin-group2@domain.com)
           account user1@domain.com
           
       and the grants are:
           (a) on account entry user1@domain.com
                 {id of admin-group1@domain.com} grp -rightR
            
           (b) on account entry user1@domain.com
                 {id of admin-group1@domain.com} grp rightR  
                 
       then:
           - admin admin1@domain.com is denied for rightR on user1@domain.com, because of grant (a), which is 
             a negative grant that takes precedence over the positive grant (b) on equally scoped target/grantee.
             
    2. For this hierarchy:
           group g1@domain.com
           group g2@domain.com
           account user1@domain.com (a member in both group g1@domain.com and group g2@domain.com)
           admin account admin1@domain.com
           
       and the grants are:
           (a) on group entry g1@domain.com
                 {id-of-admin1@domain.com} usr -rightR 
                 
           (b) on group entry g2@domain.com
                 {id-of-admin1@domain.com} usr rightR 
                 
       then:
           admin admin1@domain.com is denied for rightR on user1@domain.com, because of grant (a), which is 
           a negative grant that takes precedence over the positive grant (b) on equally scoped target/grantee.                       
    

5.3 Conflict Grants on the Same Target, to the Same Grantee, on the Same Right, the Result is "unexpected"
    5.1 and 5.1 are for scenarios when grants on *different* entries or to *different* grantees, conflict with 
    one another.  
    
    When an existing grant is modified or when a new grant is added, our granting code will ensure that 
    only one grant can exist for the same grantee, same right.
    
    For example, if there is a grant on user1@domain.com
        {id-of_admin@domain.com} usr rightR
    then on user1@domain.com there can't be a     
        {id-of_admin@domain.com} usr -rightR
    
    However, if such grants does get into LDAP for any reason (e.g. by ldapmodify), the result is *unexpected*.
    
    We could've spent more cycles detecting such conflicting settings and honor the negative grant if there 
    is one, but currently the implementation choice is not to do so.  If this becomes a problem, we can change 
    the implementation.  For example, while walking through all grants on a target for rightR, it will stop 
    with a result if a grant specifically granted to the authed account for rightR(allow or deny) is found.
    It will not continue to examine other grants because this is grant is as specific as can be.
    
    However, note, for checking rights for Get{object}/Modify{object} SOAP Calls, we will iterate through all 
    rights, instead of stopping when a most specific grant is found.  This is because we need to expand all 
    rights down to attribute level.  See 5.4 below. 
    
    
5.4 For Get{object}/Modify{object} SOAP Calls
    All positive/negative rights will be expanded down to each attribute level and computed into a net set 
    of attributes allowed for read/write.
    
    Get{object}/Modify{object} will be allowed only if all attributes requested for Get/Modify is allowed 
    to be read/written; otherwise the entire request will be denied(PERM_DENIED exception) and no attribute 
    is returned/updated.

                             

===============
6. Admin SOAP
===============
6.1 GetEffectiveRightsRequest
    Given a target entry, returns all *effective* rights the authenticated admin has.
    
    Effective rights are the right the admin is actually allowed.  It is the net result of 
    applying "5. Granting Rules" on the target and grantee.  Specifically denied rights 
    will *not* be returned.
    
    The result can help the admin console decide on what tabs to display after a target 
    is selected.  For example, after user1 is selected, if the admin does not have right 
    to setPassword, it should probably hide or gray out the setPassword tab.
    
<GetEffectiveRightsRequest>
  <target ttype="{target-type}" zid="{target-zimbraId}">
</GetEffectiveRightsRequest>

    {target-type} = account|resource|cos|dl|domain|globalconfig|right|server|cosbase|domainbase|rightbase|serverbase
    {target-zimbraId} = zimbraId of the target.  
                        ignored if ttype is globalconfig|cosbase|domainbase|rightbase|serverbase
    
<GetEffectiveRightsResponse>    
  <right n="{right-name}"/>+
  <modifyAttrs>
    <a n="..." [l="{inherited-limit}"]>+
  </modifyAttrs>
  <getAttrs>
    <a n="...">+
  </getAttrs>
</GetEffectiveRightsResponse>   

    {right-name} = name of the right
    {inherited-limit} = inherited limit of the value 
                        if present, this admin can only set the attribute within the inherited limit
                        if not present, this admin can set the attribute to any value
    
    <right>       : all effective type 'fixed' rights
    <modifyAttrs> : all attrs that can be modified
    <getAttrs>    : all attrs that can be get
    
    e.g. 
    <GetEffectiveRightsRequest>
      <target ttype="account" zid="bba95d7d-0b13-401f-a343-03a8f5a96f7c">
    </GetEffectiveRightsRequest>
    
    <GetEffectiveRightsRequest>
      <account>
        <right n="setPassword"/>
        <right n="renameAccount"/>
        <right n="deleteAccount"/>
        <modifyAttrs>
          <a n="zimbraMailQuota" [l="62914560"]>
          <a n="..."/>
          ...
        </modifyAttrs>
        <getAttrs>
          <a n="...">
          <a n="..."/>
          ...
        </getAttrs>
      </account>
    </GetEffectiveRightsRequest>

    
6.2 GrantPermissionRequest

    Grant right on a target.  The authed admin can only modify(grant/revoke) a subset of rights/targets granted to itself 
    to other admins.
    
<GrantPermissionRequest>
  <target type={target-type} by="{target-by}">{target-name-or-id}</target>
  <grantee type={grantee-type} by="{grantee-by}">{grantee-name-or-id}</grantee>
  <right [deny="${deny}"]>{right-name}</right>
</GrantPermissionRequest>    

  {target-type} = account | resource | distributionlist | domain | cos | server | config |
                  allcos | allservers | alldomains | allrights

  {target-by}   = name | id
  
  {grantee-type} = usr | grp
  
  {grantee-bt}   = name | id

  {right-name} = right name
  
  {deny} = 1 | 0(default)
  
  
<GrantPermissionResponse/>


6.3 RevokePermissionRequest
    Revoke permission previously granted on a target.  The authed admin can only modify(grant/revoke) a subset of rights/targets 
    granted to itself to other admins.
 
<RevokePermissionRequest>
  <target type={target-type} by="{target-by}">{target-name-or-id}</target>
  <grantee type={grantee-type} by="{grantee-by}">{grantee-name-or-id}</grantee>
  <right [deny="${deny}"]>{right-name}</right>
</RevokePermissionRequest>    

<RevokePermissionResponse/>


6.4 CreateRightRequest
    Create an admin defined right.
    
<CreateRightRequest>
  <name>{right-name}</name>
  <a n="...">...</a>+
</CreateRightRequest>

<CreateRightResponse>
  <right name="{right-name}" id="{right-id}">
    <a n="...">...</a>+
  </right>
</CreateRightResponse>


6.5 DeleteRightRequest
    Delete an admin defined right.
    
<DeleteRightRequest>
  <id>{right-id}</id>
</DeleteRightRequest>

<DeleteRightResponse/>


6.6 RenameRight
    Rename an admin defined right.
    
<RenameRightRequest>
  <id>{right-id}</id>
  <newName>{new-right-name}</newName>
</RenameRightRequest>

<RenameRightResponse>
  <right name="{name}" id="{id}">
    <a n="...">...</a>+
  </right>  
</RenameRightResponse>


6.7 ModifyRightRequest 
    Modify an admin defined right.
    
<ModifyRightRequest>
  <id>{right-id}</id>
  <a n="...">...</a>+
</ModifyRightRequest>

<ModifyRightResponse>
  <right name="{name}" id="{id}">
    <a n="...">...</a>+
  </right>  
</ModifyRightResponse>


===========
7. zmprov
===========
TODO

                
==========================
8. Backwards compatibility
==========================
- For current admins (zimbraIsAdminAccount), allow:
     - All permissions on global config
     - All permissions on all coses
     - All permissions on all domains
     - All permissions on all servers

- Current domain admins (zimbraIsDomainAdminAccount), allow:
     - All permissions on the domain

Customers can then turn off those bits and explicitly grant only the permissions they want to.


===========================
9. References, requirements
===========================
- Kevin Kluge's requirement doc: 
  https://dogfood.zimbra.com/home/kluge/Public/delegateAdmin

- http://bugzilla.zimbra.com/show_bug.cgi?id=11515
  role based delegate administration

- http://bugzilla.zimbra.com/show_bug.cgi?id=18277
  server side infrastructure for role based delegated administration




