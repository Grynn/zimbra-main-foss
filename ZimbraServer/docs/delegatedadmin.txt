=================
1. Introduction
=================
Role based delegate admin is about "who" can do "what" on "which" objects.  

The following terms are used in modeling and implementation of the system:

1.1 Grantees - "who" can do
    One or a group of Zimbra admin users that can be granted permissions for scoped 
    operations(i.e. rights) on specified target objects.
        Grantee can be:
            - an account: 
                  the grant is applied to the authenticated account
                  
            - a group(i.e. "distribution list"):
                  the grant is applied to any authenticated account in the group


1.2 Targets - on "which" objects 
    Objects on which operations can be performed and rights can be granted on.
        A target can be:
            - account
            - calendar resource
            - cos
            - distribution list
            - domain
            - global config
            - server
            - zimlet
           
    There are three aspects of targets that need to be dealt with:
    (A) target object, on which a rights are granted.
    (B) type of target, for which rights are applicable.
    (C) scope of targets, in which granted rights are effective.
    
    Depending on the context, we are dealing with different aspects of a "target".
    See "2. About Targets" for discussion on targets.
        

1.3 Rights - "what" can or cannot be done
    See "3. Rights" for the full list of rights for each target type.
    
    - positive rights
      For example: allow setPassword
                   allow createAccount
    
    - negative rights
      Rights specifically denied to a grantee.
      For example: deny setPassword
                   deny createAccount
                 
      Purpose of negative rights is to partially negate rights granted to a wider scope of grantees or 
      granted on a wider scope of targets.
      
      Use cases:
          - negate a subset of grantees:
              . all members of group-admins, except for admin-1 and admin-2, can create accounts in domain company.com.
                (admin-1 and admin-2 are in group group-admins)
              . no one in group-newbies can create accounts in domain company.com, except for admin-3 and admin-4.
                (admin-3 and admin-4 are in group group-newbies)
            
          - negate a subset of targets:
              . admin-2 can change password of all accounts in domain company.com, except for ceo@company.com and cfo@company.com.
                (ceo@company.com and cfo@company.com are in domain company.com)
              . Password of members in group-bosses cannot be changed by admin-1, except for foo. 
                (foo is in group group-bosses)                           
    

    
1.4 Grant
    The assertion "who can/cannot do what on which objects" is called a "grant".    

    For example:
        grantee                         right                target
        ---------------------------------------------------------------------------
        members of group-1    can       createAccount  on    domain-2  
        admin-1               cannot    setPassword    on    all users in domain-1


1.5 ACE (Access Control Entry)
    A grant is represented by an ACE.
      - An ACE defines a grant.
      - An ACE is stored in an LDAP attribute on the target entry.
      - An ACE consists of three parts:
            (1) Zimbra ID of the grantee  (e.g. 6ecd16b8-5ced-4aa0-8f95-bdc331d8c22a)
            (2) Type of the grantee       (e.g. usr)
            (3) Allowed or denied right   (e.g. -createAccount)
          
       See "4. Storage - LDAP" for storage and format of ACE.

     
1.6 ACL (Access Control List)
      A list of ACEs, stored in a LDAP attribute on target entries.  The attribute is multi-valued, 
      each value represents an ACE, the collection of all the values represents the ACL for the target.

            
==================
2. About Targets
==================
Depending on the context, there are three aspects of targets that need to be dealt with:

(A) target object, on which a rights are granted.
        As described in 1.5, ACEs are defined on target entries.  
        For example, the domain entry "company.com" is a target object.

(B) type of target, for which rights are applicable.
        Each right can only be applied on the type or types of objects that makes sense.
        For example:
            - the setPassword right is only applicable to account and calendar resource object types.  
            - the createAccount and modifyDomain rights are only applicable to domain objects.
            - the addDistributionListMember right is applicable to distribution list objects.

(C) scope of targets, in which granted rights are effective.
        Do not mix up this with (A) or (B).
        
        Some targets can "contain" 
        Take the setPassword right for example.  While it is a right that is only applicable to accounts 
        and calendar resource, the setPassword right can be granted on a domain object.  The notion of granting 
        an account/CR right on a domain specifies that the right is effective on all accounts/CRs in the domain.
        
        Following is the complete description on target scopes.  If the grant is on a:
        - account           : the account itself
        
        - calendar resource : the calendar resource itself
        
        - cos               : the cos itself
        
        - distribution list : if the right is applicable to:
                              - distribution lists: 
                                    the distribution list and all distribution lists under this distribution list.
                              - accounts and calendar resources: 
                                    all accounts and calendar resources that are direct/indirect members of this  
                                    distribution list
                              
        - domain            : if the right is applicable to: 
                              - domains:
                                    the domain itself (note, not any sub-domains under this domain)
                              - distribution lists: 
                                    all distributions lists in this domain     
                              - accounts and calendar resources: 
                                    all accounts and calendar resources in this domain
                                    
        - global config     : the global config itself
        
        - server            : the server itself
        
        - zimlet            : the zimlet itself
        
      

===========
3. Rights
===========

3.1 Types of Rights
    Rights can be categorized into "lower level" and "higher level" rights.
    
    Generally speaking, 
        - "lower level" rights are orthogonal to the functionalities of the target type. 
          There are 4 types of lower level rights: 
              - get{object}    : read all attributes of the entry
              - modify{object} : *read and write* all attributes of the entry
              - rename{object} : rename the entry
              - delete{object} : delete the entry
              
          {object} = Account | CalendarResource | DistributionList | Cos | Domain | Server | Config(only get/modify)
          
          
        - "higher level" rights are for functional operations on applicable target types. 
          They (usually) associated with a corresponding SOAP command.
          e.g. For account targets: reindexMailbox, addAccountAlias
               For domain targets: createAccount, deleteDistributionList
               For server targets: deployAdminExtension, manageCertificate
               
    There is a category "in between" lower level and higher level rights: those that can only modify a certain subset 
    of attributes of an entry.   In SOAP get{object}/modify{object} handlers that handles request to read/write an 
    entry, those rights will be checked in conjunction with the get{object} and modify{object} rights and other such 
    rights granted on the entry.  As follows:
    
    We call those rights "configure***" in the following section as a notion to indicate such rights. 
    The "configure***" can be, for example, configureQuota, configurePasswordRule, ...
    We can use the "configure" prefix as a naming convention for the rights when we implement them, but it's not mandated.
    
    ---------------------------------------------------
    Notes on Reading and Writing Attributes Permissions
    ---------------------------------------------------
    (1) allow get{object}     : can read all attributes on the entry
    (2) allow modify{object}  : can *read and write* *all* attributes on the entry     (note: allow read is implied)
    (3) allow configure***    : can *read and write* *certain* attributes on the entry (note: allow read is implied)
    (4) deny get{object}      : cannot read any attributes on the entry
    (5) deny modify{object}   : cannot write any attributes on the entry               (note: does not deny read, just don't have a say on read)
    (6) deny configure***     : cannot write certain attributes on the entry           (note: does not deny read, just don't have a say on read)
    
    
    Ths above can be short-handed in this table:
    (Table-1)
                                          allow    allow    deny    deny 
                                          read     write    read    write
                                          (A)      (B)      (C)     (D)
    -----------------------------------------------------------------------
    (1) allow get{object}                 all
    (2) allow modify{object}              all      all
    (3) allow setXXX and configureXXX     certain  certain
    (4) deny get{object}                                    any
    (5) deny modify{object}                                         any
    (6) deny setXXX and configureXXX                                certain
    
    
    For each attribute, the read/write permission is determined as follows:
    (Table-2)
          
         allow     deny     result
    --------------------------------  
    (W)                      deny
    (X)    X                 allow
    (Y)             X        deny
    (Z)    X        X        deny
             
             
    e.g. 
    1. Q: target allows modifyAccount right to the current admin, but does not have an ACE entry for configureQuota right 
          - can the current admin modify zimbraMailQuota of the target?
       A: Yes.  Because (2):(B)="allow write all" => result in (X)
    
    
    2. Q: target allows modifyAccount right to the current admin, but has an entry for "deny configureQuota" 
          - can the current admin modify zimbraMailQuota of the target?
       A: No.  Because (2):(B)="allow write all" and (6):(D)="deny write certain" => result in (Z)
    
    3. Q: target has ACE entry "deny getAccount" and an ACE entry "allow configureQuota" for the current admin 
          - can the current admin see the value of zimbraMailQuota of the target?
       A: No.   Because (4):(C)="deny read all" and (3):(A)="allow read certain" =>  => result in (Z)
          However, if the question is "can the current admin *modify* the value of zimbraMailQuota of the target?" the answer would be Yes.
          Because (4):(D)="not specified" and (3):(B)="allow write certain" => result in (X)
 

3.2 Operation that Require Rights on Multiple Targets

    If a right involves accessing multiple targets, the grantee needs to have adequate rights on  
    all pertinent targets. 
    
    For example:
        - to create alias alias-1@domain-2.com for account account-1@domain-1.com, the grantee must 
          have rights to: 
              - addAccountAlias on account-1 (this allows adding an alias for account-1) 
                AND 
              - createAlias in domain-2.com (this allows creating an alias entry in domain domain-2.com)
        - Likewise to remove the alias from the account, the grantee must have rights to: 
              - removeAccountAlias of account-1@domain-1.com
                AND 
              - deleteAlias in domain-2.com.
    

3.3 The Rights

    In 3.3.1 and 3.3.2, rights are tagged with:
      - (L) : lower level right
      - (H) : higher level right
      - (C) : configure*** right

3.3.1 System Defined Rights
     
>>>>> OPEN-ISSUE-1
- How to model ModifyAccount in functional areas?
      e.g.  - enable/disable IMAP/POP and mobile access for all users
            - enable/disable sharing of folders
            - enable/disable zimlets/themes
            - enable/disable email aggregation
            
      Should we define hard Rights for each (e.g. configureImap, configurePop, ...)
      or 
      should we provide a mechanism so rights can be "softly" defined/configured?
      e.g. admin can define a right called "configureImap" by specifying all imap related 
           attributes the Right can modify.  System can also have pre-configured 
           "soft rights" that are available out of the box.
           Need to come up with LDAP structure/storage of soft Rights.  TODO.
<<<<<
         
3.3.1.1 account/calendar resource:
          - (L) getAccount                   : get all account attributes
          - (L) modifyAccount                : modify all account attributes
          - (L) modifyAccountWithinCosLimit  : modify all account attributes within COS limit
          
          - (L) renameAccount                : rename account
          - (L) deleteAccount                : delete account
          
          - (H) addAccountAlias              : add alias to account
          - (H) removeAccountAlias           : remove alias from account
          - (H) viewEmail                    : view the account's email
          - (H) getMailboxDump               : get mailbox dump for legal intercept
          - (H) move mailbox                 : move mailbox from one server to anohter
          - (H) restoreAccount               : restore account from backup
          - (H) reindexMailbox               : reindex mailbox
          
          - (C) setCos                       : assign cos to account
          - (C) setPassword                  : set account password
          - (C) configureQuota               : configure quota
          - (C) configureFeature             : enable/disable features
          - (C) configurePasswordRule        : configure password rules
          - (C) configureLoginPolicy         : configure login/lockout policies
          - (C) configureZimlet              : configure available zimlets
          - (C) configureTheme               : configure available themes(skins)

3.1.1.2 calendar resource:
          Same as those for accounts.
          
3.3.1.3 cos
          - (L) getCos                       : get all cos attributes
          - (L) modifyCos                    : modify all cos attributes
          - (L) modifyCosWithinCosLimit      : modify all cos attributes within the current COS limit
          
          - (L) renameCos                    : rename cos
          - (L) deleteCos                    : delete cos
          
          - (C) configureQuota               : configure quota
          - (C) configureFeature             : enable/disable features
          - (C) configurePasswordRule        : configure password rules
          - (C) configureLoginPolicy         : configure login/lockout policies
          - (C) configureZimlet              : configure available zimlets
          - (C) configureTheme               : configure available themes(skins)

    
3.3.1.4 distribution list
          - All rights for accounts/CRs
                When account/CR rights are specified on a DL entry, the ACEs are interpreted as 
                "apply to all direct or indirect account/CR members of this DL"
                
          - (L) getDistributionList          : get all distribution list attributes
          - (L) modifyDistributionList       : modify all distribution list attributes
          - (L) renameDistributionList       : rename distribution list
          - (L) deleteDistributionList       : delete distribution list
          
          - (H) addDistributionListAlias     : add alias to distribution list
          - (H) removeDistributionListAlias  : remove alias from distribution list
          - (H) addDistributionListMember    : add member to distribution list
          - (H) removeDistributionListMember : remove member from distribution list
    

3.3.1.5 domain
          - All rights for accounts/CRs
                When account/CR rights are specified on a domain entry, the ACEs are interpreted as 
                "apply to all accounts/CRs in this domain"
          - All rights for DLs
                When DL rights are specified on a domain entry, the ACEs are interpreted as 
                "apply to all DLs in this domain"
                
          - (L) getDomain                    : get all domain attributes
          - (L) modifyDomain                 : modify all domain attributes
          
          - (L) renameDomain                 : rename domain
          - (L) deleteDomain                 : delete domain
          
          - (H) createSubDomain              : create sub domain
          - (H) createAccount                : create account in the domain
          - (H) deleteAccount                : delete account in the domain
          - (H) createCalendarResource       : create calendar resource in the domain
          - (H) deleteCalendarResource       : delete calendar resource in the domain
          - (H) createDistributionList       : create distribution list in the domain
          - (H) deleteDistributionList       : delete distribution list in the domain
          - (H) createAlias                  : create alias in this domain
          - (H) deleteAlias                  : delete alias in this domain
          
          - (C) configureExternalGAL         : configure external GAL
          - (C) configureExternaAuth         : configure external auth
    
>>>>> OPEN-ISSUE-2          
          Should we consider domain hierarchy like we do for DLs? 
          i.e. if G is allowed to createAccount in company.com, does G automatically have 
               right to createAccount in support.company.com and sales.company.com?
<<<<<


3.3.1.6 global config
          - (L) getGlobalConfig              : get global config attributes
          - (L) modifyGlobalConfig           : modify global config attributes
          
          - (H) createCos                    : create cos
          - (H) createTopLevelDomain         : create top level domain
          - (H) createServer                 : create server
          - (H) createZimlet                 : create zimlet


>>>>> OPEN-ISSUE-3         
          Should we grant the create{top-level-object} rights on the global config entry?
          or should we have a separate sub-tree (under the config branch cn=zimbra) for 
          granting those rights? 
<<<<<
    
3.3.1.7 server
          - (L) getServer                    : get attributes of this server
          - (L) modifyServer                 : modify attributes of this server
          - (L) deleteServer                 : delete this server
          
          - (H) deployAdminExtension         : deploy admin extensions
          - (H) editAdminExtension           : edit admin extensions
          - (H) removeAdminExtension         : remove admin extensions
          - (H) viewMailQueue                : view mail queues
          - (H) manageMailQueue              : take actions on mail queues
          - (H) manageCertificate            : manage certificates
          - (H) deployZimlets                : deploy zimlets

          - (H) configureMTA                 : configure MTA
          - (H) configurePOP3                : configure POP3
          - (H) configureIMAP                : configure IMAP
          - (H) configurePOPProxy            : configure POP3 proxy
          - (H) configureIMAPProxy           : configure IMAP proxy
          - (H) configureVolumes             : configure volumes
          - (H) configureServiceEnabled      : configure services enabled
          
 

    
3.3.2 User Defined "Combo" or "Macro" Rights 
      To simplify the granting process, admins can define "macro" rights that contain 
      a collection of system defined rights.
    
      For example: 
          PASSWORD_ADMIN = setPassword, setPasswordRule
          FEATURE_ADMIN = setFeature, setZimlet, setTheme
          SUPER_ADMIN = PASSWORD_ADMIN, FEATURE_ADMIN, setQuota

>>>>> OPEN-ISSUE-4
    Should we support "Macro" rights in the server?  If so need to come up with storage.  TODO.                                        
<<<<<


=================
3. Storage - LDAP
=================
ACE is stored in a LDAP attribute on target entries.  

LDAP attribute:
---------------     
    zimbraACE
        type="astring"
        cardinality="multi" (each value is an Access Control Entry, hence making an ACL)
        optionalIn="account,distributionList,cos,domain,globalConfig,server,zimletEntry" 
        
        
zimbraACE Format:
-----------------   
    {grantee-zimbraId} {grantee-type} [-]{right} 
    
        {grantee-zimbraId} = zimbraId of the grantee
        
        {grantee-type} = usr - grantee is an admin account
                         grp - grantee is a group of admin accounts
                         
        {right} = the right.
                  if a '-' (minus sign) is prepended to the right, it means the right is 
                  specifically denied.              
    

     e.g.
        - On a domain target:    
              75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 usr createAccount
                  ==> account 75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 can create accounts in this domain.
                  
              55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 grp -setPassword
                  ==> None of any direct or indirect members of DL 55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 can  
                      set password for all accounts in this domain
                      
              75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 usr -configureGAL
                  ==> account 75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 can configure GAL on this domain 
    
        - On an account target:
              3b00a6bd-12ca-417d-9312-c5664a8c26b3 grp -setPassword
                  ==> None of any direct or indirect members of DL 3b00a6bd-12ca-417d-9312-c5664a8c26b3 can 
                      set password for this account.
                      
              c2e3fd70-97ac-43a4-8caa-4bf681251a49 usr setQuota
                  ==> account c2e3fd70-97ac-43a4-8caa-4bf681251a49 can set quota of this account.
                   
    
Indexing:
---------    
    zimbraACE is indexed.  This is to discover the "all rights granted to a grantee G" information for admin console.
    

Queries:
--------
    TODO
    
    
===================
4. Granting Rules
===================
When more than one ACEs of an ACL on the same right match a grantee and all ACEs 
don't agree on the same allow/deny for the right, the ACE with the most specific 
match takes precedence; and if all matching ACEs are equally related to the grantee, 
the negative ACE takes precedence.

example 1:
    - ACL has:
          . allow user A for right R
          . deny group G for right R
    - user A is in group G
    => user A will be allowed for right R, because user match is more specific than group match.
     
     
example 2:
    - ACL has:
          . allow group G1 for right R
          . deny group G2 for right R
    - group G2 is a member of group G1
    - user A is a member of group G2
    => user A will be denied for right R, because G2 is a more specific match than G1.
     
     
example 3:
    - ACL has:
          . allow group G1 for right R
          . deny group G2 for right R
    - group G1 and G2 are not member of each other
    - user A is in both group G1 and group G2
    => user A will be denied, because negative ACE takes precedence.
    
                
If multiple ACEs conflict for a right for the same grantee, this is a wrong setting, which 
should not happen if all modification to ACLs are done via the supported granting/revoking 
interfaces: SOAP and zmmailbox.   If for any reason such ACL does exist (e.g. 
via ldapmodify, or zmprov ma command(should we make zimberaACE immutable so 
it cannot be modified by zmprov?)), the result is **unexpected**, depending on 
which ACE is encountered first when we iterate through the ACL.  We could've 
spent more cycles detecting such settings and honor the negative ACE if there 
is one, but currently the implementation choice is not to do so.

e.g. - ACL has:
           . allow user A for right R
           . deny user A for right R
     => user A could be allowed or denied for right R, randomly.   
        
                          

===============
5. Admin SOAP
===============
5.1 GetRightsRequest
    Given a target entry, returns all positive and negative rights the authed admin has.
    
    The result can help the admin console decide on what tabs to display after a target 
    is selected.  For example, after user1 is selected, if the admin does not have right 
    to setPassword, it should probably hide or gray out the setPassword tab.
    
<GetRightsRequest>
    <target ttype="{target-type}" zid="{target-zimbraId}">
</GetRightsRequest>

    {target-type} = account|resource|cos|dl|domain|globalconfig|server
    {target-zimbraId} = zimbraId of the target.  ignored if ttype is globalconfig.
    
<GetRightsResponse>    
    <right n="{right-name}" deny="{deny}"/>
</GetRightsResponse>   

    {right-name} = name of the right
    {deny} = 1 | 0(default)
    
    e.g. 
    <GetRightsRequest>
        <target ttype="account" zid="bba95d7d-0b13-401f-a343-03a8f5a96f7c">
    </GetRightsRequest>
    
    <GetRightsRequest>
        <account>
            <right n="setPassword"/>
            <right n="renameAccount"/>
            <right n="deleteAccount"/>
            <right n="configureQuota" deny="1"/>
        </account>
    </GetRightsRequest>

    
5.2 GrantPermissionRequest

    Grant permission on a target.  The authed admin can only modify(grant/revoke) a subset of rights/targets granted to itself 
    to other admins.
    
<GrantPermissionRequest>
  <target tt={target-type} zid={target-zimbra-id}/>
  <ace right="{right}" [deny="{deny}"] gt="{grantee-type}" zid="{grantee-zimbra-id}"]/>+
</GrantPermissionRequest>    

  Multiple grants(ace) can be specified in one GrantPermissionRequest.
   
  {target-type} = account | resource | distributionlist | domain | cos | server | config

  {target-zimbra-id} = zimbraId of the target
  
  {right} = right name
  
  {deny} = 1 | 0(default)
  
  {grantee-type} = usr | grp
  
  {grantee-zimbra-id} = zimbraId of the grantee
  
GrantPermissionResponse returns grants on the target after granting rights in this request.

<GrantPermissionResponse>
  <target tt={target-type} zid={target-zimbra-id}/>
  <ace right="{right}" [deny="{deny}"] gt="{grantee-type}" zid="{grantee-zimbra-id}"]/>+
</GrantPermissionRequest>


5.3 RevokePermissionRequest
    Revoke permission previously granted on a target.  The authed admin can only modify(grant/revoke) a subset of rights/targets 
    granted to itself to other admins.
 
<RevokePermissonRequest>
  <target tt={target-type} zid={target-zimbra-id}/>
  <ace right="{right}" [deny="{deny}"] gt="{grantee-type}" zid="{grantee-zimbra-id}"]/>+
</RevokePermissonRequest>    

  Multiple grants(ace) can be specified in one revokePermissonRequest.
   
  {target-type} = account | resource | distributionlist | domain | cos | server | config

  {target-zimbra-id} = zimbraId of the target
  
  {right} = right name
  
  {deny} = 1 | 0(default)
  
  {grantee-type} = usr | grp
  
  {grantee-zimbra-id} = zimbraId of the grantee
  
RevokePermissionResponse returns grants on the target after revoking rights in this request.

<RevokePermissonResponse>
  <target tt={target-type} zid={target-zimbra-id}/>
  <ace right="{right}" [deny="{deny}"] gt="{grantee-type}" zid="{grantee-zimbra-id}"]/>+
</RevokePermissonRequest>


===========
6. zmprov
===========
TODO

                
==========================
7. Backwards compatibility
==========================
- For current admins (zimbraIsAdminAccount), allow:
     - All permissions on global config
     - All permissions on all coses
     - All permissions on all domains
     - All permissions on all servers

- Current domain admins (zimbraIsDomainAdminAccount), allow:
     - All permissions on the domain

Customers can then turn off those bits and explicitly grant only the permissions they want to.


===========================
8. References, requirements
===========================
- Kevin Kluge's requirement doc: 
  https://dogfood.zimbra.com/home/kluge/Public/delegateAdmin

- http://bugzilla.zimbra.com/show_bug.cgi?id=11515
  role based delegate administration

- http://bugzilla.zimbra.com/show_bug.cgi?id=18277
  server side infrastructure for role based delegated administration




