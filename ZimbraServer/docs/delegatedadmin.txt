=================
1. Introduction
=================
Role based delegate admin is about "who" can do "what" on "which" objects.  

The following terms are used in modeling and implementation of the system:

1.1 Grantees - "who" can do
    One or a group of Zimbra admin users that can be granted permissions for scoped 
    operations(i.e. rights) on specified target objects.
        Grantee can be:
            - an account: 
                  the grant is applied to the authenticated account
                  
            - a group(i.e. "distribution list"):
                  the grant is applied to any authenticated account in the group


1.2 Targets - on "which" objects 
    Objects on which operations can be performed and rights can be granted on.
        A target can be:
            - account
            - calendar resource
            - cos
            - distribution list
            - domain
            - global config
            - global grant
            - server
            - xmppcomponent
            - zimlet
           
    There are three aspects of targets that need to be dealt with:
    (A) target object, on which a rights are granted.
    (B) type of target, for which rights are applicable.
    (C) scope of targets, in which granted rights are effective.
    
    Depending on the context, we are dealing with different aspects of a "target".
    See "2. About Targets" for discussion on targets.
        

1.3 Rights - "what" can or cannot be done
    See "3. Rights" for the full list of rights for each target type.
    
    - positive rights
      For example: allow setPassword
                   allow createAccount
    
    - negative rights
      Rights specifically denied to a grantee.
      For example: deny setPassword
                   deny createAccount
                 
      Purpose of negative rights is to partially negate rights granted to a wider scope of grantees or 
      granted on a wider scope of targets.
      
      Use cases:
          - negate a subset of grantees:
              . all members of group-admins, except for admin-1 and admin-2, can create accounts in domain company.com.
                (admin-1 and admin-2 are in group group-admins)
              . no one in group-newbies can create accounts in domain company.com, except for admin-3 and admin-4.
                (admin-3 and admin-4 are in group group-newbies)
            
          - negate a subset of targets:
              . admin-2 can change password of all accounts in domain company.com, except for ceo@company.com and cfo@company.com.
                (ceo@company.com and cfo@company.com are in domain company.com)
              . Password of members in group-bosses cannot be changed by admin-1, except for foo. 
                (foo is in group group-bosses)                           
    

    
1.4 Grant
    The assertion "who can/cannot do what on which objects" is called a "grant".    

    For example:
        grantee                         right                target
        ---------------------------------------------------------------------------
        members of group-1    can       createAccount  on    domain-2  
        admin-1               cannot    setPassword    on    all users in domain-1


1.5 ACE (Access Control Entry)
    A grant is represented by an ACE.
      - An ACE defines a grant.
      - An ACE is stored in an LDAP attribute on the target entry.
      - An ACE consists of three parts:
            (1) Zimbra ID of the grantee  (e.g. 6ecd16b8-5ced-4aa0-8f95-bdc331d8c22a)
            (2) Type of the grantee       (e.g. usr)
            (3) Allowed or denied right   (e.g. -createAccount)
          
       See "4. Storage - LDAP" for storage and format of ACE.

     
1.6 ACL (Access Control List)
      A list of ACEs, stored in a LDAP attribute on target entries.  The attribute is multi-valued, 
      each value represents an ACE, the collection of all the values represents the ACL for the target.

            
==================
2. About Targets
==================
Depending on the context, there are three aspects of targets that need to be dealt with:

(A) target object, on which a rights are granted.
        As described in 1.5, ACEs are defined on target entries.  
        For example, the domain entry "company.com" is a target object.

(B) type of target, for which rights are applicable.
        Each right can only be applied on the type or types of objects that makes sense.
        For example:
            - the setPassword right is only applicable to account and calendar resource object types.  
            - the createAccount and modifyDomain rights are only applicable to domain objects.
            - the addDistributionListMember right is applicable to distribution list objects.

(C) scope of targets, in which granted rights are effective.
        Do not mix up this with (A) or (B).
        
        Some targets can "contain" 
        Take the setPassword right for example.  While it is a right that is only applicable to accounts 
        and calendar resource, the setPassword right can be granted on a domain object.  The notion of granting 
        an account/CR right on a domain specifies that the right is effective on all accounts/CRs in the domain.
        
        Following is the complete description on target scopes.  If the grant is on a:
        - account           : the account entry
        
        - calendar resource : the calendar resource entry
        
        - cos               : the cos entry
        
        - distribution list : if the right is applicable to:
                              - distribution lists: 
                                    the distribution list and all distribution lists under this distribution list.
                              - accounts and calendar resources: 
                                    all accounts and calendar resources that are direct/indirect members of this  
                                    distribution list
                              
        - domain            : if the right is applicable to: 
                              - domains:
                                    the domain entry (note, not any sub-domains under this domain)
                              - distribution lists: 
                                    all distributions lists in this domain     
                              - accounts and calendar resources: 
                                    all accounts and calendar resources in this domain
                                    
         
        - global config     : the global config entry
        
        - global grant      : the global grant entry 
        
        - right             : the right definition entry  TODO

        - server            : the server entry
        
        - xmppcomponent     : the xmpp component entry
        
        - zimlet            : the zimlet entry
        
        
===========
3. Rights
===========

3.1 How Are Rights Defined

3.1.1 System-Defined Rights

      System rights are defined in ZimbraServer/conf/zimbra-rights.xml file
      
      There are 4 types of rights: preset, setAttrs, getAttrs, combo
        
      Naming convention:
                                                                           checked by SOAP handler
      ----------------------------------------------------------------------------------------------------------------
      create{Object}    - create an object                                 Create{Object}Request
      delete{Object}    - delete an object                                 Delete{Object}Request
      rename{Object}    - rename an object                                 Rename{Object}Request
      list{Object}      - know the existence of an object                  GetAll{Object}Request, SearchDirectory
      get{Object}       - read some attributes on an object                Get{Object}Request
      modify{Object}    - modify and read all attributes on an object      Modify{Object}Request
      view{Object}      - read some attributes on an object                Get{Object}Request
      configure{Object} - modify and read some attributes on an object     Modify{Object}Request
               

3.1.1.1 preset Right
      - Has predefined, fixed implication on targets.
            e.g. createAccount  - create account
                 renameDomain   - rename domain
                 reindexMailbox - reindex mailbox
                 seeServer      - know the existence of a server 
                 
      - Is associated with a fixed target type
                 createAccount  - domain
                 reanmeAccount  - account
                 seeServer      - server 
               
      - Independent of other rights on the same target.  
            e.g. :
                - if grantee G is allowed the setPassword, renameAccount, restoreAccount rights on 
                  account A, we do not check if G is allowed/denied the modifyAccount right on A when 
                  set password/rename account/restore account are executed.
                - if grantee G is allowed the backupAccount, viewEmail, getMailboxDump rights on 
                  domain D, we do not check if G is allowed/denied the getAccount right on A 
                  when backup account/view email/get mailbox dump are executed.
            
      - Some Operations Require Rights on Multiple Targets
            If a right involves accessing multiple targets, the grantee needs to have adequate 
            rights on all pertinent targets. 
            For example:
                - to create alias alias-1@domain-2.com for account account-1@domain-1.com, the grantee must 
                  have rights to: 
                      - addAccountAlias on account-1 (this allows adding an alias for account-1) 
                        AND 
                      - createAlias in domain-2.com (this allows creating an alias entry in domain domain-2.com)
                - Likewise to remove the alias from the account, the grantee must have rights to: 
                      - removeAccountAlias of account-1@domain-1.com
                        AND 
                      - deleteAlias in domain-2.com.      


3.1.1.2 getAttr Right
      - Allows reading attribute values.
            e.g. getAccount - get all attributes of account
                 viewQuota  - get zimbraMailQuota, zimbraQuotaWarnPercent, zimbraQuotaWarnInterval, zimbraQuotaWarnMessage attributes
                 
      - Can be associated with none or multiple target types.           
      

3.1.1.3 setAttr Right
      - Allows modifying and reading attribute values.
            e.g. modifyAccount  = modify all attributes of account
                 configureQuota - get zimbraMailQuota, zimbraQuotaWarnPercent, zimbraQuotaWarnInterval, zimbraQuotaWarnMessage attributes

      - Can be associated with none or multiple target types.   

3.1.1.4 combo Right
      - Right containing other rights.
 
      - Cannot be associated with a target type.  
      

3.1.2 Inline Attribute Rights
      - Specified on the grants
      
      - Format is {op}.{target-type}.{attribute-name}
        {op}: get | set
              get: reading the attribute
              set: reading and writing the attribute
                
        {target-type}:   
                account           |
                resource          |  
                cos               |
                distributionlist  |
                domain            |
                config            |
                server            |
                xmppcomponent     |
                zimlet

        {attribute-name}: attribute name
       
     -  e.g.
          set.account.zimbraMailStatus
          get.domain.zimbraMailStatus
          set.cos.zimbraMailQuota
          
     - In a grant(zimbraACE), it shows up at the spot for {right}
          2246ffcf-1ae2-402a-be91-bc0b3be4c0f0 usr set.account.zimbraMailStatus
                

3.2 Target Types of a Right
    - Target types on which the right is applicable.
      
    - If a right is granted on a target it is not applicable to, the grant is not effective (ignored).
    
    - For preset rights: one
          The target on which the right is applicable.
          
    - For getAttrs/setAttrs rights: one, or multiple
          The right is only applicable on those target types
          
          e.g. 1. can modify zimbraMailStatus on accounts
                  <right name="configureAccountMailStatus" type="setAttrs" targetType="account">
                      <desc>configure account mail status</desc>
                      <attrs>
                          <a n="zimbraMailStatus"/>
                      </attrs>
                  </right>
                  
                  - if granted on a domain, can modify zMS on all accounts in the domain
                  - if granted on a distribution list, can modify zMS on all accounts in the DL
                  - if granted on an account, can modify zMS on the account

          e.g. 2. can modify zimbraMailStatus on domains
                  <right name="configureDomainMailStatus" type="setAttrs" targetType="domain,distributionlist,account">
                      <desc>configure domain mail status</desc>
                      <attrs>
                          <a n="zimbraMailStatus"/>
                      </attrs>
                  </right>
                
                  - if granted on a domain, can modify zMS on the domain, and on all the DLs in the domain, and on all accounts in the domain.
                  - if granted on a distribution list, can modify zMS on the DL, and on all direct/indirect sub-DLs in the DL, 
                    and on all direct/indirect account members in the DL.
                  - if granted on an account, can modify zMS on the account

          e.g. 3. can modify zimbraMailStatus on domains
                  <right name="configureDomainMailStatus" type="setAttrs" targetType="domain">
                      <desc>configure domain mail status</desc>
                      <attrs>
                          <a n="zimbraMailStatus"/>
                      </attrs>
                  </right>
                
                  - if granted on a domain, can modify zMS on the domain (only on the domain entry, not accounts/DLs in the domain)
                  - if granted on a distribution list, no effect
                  - if granted on an account, no effect
       
    - For combo rights: none
          Target types specified for each right the combo right contains apply.


3.3 Granting Rules for getAttr/setAttr System and Inline Rights
      
    - getAttr/setAttr are checked in SOAP get{object}/modify{object} handlers.  As follows:
    
          Definition of rights:
              (1) allow get{object}     : can READ ALL attributes on the entry
              (2) allow view***         : can READ SOME attributes on the entry
              (3) allow modify{object}  : can READ and WRITE ALL attributes on the entry
              (4) allow configure***    : can READ and WRITE SOME attributes on the entry
            
              (5) deny get{object}      : cannot READ any attributes on the entry
              (6) deny view***          : cannot READ SOME attributes on the entry
              (7) deny modify{object}   : cannot WRITE ALL attributes on the entry     (note: does not deny read, just doesn't have a say on read)
              (8) deny configure***     : cannot WRITE SOME attributes on the entry    (note: does not deny read, just doesn't have a say on read)
            
          The above can be short-handed in this table:
              (Table-1)
                                                  allow    allow    deny    deny 
                                                  read     write    read    write
                                                  (A)      (B)      (C)     (D)
              -----------------------------------------------------------------------
              (1) allow get{object}               all
              (2) allow view***                   some
              (3) allow modify{object}            all      all
              (4) allow configure***              some     some
              (5) deny get{object}                                  all
              (6) deny view***                                      some
              (7) deny modify{object}                                       all
              (8) deny configure***                                         some

    
          For each attribute, the read/write permission is determined as follows:
              (Table-2)
                  
                     allow     deny     result
              --------------------------------  
              (W)                       deny
              (X)    *                  allow
              (Y)              *        deny
              (Z)    *         *        deny
                 
             
            e.g. 
            1. Q: target allows modifyAccount right to the current admin, but does not have an ACE entry for configureQuota right 
                  - can the current admin modify zimbraMailQuota of the target?
               A: Yes.  Because (2):(B)="allow write all" => result in (X)
            
            2. Q: target allows modifyAccount right to the current admin, but has an entry for "deny configureQuota" 
                  - can the current admin modify zimbraMailQuota of the target?
               A: No.  Because (2):(B)="allow write all" and (6):(D)="deny write certain" => result in (Z)
            
            3. Q: target has ACE entry "deny getAccount" and an ACE entry "allow configureQuota" for the current admin 
                  - can the current admin see the value of zimbraMailQuota of the target?
               A: No.   Because (4):(C)="deny read all" and (3):(A)="allow read certain" =>  => result in (Z)
                  However, if the question is "can the current admin *modify* the value of zimbraMailQuota of the target?" the answer would be Yes.
                  Because (4):(D)="not specified" and (3):(B)="allow write certain" => result in (X)
      

3.4 Limit(constraints) for Modifying Attributes
    Attributes cannot be modified to a value beyond the constraints for the attribute.   If there is no constraint 
    for an attribute, it can be modified to any value allowed by the attribute syntax.
    
    Constraints are defined in the multi-value attribute zimbraConstraint, each value in zimbraConstraint specifies 
    the constraint for an attribute.  zimbraConstraint can be set on COS and global config entries.
    
    Each zimbraConstraint value is in the format of:
    
        - for neumeric(integer, interval, port) attributes:
              {attr-name}:[{min}],[{max}]
              
              e.g. zimbraPasswordMinLength:4:6 (can be set to value between 4 and 6)
                   zimbraPrefOutOfOfficeCacheDuration:1m:7d (can be set to value between 1m and 7d)
                   zimbraMailQuota:100000000: (min=100000000, no max limit)
                   zimbraSignatureMaxNumEntries::10 (no min limit, max=10)
              
        - for boolean attributes:
              {attr-name}:{comma-separated allowed boolean values}
              
              e.g. zimbraFeatureMailEnabled:TRUE,FALSE (can be set to TRUE or FALSE)
                   zimbraFeatureContactsEnabled:FALSE (can be set to FALSE)
                   
        - for enum attributes:
             {attr-name}:{comma-separated allowed enum values}
             
              e.g. zimbraDomainStatus:active,maintenance,locked,closed
                   zimbraGalMode:zimbra 
    
    For account and cos attributes, constraints are specified in the corresponding COS attribute zimbraConstraint.
    For domain and  server attributes, constraints are specified in the global config attribute zimbraConstraint.
    
    An admin is allowed to set attributes beyond constraints only if he has right to modify the zimbraConstraint 
    attribute that defines the constraint for the object he is modifying.  
    
    For example, if zimbraConstraint on cos C has:
          zimbraPasswordMinLength:6,8
          zimbraSignatureMaxNumEntries:,10
          
    - if the authed admin has right to modify zimbraConstraint on cos C (and has right to modify the corresponding
      account/cos attributes), he can set:
          zimbraPasswordMinLength to any value
          zimbraSignatureMaxNumEntries to any value
          all attributes to any value on cos C and accounts assigned to cos C
          
    - if the authed admin does not have right to modify zimbraConstraint on cos C (and has right to modify the 
      corresponding account/cos attributes), he can set:    
          zimbraPasswordMinLength to between 6 and 8
          zimbraSignatureMaxNumEntries to a value less than 10
          all other attributes to any value on cos C and accounts assigned to cos C
          
    
    

3.5 System Defined Rights
      The lists are tentative, they can certainly change during the development cycles of the delegate admin
      project, and afterwards as the product evolves.

3.5.1 account/calendar resource:
          - getAccount                         : get all account attributes
          - modifyAccount                      : modify all account attributes
          - listAccount                        : see account in GetAllAccounts/SearchDirectoryResponse
          
          - renameAccount                      : rename account
          - deleteAccount                      : delete account
          
          - addAccountAlias                    : add alias to account
          - removeAccountAlias                 : remove alias from account
          
          - getMailboxDump                     : get mailbox dump for legal intercept
          - moveMailbox                        : move mailbox from one server to another
          - reindexMailbox                     : reindex mailbox
          - viewEmail                          : view the account's email
          
          - backupAccount                      : backup account
          - restoreAccount                     : restore account from backup
          
          - setAccountPassword                 : set account password
          
          - configureQuota                     : configure quota
          - configureFeature                   : enable/disable features
          - configurePasswordRule              : configure password rules
          - configureLoginPolicy               : configure login/lockout policies
          - configureZimlet                    : configure available zimlets
          - configureTheme                     : configure available themes(skins)

          - grantRight                         : can grant/revoke rights 
                                                 (see 3.6 The grantRight Right and crossDomainAdmin Right)
          

3.5.2 calendar resource:
          - getCalendarResource                : get all calendar resource attributes
          - modifyCalendarResource             : modify all calendar resource attributes
          - listCalendarResource               : see calendar resource in GetAllCalendarResources/SearchDirectoryResponse
          
          - renameCalendarResource             : rename calendar resource
          - deleteCalendarResource             : delete calendar resource
          
          - addCalendarResourceAlias           : add alias to calendar resource
          - removeCalendarResourceAlias        : remove alias from calendar resource

          - getMailboxDump                     : get mailbox dump for legal intercept
          - moveMailbox                        : move mailbox from one server to another
          - reindexMailbox                     : reindex mailbox
          - viewEmail                          : view the calendar resource's email
          
          - backupCalendarResource             : backup calendar resource
          - restoreCalendarResource            : restore calendar resource from backup
          
          - setCalendarResourcePassword        : set calendar resource password


3.5.3 cos
          - getCos                             : get all cos attributes
          - modifyCos                          : modify all cos attributes
          - listCos                            : see cos in GetAllCos/SearchDirectoryResponse
          
          - renameCos                          : rename cos
          - deleteCos                          : delete cos
          
          - assignCos                          : assign the cos (to domains or accounts)
           
          - configureQuota                     : configure quota
          - configureFeature                   : enable/disable features
          - configurePasswordRule              : configure password rules
          - configureLoginPolicy               : configure login/lockout policies
          - configureZimlet                    : configure available zimlets
          - configureTheme                     : configure available themes(skins)

    
3.5.4 distribution list
          - All rights for account/calendar resource
                When account/calendar resource rights are specified on a DL entry, the ACEs are 
                interpreted as "apply to all direct or indirect account/calendar resource members 
                of this distribution list".  Also see "(C) scope of targets" under "2. About Targets".
                
          - getDistributionList               : get all distribution list attributes
          - modifyDistributionList            : modify all distribution list attributes
          - listDistributionList              : see distribution list in GetAllDistributionList/SearchDirectoryResponse
          
          - renameDistributionList            : rename distribution list
          - deleteDistributionList            : delete distribution list
          
          - addDistributionListAlias          : add alias to distribution list
          - removeDistributionListAlias       : remove alias from distribution list
          
          - addDistributionListMember         : add member to distribution list
          - removeDistributionListMember      : remove member from distribution list
    

3.5.5 domain
          - All rights for account/calendar resource
                When account/calendar resources rights are specified on a domain entry, the ACEs are 
                interpreted as "apply to all accounts/calendar resources in this domain"
          - All rights for distribution list
                When distribution list rights are specified on a domain entry, the ACEs are interpreted 
                as "apply to all distribution lists in this domain"
          Also see "(C) scope of targets" under "2. About Targets".      
                
          - getDomain                         : get all domain attributes
          - modifyDomain                      : modify all domain attributes
          - listDomain                        : see domain in GetAllDomains/SearchDirectoryResponse
          
          - renameDomain                      : rename domain
          - deleteDomain                      : delete domain
          
          - createSubDomain                   : create sub domain
          
          - crossMailboxSearch                : run search mail (CMBS) functionality
           
          - createAccount                     : create account in the domain
          - createCalendarResource            : create calendar resource in the domain
          - createDistributionList            : create distribution list in the domain
          - createAlias                       : create alias in this domain
          - deleteAlias                       : delete alias in this domain (do we need this?)
          
          - configureExternalGAL              : configure external GAL
          - configureExternaAuth              : configure external auth
          - configureZimbraNotebookAccount    : setAttr zimbraNotebookAccount
          
          - crossDomainAdmin                  : the "cross domain admin" right
                                                (see 3.6 The grantRight Right and crossDomainAdmin Right)
    
>>>>> OPEN-ISSUE-1          
          Should we consider domain hierarchy like we do for DLs? 
          i.e. if G is allowed to createAccount in company.com, does G automatically have 
               right to createAccount in support.company.com and sales.company.com?
               
          we probably should not.     
<<<<<


3.5.6 global config
          - getGlobalConfig                  : get all global config attributes
          - modifyGlobalConfig               : modify all global config attributes


3.5.7 global grant          
          - all right for all other targets
          
          and
          - createCos                        : create cos
          - createTopDomain                  : create top level domain
          - createServer                     : create server
          - createZimlet                     : create zimlet


3.5.8 server
          - getServer                        : get all server attributes
          - modifyServer                     : modify all server attributes
          - listServer                       : see server in GetAllServers/SearchDirectoryResponse
          
          - deleteServer                     : delete server
          
          - deployAdminExtension             : deploy admin extensions
          - editAdminExtension               : edit admin extensions
          - removeAdminExtension             : remove admin extensions
          
          - viewMailQueue                    : view mail queues
          - manageMailQueue                  : take actions on mail queues
          - manageCertificate                : manage certificates
          - deployZimlets                    : deploy zimlets

          - configureMTA                     : configure MTA
          - configurePOP3                    : configure POP3
          - configureIMAP                    : configure IMAP
          - configurePOPProxy                : configure POP3 proxy
          - configureIMAPProxy               : configure IMAP proxy
          - configureVolumes                 : configure volumes
          - configureServiceEnabled          : configure services enabled


3.5.9 zimlet
          - getZimlet                        : get all zimlet attributes
          - modifyZimlet                     : modify all zimlet attributes
          - listZimlet                       : see zimlet in GetAllZimlets
          
          - deleteZimlet                     : delete zimlet



3.6 The grantRight Right and crossDomainAdmin Right
     
The grantRight right and crossDomainAdmin right are two special rights that play a role in our 
ACL granting/revoking/checking infrastructure.  They are described in details in this section.  

 
3.6.1 The grantRight Right  (account right)

An admin must have an effective grantRight right in order to grant and revoke rights.

In addition to the privileges of being able to grant/revoke rights, the grantRight right, 
is a "can do all", or "wildcard" right.  It works as follows:

    1. Only a "system admin" can grant the grantRight right. (see 4.  Admin Accounts and Admin Groups)

    2. Like a regular right, all the target/grantee/right rules apply.  
          e.g. - if granted on a domain, is effective on all accounts in the domain.
               - if granted to a group, all members in the group have the right
               - if is explicitly denied on a more specific target/grantee, the right is negated.

    3. It is a "wildcard" right.   The ACL checking code will always also check the grantRight 
       right while checking any right.  As long as the authed admin has an effective grantRight right, 
       the request will be allowed, even if the actual required right(e.g. createAccount) is explicitly denied.
  
    4. Can grant *any* right to *anyone* on *any* target entry that is in the target body covered by the target 
       on which the grantRight right is granted.
       e.g. If I have a grantRight right on a domain entry, I can grant any right to anyone on any entry in the domain.
            If I have a grantRight right on a cos entry, I can grant any right to anyone on this cos.

    5. ***important***: *Cannot* grant/revoke the grantRight right.

    6. ***important***: Admins with grantRight rights must assume full responsibility of any security impact caused 
                        by the grants they make.  
                        e.g. if you grant someone right to change your password, that someone can change your password 
                             and login as you and assume all your privileges.

      

3.6.2 The crossDomainAdmin Right  (domain right)

The purpose of the crossDomainAdmin right is to close security holes that could be opened by adding users from an
"unrelated management umbrella" to a distribution list that is under the administration of anotehr "management umbrella".

An "management umbrella" is the concept of "one admin or a group of admins can manage several domains".  

e.g. - adminA@X.com can manage(e.g. CreateAccount, ModifyAccount, ...) users in domain X.com, Y.com, and Z.com.
     - adminB@P.com can manage users in domain P.com, Q.com, and R.com.
     - adminGroup@M.com can manage users in domains M.com and N.com
     
In the above example, domain X.com, Y.com, and Z.com is under the same "management umbrella", domains 
P.com, Q.com, and R.com are under the same "management umbrella", and domains M.com and N.com are 
under the same "management umbrella".   The three "management umbrella"s are "unrelated" to one another.

This can be implemented by granting he grantRight right on the domains, as follows:

domain X.com (grant: {id-of-adminA@X.com} usr grantRight)
domain Y.com (grant: {id-of-adminA@X.com} usr grantRight)
domain Z.com (grant: {id-of-adminA@X.com} usr grantRight)

domain P.com (grant: {id-of-adminB@P.com} usr grantRight)
domain Q.com (grant: {id-of-adminB@P.com} usr grantRight)
domain R.com (grant: {id-of-adminB@P.com} usr grantRight)

domain M.com (grant: {id-of-adminGroup@M.com} grp grantRight)
domain N.com (grant: {id-of-adminGroup@M.com} grp grantRight)

Note: by adding admin users to adminGroup@M.com, you are giving right that is allowed to the 
adminGroup@M.com to the admin user.  Members of adminGroup@M.com can be in *any* domain. 
e.g. admin@B.com, admin@C.com.  This, the behavior that admin@B.com, admin@C.com *can* manage 
users in M.com and N.com, is NOT a security hole.   Because they are added explicitly by the 
admin who decides "who can manage domains M.com an N.com".    That is, adding out-of-domain 
admins to a grantee group is fine, it is not a security concern.

However, adding out-of-domain users to a "target group" can open security holes.

Using the above example, consider this hierarchy:
    domain X.com
        group DL@X.com
            user user1@X.com
            user user2@Y.com
            user user3@Z.com 
            user user4@P.com
            
    Now, it is fine when adminA@X.com (remember he has the grantRight right, which is a "can do all" right) 
    changes password on users user1@X.com, user2@Y.com, user3@Z.com, because adminA@X.com also has a grantRight 
    grant on domains Y.com and Z.com, and remember the grantzRight is a "wildcard" right, which allows anythig.
    
    But, if adminA@X.com is changing password on user4@P.com, this is a security hole and we should NOT allow
    it.  
    
    However, if letting adminA@X.com execute rights on user4@P.com is desired, we provide a way so that management 
    of domain P.com can say "sure, admins from domain X can administrate users in my domain".
    
    The mechanism is the "crossDomainAdmin" right.  It works as follows:  
    
    - The crossDomainAdmin right is a domain right.  That is, it is only applicable only when granted 
      on a domain.
       
    - The "grantee" of a crossDomainAdmin right is, and has to be a domain. This is the only case when 
      the grantee of a grant is not an account or group.
      
    - The grant looks:
      {id-of-allowed-domain} dom crossDomainAdmin
      
      for example:
      On domain P.com, the admin who has the privilege to grant right on domain P.com can grant:
          {id-of-domain-X.com} dom crossDomainAdmin
          {id-of-domain-Y.com} dom crossDomainAdmin
          
      The two grants allows admins in domain X.com and Y.com (note, they don't have any other right on domain 
      P.com) to execute their rights on users in P.com.   


Internally, the algorithm for deciding on cross domain ACL checking is:
1. Go through the regular checking, if denied, stop

2. Otherwise (i.e. allowed) check if the target is a "domain-ed" entry.
   A domian-ed entry is a: domain, distribution list, account, alias, 
   or calendar resource.   If the target is not a domain-ed entry, allow 
   the right, stop.
   
3. Otherwise (i.e. target is a domain-ed entry) check if the authed admin 
   is in the same domain of the target.  If it is, allow the right, stop.
   
4. Otherwise (i.e. target is a domained-ed entry and is in a different domain),
   check if the grant that allows the right is granted on a target that is in 
   the same domain of the target. If it is, allow the right, stop.
   
   this is the case:
        domain X.com (grant: allow admin@Y.com right)
           user1@X.com  <-- the target
           
   Although user is in a different domain(X.com) than the authed admin's domain(Y.com),
   the grant is on X.com, which is the same domain of the target entry (user1@X.com).
   For this case, it is natually allowed without having to check the crossDomainAdmin right. 
   
5. Otherwise (i.e. the grant that allows it is *not* in the same domain of the target), 
   check if the authed admin has the crossDomainAdmin right on the domain in which the
   target entry is in,  If it is, allow the right, stop.
   
   this is the case:
        domain X.com
           group group@X.com (grant: {id-of-adminB@X.com} usr rightFoo)   <-- the grant
               user user1@P.com   <-- the target
               
        then on domain P.com, if either:
        - domain X.com has the crossDomainAdmin right, or
        - adminB@X.com also has rightFoo (or the grantRight right, remember it is a wildcard right) right
        then it is allowed.
        
        that is: either     
        domain P.com (grant: {id-of-domain-X.com} dom crossDomainAdmin)
        or
        domain P.com (grant: {id-of-adminB@X.com} usr rightFoo)
        or
        domain P.com (grant: {id-of-adminB@X.com} usr grantRight)
        
        
6. Otherwise, deny.               
     


==================================
4. Admin Accounts and Admin Groups
================================== 

4.1 How to Provision Admin Accounts and Admin Groups
    - A "system admin account" is an account with the account attribute zimbraIsSystemAdminAccount set to TRUE.
    
    - An "admin account" is an account with the account attribute zimbraIsAdminAccount set to TRUE.
    
    - An "admin group" is a distribution list with the DL attribute zimbraIsAdminGroup set to TRUE.
    
    - Only admin accounts and admin groups can be added as members of admin groups. 


4.2 For Granting/Revoking
    - Only admin accounts can grant/revoke admin rights.  
    
    - Only admin accounts/groups can received any grants, i.e. being the grantee of an admin grant.
    

4.3 System Admin
    - A "system admin" is a "can do all" admin.  It is allowed for all admin SOAP commands, including 
      granting/revoking *any* right on *any* target to *any* admin/group.   
      e.g. an account with zimbraIsSystemAdminAccount=TRUE is allowed to CreateAccount *without* an explicit 
      createAccount right.
      
    - The most important privilege of a system admin is being able to grant and revoke the grantRight right.
      A "regular" admin (i.e. zimbraIsAdminAccount==TRUE) cannot grant the grantRight right.
       
    - A system admin can create other system admins, by setting their zimbraIsSystemAdminAccount to TRUE.  
    
  

4.4 Grants Are Valid only When the Grantee's Admin Flag is On 
    - When an account's zimbraIsAdminAccount attribute changed from TRUE to FALSE, all existing grants to 
      the admin account become invalid.  
      When zimbraIsAdminAccount is changed from FALSE to TRUE, all existing grants automatically become 
      valid again.

    - When a group's zimbraIsAdminGroup is is changed from TRUE to FALSE, all existing grants to the admin 
      group become invalid.    
      When zimbraIsAdminGroup is changed from FALSE to TRUE, all existing grants automatically become valid again.

    - The above let admins temporary disable things without having to blow away and later recreate the grants.



 
=================
5. Storage - LDAP
=================

5.1 Grants

    A grant, which is represented by an ACE, is stored in a LDAP attribute zimbraACE on target entries.  

    zimbraACE:
    ---------- 
        type="astring"
        cardinality="multi" (each value is an Access Control Entry, hence making an ACL)
        optionalIn="account,distributionList,cos,domain,globalConfig,server,xmppcomponent,zimlet"
            
            
    zimbraACE Format:
    -----------------   
        {grantee-zimbraId} {grantee-type} [-]{right} 
        
            {grantee-zimbraId} = zimbraId of the grantee
            
            {grantee-type} = usr - grantee is an admin account
                             grp - grantee is a group of admin accounts
                             
            {right} = the right.
                      if a '-' (minus sign) is prepended to the right, it means the right is 
                      specifically denied.              
        
    
         e.g.
            - On a domain target:    
                  75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 usr createAccount
                      ==> account 75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 can create accounts in this domain.
                      
                  55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 grp -setPassword
                      ==> None of any direct or indirect members of DL 55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 can  
                          set password for any accounts in this domain
                          
                  75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 usr -configureGAL
                      ==> account 75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 can configure GAL on this domain 
        
            - On an account target:
                  3b00a6bd-12ca-417d-9312-c5664a8c26b3 grp -setPassword
                      ==> None of any direct or indirect members of DL 3b00a6bd-12ca-417d-9312-c5664a8c26b3 can 
                          set password for this account.
                          
                  c2e3fd70-97ac-43a4-8caa-4bf681251a49 usr configureQuota
                      ==> account c2e3fd70-97ac-43a4-8caa-4bf681251a49 can configure quota of this account.
                      
                  2246ffcf-1ae2-402a-be91-bc0b3be4c0f0 usr set.account.zimbraMailStatus
                      ==> account 2246ffcf-1ae2-402a-be91-bc0b3be4c0f0 can set account attribute zimbraMailStatus.
                       
        
    Indexing:
    ---------    
        zimbraACE is indexed.  This is to discover the "all rights granted to a grantee G" information for admin console.
        
    
    Queries:
    --------
        TODO



    
5.2 Add the "global grant" Entry
    DN: cn=globalgrant,cn=zimbra
    
    - For granting grants that affect all entries on the system.  e.g all cos's, all servers, all domains.
    
    - For granting the create{Object} rights that cannot be granted on any target becasue the target does not exist yet.
      e.g. createTopDomain, createCos, createServer.
           

5.3 Add ACL Related Attributes

- zimbraACE 
       see 5.1

- zimbraConstratint
      <attr id="766" name="zimbraConstraint" type="string" cardinality="multi" optionalIn="globalConfig,cos" since="6.0">
        <desc>
            attribute constraints
            TODO: fill all the constraints
        </desc>
      </attr>

- zimbraIsSystemAdminAccount
      see 4.
      
      <attr id="31" name="zimbraIsAdminAccount" type="boolean" cardinality="single" optionalIn="account" flags="accountInfo">
          <desc>set to true for admin accounts</desc>
      </attr>

- zimbraIsAdminGroup
      see 4.
      
     
5.4 Deprecated Attributes

- zimbraIsDomainAdminAccount
      All right checking will be based on ACL.   zimbraIsDomainAdminAccount will be ignored throughout the server code.
      Current accounts with zimbraIsDomainAdminAccount=TRUE will be migrated by granting them the equivalent rights.
      
      
=====================
6. ACL Checking Rules
=====================

6.1 The Most Specific Grant Takes Precedence
    A) Target Scope
       
       most specific                                                          least specific 
       ----------------------------------------------------------------------------------------
       account            -> distribution lists -> domain(of the account)  -> global grant
       distribution list  -> distribution lists -> domain(of the DL)       -> global grant
       domain                                                              -> global grant
       cos                                                                 -> global grant
       server                                                              -> global grant
       xmppcomponents                                                      -> global grant
       zimlet                                                              -> global grant
       
       Note:
         - all groups the account is a direct/indirect member of are considered equally 
           when judging the grants.  We take union of all grants granted on all groups the 
           target account is a member of.  If there is any negative grants, deny.  If 
           the union is empty, deny,  Otherwise, allow.
           
         - sub domain does not have a role in grant judging.
       
       
       e.g.1  given the following grants for right R:
       
            domain D (grant-1: allow admin A)
                group G1 (grant-2: deny admin A)
                    account U (grant-3: allow admin A)
                 
            - admin A is allowed, because the most specific grant(grant-3) allows it.
          
       
       e.g.2 given the following grants for right R:
         
            domain D (grant-1: allow admin A)
                group G1 (grant-2: deny admin A)
                    group G2 (grant-3: allow admin A)
                        account U 
                   
            - admin A is denied, because grant-2 denies it.
              Note: grant-2 and grant-3 are equally related to account U, grant-2 takes
                    precedence because it is a negative grant. (see 5.2)

    
    
    B) Grantee Scope
    
       most specific                                 least specific 
       ------------------------------------------------------------
       account                                       distribution lists
       
       Note:
         - all groups the account is a direct/indirect member of are considered equally 
           when judging the grants.  We take union of all grants granted on all groups the 
           target account is a member of.  If there is any negative grants, deny.  If 
           the union is empty, deny,  Otherwise, allow.
       
       e.g.1 given the following grants for right R:

           user account U (grant-1: deny GA) (grant-2: allow A2)
                  
           admin group GA (A1 and A2 are members of group GA)
               admin account A1
               admin account A2
                     
           - admin A1 is denied for right R on account U, because grant-1 denies it.  
                
           - admin A2 is allowed for right R on account U, because grant-2 allows it.
             grant-2 takes precedence over grant-1 because it is directly granted to the 
             admin account, whereas grant-1 is granted to a group.
                
       
    C) Combining Target Scope and Grantee Scope: Target Relativity takes Precedence over Grantee Relativity
       
       For example, given the following grants for right R:
       
           group GU (grant-1: deny admin A)
                   user account U (grant-2: allow group GA)
                       
           group GA (A is a member of group GA)
               admin account A
                   
           - A is *allowed* for right R on target account U, because grant-2(granted on the target itself) is 
             more specific to account U than grant-1(granted on a group the target account is a member of).
             Even if on the grantee side, grant-1(grant to account A) is more specific than grant-2(grant to a group 
             the authed account is a member of)
                                  

6.2 Negative Grants Takes Precedence Over Positive Grants
    If grants are all equally related to the target and grantee, and they conflict - dome deny, some allow,
    then the negative grant takes precedence.
    
    e.g.1. 
           target account U (grant-1: allow group GA) (grant-2: deny group GA)
           
           admin account A is a member of group GA
           
           - admin account A is denied, because grant-2, the negative grant, takes precedence.
           
    e.g.2. 
           group GU-1 (grant-1: deny admin A)
               group GU-2 (grant-2: allow admin A)
                   account U
           
           - admin A is denied, because grant-1 and grant-2 are equally related to the target account U,
             so the negtive grant takes precedence.  
       
    
    
6.3 For Get{object}/Modify{object} SOAP Requests
    All positive/negative rights will be expanded down to each attribute level and computed into an
    effective set of attributes allowed for read/write.
    
    Get{object}/Modify{object} will be allowed only if all attributes requested for Get/Modify are allowed 
    to be read/modified; otherwise the entire request will be denied(PERM_DENIED exception) and no attribute 
    is returned/modified.


===============
7. Admin SOAP
===============
7.1 Granting/Revoking/Checking/Getting Rights on a Target
    
7.1.1 GrantRightRequest
      Grant right on a target.
    
<GrantRightRequest>
  <target type={target-type} by="{target-by}">{target-name-or-id}</target>
  <grantee type={grantee-type} by="{grantee-by}">{grantee-name-or-id}</grantee>
  <right [deny="${deny}"]>{right}</right>
</GrantRightRequest>    

{target-type} = account | resource | distributionlist | domain | cos | server | xmppcomponent | zimlet | config | global 

{target-by}   = name | id
  
{grantee-type} = usr | grp
  
{grantee-bt}   = name | id

{deny} = 1 | 0(default)

{right} = {right-name} | {inline-right}

{right-name} = a system defined right name

{inline-right} = {op}.{target-type}.{attr-name}

{op} = set | get

{attr-name} = a valid attribute name on the specified target type

  
  
<GrantRightResponse/>


7.1.2 RevokeRightRequest
      Revoke right previously granted on a target.
 
<RevokeRightRequest>
  <target type={target-type} by="{target-by}">{target-name-or-id}</target>
  <grantee type={grantee-type} by="{grantee-by}">{grantee-name-or-id}</grantee>
  <right [deny="${deny}"]>{right-name}</right>
</RevokeRightRequest>    

<RevokeRightResponse/>


7.1.3 CheckRightRequest
      Check if a principal has the specified right on target.
    
<CheckRightRequest>
  <target type={target-type} by="{target-by}">{target-name-or-id}</target>
  <grantee by="{grantee-by}">{grantee-name-or-id}</grantee>
  <right>{right-name}</right>
  [<attrs>
     <a n="...">...</a>+
   </attrs>]
</CheckPermissionRequest>

{right-name}: right name
              must be a preset, getAttrs, or setAttrs right, it cannot be a combo right.
                
              If right is a setAttrs right, an attr/value map can be provided 
              in <attrs>, which contains the attrs/values that are attempted to
              be modified.   If one of the values to be modified violates one of 
              the constraint for the the attributes, the result in CheckRightResponse
              will be allow="0".  If attr/value map is not provided, system will just 
              check if all attributes defined by the setAttrs right are allowed, 
              without taking into account any constraint. 
               
              

<CheckRightResponse allow="{1|0}">
  [<via>
    <target type={target-type}>{target-name-or-id}</target>
    <grantee type={grantee-type}>{grantee-name-or-id}</grantee>
    <right [deny="${deny}"]>{right-name}</right>
  <via>]
</CheckRightResponse>  

    A successful return means the principal specified by the <grantee> is allowed
    for the specified right on the target object.  
    If PERM_DENIED is thrown, it means the authed user does not have privilege
    to run this SOAP command(has to be an admin because this command is in admin namespace).
    Result of CheckRightRequest is in the allow="1|0" attribute in CheckRightResponse.
    <via> in the CheckRightResponse is the grant that decisively
    lead to the result.  
    
    e.g. if a combo right C containing renameAccount is granted to group G on domain D, and
         admin A is in group G, then
              <CheckRightRequest>
                 <target type="account"> by="name">user1@D</target>
                 <grantee by="name">admin@D</grantee>
                 <right>renameAccount</right>
              </CheckRightRequest>
          
         will return:
              <CheckRightResponse hasRight="1">
                 <via>
                   <target type=domain>D</target>
                   <grantee type=grp>G</grantee>
                   <right>C</right>
                 </via>
              </CheckRightResponse>
      
         Note, <via> is optional.  If the right of interest is not granted at all, there will be no <via>
         in the response.     Also, <via> will probably be hairy for rights that modify/get
         selective attrs, it may not be returned for those rights.  TDB...

    e.g. 
         <CheckRightRequest>
             <target type="account"> by="name">user1@D</target>
             <grantee by="name">admin@D</grantee>
             <right>configureQuota</right>
             <attrs>
                 <a n="zimbraMailQuota">100000</a>
                 <a n="zimbraQuotaWarnPercent">80</a>
             <attrs>    
         </CheckRightRequest>
              
         <CheckRightResponse hasRight="0">     
         
         
7.1.4 GetGrantsRequest
      Returns all grants on the specified target entry.
      The authenticated admin must have an effective "viewGrants" (TBD) system right on the specified target.
      
<GetGrantsRequest>
  <target type={target-type} by="{target-by}">{target-name-or-id}</target>
</GetGrantsRequest>

<GetGrantsResponse>
    <grant type="{grantee-type}" id="{grantee-id}" name="{grantee-name}" right="{right-name}" deny="{deny}"/>+
</GetGrantsResponse>  
   
         
7.1.5 GetEffectiveRightsRequest
      Returns all *effective* rights the authenticated admin has on the specified target entry.
    
      Effective rights are the rights the admin is actually allowed.  It is the net result of 
      applying ACL checking rules given the target and grantee.  Specifically denied rights 
      will *not* be returned.
    
      The result can help the admin console decide on what tabs to display after a target 
      is selected.  For example, after user1 is selected, if the admin does not have right 
      to setPassword, it should probably hide or gray out the setPassword tab.
    
<GetEffectiveRightsRequest expandAllAttrs="{expand-all-attrs}">
  <target type={target-type} by="{target-by}">{target-name-or-id}</target>
  [<grantee by="{grantee-by}">{grantee-name-or-id}</grantee>]
</GetEffectiveRightsRequest>

if <grantee> is omitted, it means the account identified by the auth token.

{expand-all-attrs} : whether to include all attribute names in the <getAttrs>/<setAttrs> elements in 
                     GetEffectiveRightsResponse if all attributes of the target are gettable/settable
                     
                     comma separated values of "getAttrs", "setAttrs"
                     
                     e.g. getAttrs           - expand attrs in getAttrs in GetEffectiveRightsResponse
                          setAttrs           - expand attrs in setAttrs in GetEffectiveRightsResponse
                          getAttrs,setAttrs  - expand attrs in both getAttrs and setAttrs in GetEffectiveRightsResponse
                                     
                     - when all="1" in setAttrs/getAttrs in GetEffectiveRightsResponse: 
                           0: do not expand attributes
                           1: expand all attributes
                     - when all is not present or is 0 in setAttrs/getAttrs in GetEffectiveRightsResponse: 
                           value of {whether-to-expand-all-attrs} does not apply.  Allowed attributes are always 
                           returned in setAttrs/getAttrs in GetEffectiveRightsResponse.  
    
<GetEffectiveRightsResponse>    
  <grantee id"{grantee-id}" name="{grantee-name}">
  <target type="{target-type}" [id"{target-id}"] [name="{target-name}"]>
      <right n="{right-name}"/>+
      <setAttrs [all="{all}"]>
          <a n="...">
              [<default>
                   <v>...</v>+
               </default>]
              [<constraint>
                   [<min>{min}</min>]
                   [<max>{max}</max>]
                   [<values>
                       <v>...</v>+
                    </values>]
               </constraint>]       
          </a>+
      </setAttrs>
      <getAttrs [all="{all}"]>
        <a n="...">
              [<default>
                   <v>...</v>+
               </default>]
          </a>+
      </getAttrs>
  </target>
</GetEffectiveRightsResponse>   

    <right>       : all effective system rights
                    - getAttrs/setAttrs rights will not appear in the list because they will be 
                      expanded to a list of attributes that can be get/set, which appear in the 
                      <getAttrs> and <setAttrs> elements in the response.
                    - Combo rights will not appear in the list because they will be expanded to 
                      system rights and/or a set of attributes that can be get/set.
    <setAttrs>    : all attrs can be set
    <getAttrs>    : all attrs can be get
    
    {all} : 0(default) | 1
            1 - all attributes on the target entry are accessible
                if 1, no <a> elements will appear under the <setAttrs>/<getAttrs>
                
    <default> : inherited default value(or values if the attribute is multl-valued)
    
    e.g. 
    <GetEffectiveRightsRequest>
      <target type="account" by="id">bba95d7d-0b13-401f-a343-03a8f5a96f7c"/>
      <grantee by="name">admin@test.com</grantee>
    </GetEffectiveRightsRequest>
    
    <GetEffectiveRightsResponse>
      <grantee name="admin@test.com</grantee" id=""/>
      <target type="account" name="user1@test.com" id="bba95d7d-0b13-401f-a343-03a8f5a96f7c">
        <right n="setPassword"/>
        <right n="renameAccount"/>
        <right n="deleteAccount"/>
        <setAttrs>
          <a n="zimbraMailQuota" min="100000000"/>
          <a n="zimbraMailStatus"/>
          <a n="zimbraFeatureMailEnabled" values="TRUE,FALSE"/>
          ...
        </setAttrs>
        <getAttrs>
          <a n="..."/>
          <a n="..."/>
          ...
        </getAttrs>
      </target>
    </GetEffectiveRightsRequest>

         
7.1.6 GetCreateObjectAttrsRequest
      
      Returns attributes, with defaults and constratints if any,  that can be set by the authed admin when an 
      object is created.
      
      GetCreateObjectAttrsRequest returns the equivalent of setAttrs portion of GetEffectiveRightsResponse.
      GetCreateObjectAttrsRequest is needed becasue GetEffectiveRightsRequest requires a target, but when we are 
      creating a object, the target object does not exist yet.
      
      The result can help the admin console decide on what tabs/attributes to display for creating objects.
    

<GetCreateObjectAttrsRequest>
    <target type="{target-type}">
    [<domain by="{domain-by}">...</domain>]
    [<cos by="{cos-by}">...</cos>]
</GetCreateObjectAttrsRequest>    

<domain> : required if {target-type} is "account"
           ignored otherwise
          
<cos>    : optional if {target-type} is "account", if missing, default cos of the domain will be used
           ignored otherwise
          
e.g. 1  creating an account:

<GetCreateObjectAttrsRequest>
  <target type="account"/>  
  <domain by="name">test.com</domain>
  <cos by="name">standard</cos>
</GetCreateObjectAttrsRequest>

<GetCreateObjectAttrsResponse>
    <setAttrs>
          <a n="zimbraMailQuota"/>
              <constraint>
                  <min>1</min>
                  <max>3</max>
              </constraint>
              <default>
                  <v>2</v>
              </default>
          <a n="zimbraMailStatus"/>
          <a n="zimbraFeatureCalendarEnabled"/>
          ...
    </setAttrs>
</GetCreateObjectAttrsResponse>


e.g. 2 creating a server:

<GetCreateObjectAttrsRequest>
  <target type="server"/>  
</GetCreateObjectAttrsRequest>

<GetCreateObjectAttrsResponse>
    <target type="server"/>
    <setAttrs>
          <a n="zimbraLmtpExposeVersionOnBanner"/>
          <a n="zimbraXMPPServerDialbackKey"/>
          <a n="zimbraReverseProxyImapEnabledCapability"/>
              <constraint>
                  <values>
                      <v>IMAP4rev1</v>
                      <v>BINARY</v>
                  </values>
              </constraint>    
          ...
    </setAttrs>
</GetCreateObjectAttrsResponse>
         
         
7.2 Get/GetAll Right Definition

7.2.1 GetRightRequest
      Get a right definition.
    
<GetRightRequest [expandAllAttrs="{expand-all-attrs}"]>
  <right>{right-name}</right>
</GetRightRequest>

{expand-all-attrs} : whether to include all attribute names in the <attrs> elements in 
                     GetRightResponse if the right is meant for all attributes 
                     0: default, do not include all attribute names in the <attrs> elements
                     1: include all attribute names in the <attrs> elements

<GetRightResponse>
  <right name="{right-name}" type="{right-type}" [targetType="{target-type}"]>
    <desc>{right-description}</desc>
    [<attrs [all="1"]>
       [<a n="{attr-name}"/>+]
     </attrs>]
    [<rights>
       <r n="{right-name}"/>+
     </rights>]
  </right>
</GetRightResponse>

{right-name}: right name

{right-type}: getAttrs | setAttrs | combo | preset

{target-type}: if {right-type} is:
               - preset: always present (exactly target type)
               - getAttrs/setAtrts: always present (comma-separated target types)
               - combo: always not present


7.2.2 GetAllRights
      Get all system defined rights
      
<GetAllRightsRequest [targetType="{target-type}"] [expandAllAttrs="{expand-all-attrs}"]/>

{target-type} : target type on which a right is grantable
                e.g. createAccount right is only grantable on domain entries and the globalgrant 
                     entry.
                Don't confuse this with "whether a right is applicable on a target type".
                e.g. the renameAccount right is "applicable" on account entries, but it is "grantable" 
                     on account, distribuiton list, domain, and globalgrant entries.
     
{expand-all-attrs} : whether to include all attribute names in the <attrs> elements in 
                     GetRightResponse if the right is meant for all attributes 
                     0: default, do not include all attribute names in the <attrs> elements
                     1: include all attribute names in the <attrs> elements
                     
<GetAllRightsResponse>
  <right name="{right-name}" type="{right-type}" [targetType="{target-type}"]>
    <desc>{right-description}</desc>
    [<attrs all="1">
       [<a n="{attr-name}"/>+]
     </attrs>]
    [<rights>
       <r n="{right-name}"/>+
     </rights>]
  </right>+
</GetAllRightsResponse>

See <GetRightResponse> for description of each <right> in the response. 


===========
8. zmprov
===========

8.1 zmprov -l (ldap)
    - zmprov -l will continue to support all it is supporting now, including create/delete/rename any objects and modifying 
      any non-immutable attributes

    - "zmprov -l" is ***not*** restricted by any ACL.   
    
    - This is reasonable and is not a security hole because in order to run "zmprov -l", someone must actually logon to a box 
      ZCS is installed and has read access to localconfig.xml, which contains the LDAP root password.


8.2 zmprov (via soap)

TODO

                
==========================
9. Backwards compatibility
==========================
- For current admins (zimbraIsAdminAccount), allow:
     - All permissions on global config
     - All permissions on all coses
     - All permissions on all domains
     - All permissions on all servers

- Current domain admins (zimbraIsDomainAdminAccount), allow:
     - All permissions on the domain

Customers can then turn off those bits and explicitly grant only the permissions they want to.


===========================
10. References, requirements
===========================
- Kevin Kluge's requirement doc: 
  https://dogfood.zimbra.com/home/kluge/Public/delegateAdmin

- role based delegate administration
  http://bugzilla.zimbra.com/show_bug.cgi?id=11515

- server side infrastructure for role based delegated administration
  http://bugzilla.zimbra.com/show_bug.cgi?id=18277

- Customer Care App Requirements 
  http://twiki.corp.yahoo.com/view/Mail/ZimbraCustomerCareApp
  
