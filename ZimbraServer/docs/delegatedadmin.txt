===========
1. Terms
===========
1.1 Grantees
    One or a group of Zimbra admin accounts that are granted or denied rights to execute predefined 
    administrative rights on a target.
    Grantees can be:
        - accounts
        - distribution lists


1.2 Targets:
    Objects on which administrative rights can be executed by grantees.  
    Targets can be:
        - accounts
        - calendar resources 
        - coses
        - distribution lists
        - domains
        - global config
        - servers
        - zimlets
        

1.3 Rights
    Fine-grained rights that can be granted to grantees to execute administrative rights on targets.
    See "2. Rights" for the full list of rights for each target type.
    
    - positive rights
      For example: allow SetPassword
                   allow CreateAccount
    
    - negative rights
      Rights specifically denied to a grantee.
      For example: deny SetPassword
                   deny CreateAccount
                 
      Purpose of negative rights is to partially negate rights granted to a wider scope of grantees or 
      granted on a wider scope of targerts.
      
      Use cases:
          - negate a subset of grantees:
              . all members of DL-admins, except for admin-1 and admin-2, can create accounts in domain company.com.
                (admin-1 and admin-2 are in group DL-admins)
              . no one in DL-newbies can create accounts in domain company.com, except for admin-3 and admin-4.
                (admin-3 and admin-4 are in group DL-newbies)
            
          - negate a subset of targets:
              . admin-2 can change password of all accounts in domain company.com, except for ceo@company.com and cfo@company.com.
                (ceo@company.com and cfo@company.com are in domain company.com)
              . Password of members in DL-bosses cannot be changed by admin-1, except for foo. 
                (foo is in group DL-bosses)                           

                         
1.5 ACE (Access Control Entry)
    - An ACE defines a fine-grained right allowed or denied to a grantee on a target.  
    - An ACE is stored in an LDAP attribute on the target entry. 
    - An ACE consists of three parts:
          (1) Zimrba ID of the grantee  (e.g. 6ecd16b8-5ced-4aa0-8f95-bdc331d8c22a)
          (2) Type of the grantee (e.g. usr)
          (3) Allowed or denied right  (e.g. -changePassword)
          
    See "3. LDAP" for storage and format of ACE.

     
1.6 ACL
    A list of ACEs, stored in a LDAP attribute on target entries.  The attribute is multi-valued, each value
    represents an ACE, the collection of all the values represents the ACL for the target.
                          
            
            
===========
2. Rights
===========
2.1 System Defined Rights

    - Rights are "fine-grained" and "atomic".  That is, a right is independent of other rights on the *same* target.  
      For example, if grantee G is allowed to setPassword on target T, we do NOT check if the modifyAccount right  
      is also granted to G on T. 
    
    - However, if a right involves accessing multiple targets, the grantee needs to have adequate rights on  
      all pertinent targets. 
      For example:
          - to create alias alias-1@domain-2.com for account account-1@domain-1.com, the subject must 
            have rights to: 
                - addAccountAlias on account-1 (this allows adding an alias for account-1) 
                AND 
                - createAlias in domain-2.com (this allows creating an alias entry in domain domain-2.com)
          - Likewise to remove the alias from the account, the grantee must have rights to: 
                - removeAccountAlias of account-1@domain-1.com
                AND 
                - deleteAlias in domain-2.com.
    
    Rights can be categorized into "lower level" and "higher level" rights.
    Generally speaking, 
        - "lower level" rights are orthogonal to the functionalities of the target type. 
          There are 4 types of lower level rights: get, modify, rename, delete
          
        - "higher level" rights are for functional operations on a target type.  
          e.g. For account targets: setPassword, sddAccountAlias
               For domain targets: createAccount, deleteDistributionList
 
     System defined rights are described in 2.1.1 to 2.1.6.  They are for now **tentative**, and the list 
     can change over time.
     
>>>>> OPEN-ISSUE-1
- How to model ModifyAccount in functional areas?
      e.g.  - enable/disable IMAP/POP and mobile access for all users
            - enable/disable sharing of folders
            - enable/disable zimlets/themes
            - enable/disable email aggregation
            
      Should we define hard Rights for each (e.g. ManageImap, ManagePop, ...)
      or 
      should we provide a mechanism so rights can be "softly" defined/configured?
      e.g. admin can define a right called "ManageImap" by specifying all imap related 
           attributes the Right can modify.  System can also have pre-configured 
           "soft rights" that are available out of the box.
           Need to come up with LDAP structure/storage of soft Rights.  TODO.
<<<<<
         
2.1.1 account/calendar resource:
          - (L) getAccount                   : get attributes of this account/CR
          - (L) modifyAccount                : modify attributes of this account/CR
          - (L) modifyAccountWithinCosLimit  : modify attributes of this account/CR within COS limit
          - (L) renameAccount                : rename this account/CR
          - (L) deleteAccount                : delete this account/CR
          - (H) assignCOS                    : assign COS for this account/CR
          - (H) addAccountAlias              : add aliases to this account/CR
          - (H) removeAccountAlias           : remove aliases from this account/CR
          - (H) login                        : login to this account/CR
          - (H) setPassword                  : set password of this account/CR
          - (H) manageQuota                  : manage quota of this account/CR
          - (H) manageFeature                : turn features on/off on this account/CR
          - (H) managePasswordRule           : manage password rules of this account/CR
          - (H) manageLoginPolicy            : manage login/lockout policies of this account/CR
          - (H) manageZimlet                 : manage zimlets available to this account/CR
          - (H) manageTheme                  : manage themes(skins) available to this account/CR

          
2.1.2 cos
          - (L) getCos                       : get attributes of this cos
          - (L) modifyCos                    : modify attributes of this cos
          - (L) renameCos                    : rename this cos
          - (L) deleteCos                    : delete this cos
          - (H) manageQuota                  : manage quota of this cos
          - (H) manageFeature                : turn features on/off on this cos
          - (H) managePasswordRule           : manage password rules of this cos
          - (H) manageLoginPolicy            : manage login/lockout policies of this cos
          - (H) manageZimlet                 : manage zimlets available to users in this cos
          - (H) manageTheme                  : manage themes(skins) available to users in this cos
          - (H) manageServerPool             : manage server pool available for creating users in this cos

    
2.1.3 distribution list
          - All rights for accounts/CRs
                When account/CR rights are specified on a DL entry, the ACEs are interpreted as 
                "apply to all direct or indirect account/CR members of this DL"
          - (L) getDistributionList          : get attributes of this distribution list
          - (L) modifyDistributionList       : modify attributes of this distribution list
          - (L) renameDistributionList       : rename this distribution list
          - (L) deleteDistributionList       : delete this distribution list
          - (H) addDistributionListAlias     : add aliases to this distribution list
          - (H) removeDistributionListAlias  : remove aliases from this distribution list
          - (H) addDistributionListMember    : add members to this distribution list
          - (H) removeDistributionListMember : remove members from this distribution list
    

2.1.4 domain
          - All rights for accounts/CRs
                When account/CR rights are specified on a domain entry, the ACEs are interpreted as 
                "apply to all accounts/CRs in this domain"
          - All rights for DLs
                When DL rights are specified on a domain entry, the ACEs are interpreted as 
                "apply to all DLs in this domain"
          - (L) getDomain                    : get attributes of this domain
          - (L) modifyDomain                 : modify attributes of this domain
          - (L) renameDomain                 : rename this domain
          - (L) deleteDomain                 : delete this domain
          - (H) createSubDomain              : create sub domains in this domain
          - (H) createAccount                : create accounts/CRs in this domain
          - (H) createDistributionList       : create distribution lists in this domain
          - (H) createAlias                  : create aliases in this domain
          - (H) celeteAlias                  : delete aliases in this domain
    
>>>>> OPEN-ISSUE-2          
          Should we consider domain hierarchy like we do for DLs? 
          i.e. if G is allowed to createAccount in company.com, does G automatically have 
               right to createAccount in support.company.com and sales.company.com?
<<<<<


2.1.5 global config
          - (L) getGlocalConfig              : get attributes of global config
          - (L) modifyGlobalConfig           : modify attributes of global config
          - (H) createCos                    : create coses
          - (H) createTopDomain              : create top level domains
          - (H) createServer                 : create servers
          - (H) createZimlet                 : create zimlets

    
2.1.6 server
          - (L) getServer                    : get attributes of this server
          - (L) modifyServer                 : modify attributes of this server
          - (L) deleteServer                 : delete this server

          
        
2.2 User Defined "Combo" or "Macro" Rights 
    To simplify the granting process, admins can define "macro" rights that contain 
    a collection of system defined rights.
    
    For example: 
        PASSWORD_ADMIN = setPassword, managePasswordRule
        FEATURE_ADMIN = manageFeature, manageZimlet, manageTheme
        SUPER_ADMIN = PASSWORD_ADMIN, FEATURE_ADMIN, manageQuota

>>>>> OPEN-ISSUE-3 
    Should we support "Macro" rights in the server?  If so need to come up with storage.  TODO.                                        
<<<<<


=========
3. LDAP 
=========
ACE is stored in a LDAP attribute on target entries.  

LDAP attribute:
---------------     
    zimbraACE
        type="astring"
        cardinality="multi" (each value is an Access Control Entry, hence making an ACL)
        optionalIn="account,distributionList,cos,domain,globalConfig,server,zimletEntry" 
        
zimbraACE Format:
-----------------   
    {grantee-zimbraId} {grantee-type} [-]{right} 
    
        {grantee-zimbraId} = zimbraId of the grantee
        
        {grantee-type} = usr - grantee is an admin account
                         grp - grantee is a group of admin accounts
                         
        {right} = the right.
                  if a '-' (minus sign) is prepended to the right, it means the right is 
                  specifically denied.              
    
    examples:
        
        - On a domain target:    
              75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 usr createAccount
                  ==> admin account 75b0677b-6ed1-4f0a-a37e-e5b24e4c2d22 can create accounts in this domain.
                  
              55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 grp -setPassword
                  ==> None of any direct or indirect members of DL 55e1d53f-83cb-4d4c-a6a8-3b3da7841fd1 can  
                      set password for all accounts in this domain
    
        - On an account target:
              3b00a6bd-12ca-417d-9312-c5664a8c26b3 grp -setPassword
                  ==> None of any direct or indirect members of DL 3b00a6bd-12ca-417d-9312-c5664a8c26b3 can 
                      set password for this account.
                      
              c2e3fd70-97ac-43a4-8caa-4bf681251a49 usr manageQuota
                  ==> admin account c2e3fd70-97ac-43a4-8caa-4bf681251a49 can manage quota of this account.
                   
    
Indexing:
---------    
    zimbraACE is indexed.  This is to discover the "all rights granted to a grantee G" information for admin console.
    

Queries:
--------
    TODO
    
    
===================
4. Granting Rules
===================
When more than one ACEs of an ACL on the same right match a grantee and all ACEs 
don't agree on the same allow/deny for the right, the ACE with the most specific 
match takes precedence; and if all matching ACEs are equally related to the grantee, 
the negative ACE takes precedence.

example 1:
    - ACL has:
          . allow user A for right R
          . deny group G for right R
    - user A is in group G
    => user A will be allowed for right R, because user match is more specific than group match.
     
     
example 2:
    - ACL has:
          . allow group G1 for right R
          . deny group G2 for right R
    - group G2 is a member of group G1
    - user A is a member of group G2
    => user A will be denied for right R, because G2 is a more specific match than G1.
     
     
example 3:
    - ACL has:
          . allow group G1 for right R
          . deny group G2 for right R
    - group G1 and G2 are not member of each other
    - user A is in both group G1 and group G2
    => user A will be denied, because negative ACE takes precedence.
    
                
If multiple ACEs conflict for a right for the same grantee, this is a wrong setting, which 
should not happen if all modification to ACLs are done via the supported granting/revoking 
interfaces: SOAP and zmmailbox.   If for any reason such ACL does exist (e.g. 
via ldapmodify, or zmprov ma command(should we make zimberaACE immutable so 
it cannot be modified by zmprov?)), the result is **unexpected**, depending on 
which ACE is encountered first when we iterate through the ACL.  We could've 
spent more cycles detecting such settings and honor the negative ACE if there 
is one, but currently the implementation choice is not to do so.

e.g. - ACL has:
           . allow user A for right R
           . deny user A for right R
     => user A could be allowed or denied for right R, randomly.   
        
                          

===============
5. Admin SOAP
===============
5.1 GetAllRightsRequest
      Returns rights that are granted to the authed admin.
      A right is included in the GetRightsResponse is the admin has the right 
      for *any* target of the type.   For example, if the auth admin can 
      changePassword for acct-1 but not acct-2, the right changePassword will 
      be included under <account>.
      
      A right will be included only under the pertinent target type, regardless 
      of the target entry on which the right is granted.  For example, the changePassword 
      is a right on account entries.  If the changePassword right is granted to this 
      admin on a domain entry (which means this admin can change password for all accounts 
      in the domain), it will still be returned under <account>.

      The result can help the admin console decide on what target types to display. 
      For example, if the admin does not have any right on domain, it propably should hide 
      or gray out "domains" in the tree view.
      
<GetAllRightsRequest/>
  
<GetAllRightsResponse>
    <account>
        <right>{right}</right>+
    </account>
    <cos>
        <right>{right}</right>+
    </cos>
    <dl>
        <right>{right}</right>+
    </dl>
    <domain>
        <right>{right}</right>+
    </domain>
    <globalconfig>
        <right>{right}</right>+
    </globalconfig>
    <server>
        <right>{right}</right>+
    </server>
</GetAllRightsResponse>

    {right} = a right this admin can do for the target type.


5.2 GetRightsRequest
    Get rights the authed admin has on the target entry.
    
    The result can help the admin console decide on what tabs to display after a target 
    is selected.  For example, after user1 is selected, if the admin does not have right 
    to changePassword, it should probably hide or gray out the changePassword tab.
    
<GetRightsRequest>
    <target ttype="{target-type}" zid="{target-zimbraId}">
</GetRightsRequest>

    {target-type} = account|cos|dl|domain|globalconfig|server
    {target-zimbraId} = zimbraId of the target.  ignored if tt is globalconfig.
    
<GetRightsResponse>    
    <right>{right}</right>+
</GetRightsResponse>   


5.3 GetAllGrantsRequest
    Returns the full set of ACEs on all the objects for the authed admin account.
    (all the coses, domains, servers, explicit accounts/DLs, resources). 
    
    Unlike GetAllRightsResponse, GetAllGrantsResponse includes 
    
    The result of which can help the admin console decide on what to display on the 
    granting page/view. 
    
<GetAllGrantsRequest/>

<GetAllGrantsResponse>
    <account>
        <grant tname="{target-name} tid="{target-id}" [vianame="{via-grantee-name}" viaid="{via-grantee-id}"] right="{right}" [deny="{deny}"]>+
    </account>
    <cos>
        <grant tname="{target-name} tid="{target-id}" [vianame="{via-grantee-name}" viaid="{via-grantee-id}"] right="{right}" [deny="{deny}"]>+
    </cos>
    <dl>
        <grant tname="{target-name} tid="{target-id}" [vianame="{via-grantee-name}" viaid="{via-grantee-id}"] right="{right}" [deny="{deny}"]>+
    </dl>
    <domain>
        <grant tname="{target-name} tid="{target-id}" [vianame="{via-grantee-name}" viaid="{via-grantee-id}"] right="{right}" [deny="{deny}"]>+
    </domain>
    <globalconfig>
        <grant tname="{target-name} tid="{target-id}" [vianame="{via-grantee-name}" viaid="{via-grantee-id}"] right="{right}" [deny="{deny}"]>+
    </globalconfig>
    <server>
        <grant tname="{target-name} tid="{target-id}" [vianame="{via-grantee-name}" viaid="{via-grantee-id}"] right="{right}" [deny="{deny}"]>+
    </server>
</GetAllGrantsResponse>

    {target-name} = target entry name
    
    {target-id} = target entry id
    
    {via-grantee-name} = name of the group(distribution list) if the grant is via the group, not directly to the authed admin.
                         if the grant is directed granted to the authed admin, then {via-grantee-name} won't be present.
                         
                         For example, group admins-x can changePassword for account acct-1 and all users in domain domain-1;
                         if the authed admin is a member of group admins-x, then the grant will appear under <account> and 
                         <domain> and {via-grantee-name} will be "admins-x".
                         
    
    {via-grantee-id} = id of the group(distribution list) if the grant is via the group, not directly to the authed admin.
                       if the grant is directed granted to the authed admin, then {via-grantee-id} won't be present.
       
    
5.4 GrantPermissionRequest
    Grant permission to another admin.  The authed admin can only grant a subset of rights/targets granted to itself to 
    another admin.
    
<GrantPermissionRequest>
    <grant tname="{target-name} tid="{target-id}" right="{right}" [deny="{deny}"]>
<GrantPermissionRequest>    
    
<GrantPermissionResponse/>


5.5 RevokePermissionRequest
    Revoke permission previously granted to another admin.  

>>>>> OPEN-ISSUE-4
    how to decide if an admin can revoke another admins grants?
    have a revokeGrant right?                            
<<<<<
    
<RevokePermissionRequest>
    <grant tname="{target-name} tid="{target-id}" right="{right}" [deny="{deny}"]>
<RevokePermissionRequest>    
    
<RevokePermissionResponse/>   



===========
6. zmprov
===========
TODO

                
==========================
7. Backwards compatibility
==========================
- For current admins (zimbraIsAdminAccount), allow:
     - All permissions on global config
     - All permissions on all coses
     - All permissions on all domains
     - All permissions on all servers

- Current domain admins (zimbraIsDomainAdminAccount), allow:
     - All permissions on the domain

Customers can then turn off those bits and explicitly grant only the permissions they want to.


===========================
8. References, requirements
===========================
- Kevin Kluge's requirement doc: 
  https://dogfood.zimbra.com/home/kluge/Public/delegateAdmin

- http://bugzilla.zimbra.com/show_bug.cgi?id=11515
  role based delegate administration

- http://bugzilla.zimbra.com/show_bug.cgi?id=18277
  server side infrastructure for role based delegated administration




