<project name="ant-global">
    <!-- Set properties that can be used in all projects. -->
    <dirname property="zimbra.root.dir" file="${ant.file.ant-global}"/>

    <!-- Java -->
    <property name="javac.target" value="1.6"/>

    <!-- Ignore the classpath from the shell running ant.  This avoids dependency
      on the user's environment and suppresses the warning about includeAntRuntime. -->
    <property name="build.sysclasspath" value="ignore"/>

    <!-- Standard directory paths -->
    <property name="src.dir" location="src" />
    <property name="src.java.dir" location="src/java" />
    <property name="src.bin.dir" location="src/bin" />
    <property name="src.libexec.dir" location="src/libexec" />
    <property name="jars.dir" location="jars" />
    <property name="build.dir" location="build" />
    <property name="build.classes.dir" location="${build.dir}/classes" />
    <property name="test.dir" location="${build.dir}/test"/>
    <property name="test.src.dir" location="src/java-test"/>
    <property name="test.classes.dir" location="${build.dir}/test-classes"/>

    <!-- Standard install paths -->
    <property name="zimbra.home.dir" location="/opt/zimbra" />

    <!-- ZimbraCommon -->
    <property name="common.dir" location="${zimbra.root.dir}/ZimbraCommon"/>
    <property name="common.classes.dir" location="${common.dir}/build/classes"/>
    <property name="common.jarfile" location="${common.dir}/build/zimbracommon.jar"/>
    <property name="common.jars.dir" location="${common.dir}/jars"/>

    <!-- ZimbraServer -->
    <property name="server.dir" location="${zimbra.root.dir}/ZimbraServer"/>
    <property name="server.classes.dir" location="${server.dir}/build/classes"/>
    <property name="server.jarfile" location="${server.dir}/build/zimbrastore.jar"/>
    <property name="server.jars.dir" location="${server.dir}/jars"/>

    <!-- ZimbraSoap -->
    <property name="soap.dir" location="${zimbra.root.dir}/ZimbraSoap"/>
    <property name="soap.classes.dir" location="${soap.dir}/build/classes"/>
    <property name="soap.jarfile" location="${soap.dir}/build/zimbrasoap.jar"/>

    <!-- ZimbraIM -->
    <property name="im.dir" location="${zimbra.root.dir}/ZimbraIM"/>
    <property name="im.classes.dir" location="${im.dir}/build/classes"/>
    <property name="im.jarfile" location="${im.dir}/build/zimbraim.jar"/>
    <property name="im.jars.dir" location="${im.dir}/jars"/>

    <!-- Platform -->
    <condition property="native.os" value="MacOSX">
        <os name="Mac OS X"/>
    </condition>
    <condition property="native.os" value="Linux">
        <os name="Linux"/>
    </condition>
    <condition property="native.so" value="jnilib">
        <os name="Mac OS X"/>
    </condition>
    <condition property="native.so" value="so">
        <not><os name="Mac OS X"/></not>
    </condition>
    <condition property="native.arch" value="">
        <os name="Mac OS X"/>
    </condition>
    <condition property="native.arch" value=".${os.arch}">
        <not>
            <os name="Mac OS X"/>
        </not>
    </condition>
    <condition property="is-windows">
        <os family="windows"/>
    </condition>
    <condition property="is-unix">
        <not><os family="windows"/></not>
    </condition>

    <!-- Build version -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${common.jars.dir}/ant-contrib-1.0b1.jar"/>
        </classpath>
    </taskdef>
    <tstamp/>

    <condition property="zimbra.buildinfo.platform" value="${native.os}">
        <not><isset property="${zimbra.buildinfo.platform}"/></not>
    </condition>
    <condition property="zimbra.buildinfo.version" value="8.0.0_BETA1_1111">
        <not><isset property="${zimbra.buildinfo.version}"/></not>
    </condition>

    <propertyregex property="zimbra.buildinfo.majorversion"
                   input="${zimbra.buildinfo.version}"
                   regexp="([0-9]+)\.([0-9]+)\.([0-9]+)"
                   select="\1"
                   casesensitive="false" />

    <propertyregex property="zimbra.buildinfo.minorversion"
                   input="${zimbra.buildinfo.version}"
                   regexp="([0-9]+)\.([0-9]+)\.([0-9]+)"
                   select="\2"
                   casesensitive="false" />

    <propertyregex property="zimbra.buildinfo.microversion"
                   input="${zimbra.buildinfo.version}"
                   regexp="([0-9]+)\.([0-9]+)\.([0-9]+)"
                   select="\3"
                   casesensitive="false" />

    <propertyregex property="zimbra.buildinfo.relclass"
                   input="${zimbra.buildinfo.version}"
                   regexp="([0-9]+)\.([0-9]+)\.([0-9]+)_([A-Z]+)"
                   select="\4"
                   casesensitive="false" />
    <propertyregex property="zimbra.buildinfo.relnum"
                   input="${zimbra.buildinfo.version}"
                   regexp="([0-9]+)\.([0-9]+)\.([0-9]+)_([A-Z]+)([0-9]+)(\.|_)?"
                   select="\5"
                   casesensitive="false" />

    <propertyregex property="zimbra.buildinfo.buildnum"
                   input="${zimbra.buildinfo.version}"
                   regexp="([0-9]+)\.([0-9]+)\.([0-9]+)_([A-Z0-9]+)(\.|_)?([0-9]+)?"
                   select="\6"
                   casesensitive="false" />

    <condition property="zimbra.buildinfo.relnum" value="0">
        <not><isset property="${zimbra.buildinfo.relnum}"/></not>
    </condition>

    <condition property="zimbra.buildinfo.type" value="">
        <not><isset property="${zimbra.buildinfo.type}"/></not>
    </condition>
    <condition property="zimbra.buildinfo.release" value="${user.name}">
        <not><isset property="${zimbra.buildinfo.release}"/></not>
    </condition>
    <condition property="zimbra.buildinfo.date" value="${DSTAMP}-${TSTAMP}">
        <not><isset property="${zimbra.buildinfo.date}"/></not>
    </condition>
    <condition property="zimbra.buildinfo.host" value="${zimbra.server.hostname}">
        <not><isset property="${zimbra.buildinfo.host}"/></not>
    </condition>
    <property name="zimbra.buildinfo.all"
              value="Version: ${zimbra.buildinfo.version}; Type: ${zimbra.buildinfo.type}; Release: ${zimbra.buildinfo.release}; Built: ${zimbra.buildinfo.date}; Host: ${zimbra.buildinfo.host}"/>


    <!-- Create the Version class that prints the version of the jarfile.  This class
         is the Main-Class in the jarfile's manifest. -->
    <target name="generate-jar-version">
        <fail unless="build.dir" />
        <fail unless="build.classes.dir" />

        <if>
            <not><available file="${build.dir}/buildinfo/com/zimbra/buildinfo/Version.java"/></not>
            <then>
                <mkdir dir="${build.dir}/buildinfo/com/zimbra/buildinfo"/>
                <echo file="${build.dir}/buildinfo/com/zimbra/buildinfo/Version.java">
                    package com.zimbra.buildinfo;

                    public class Version {

                    public static void main(String[] args) {
                        Package p = Version.class.getPackage();
                        System.out.println("Implementation-Title: " + p.getImplementationTitle() +
                            "\nImplementation-Version: " + p.getImplementationVersion() +
                            "\nImplementation-Vendor: " + p.getImplementationVendor() + "\n");
                        }
                    }
                </echo>
            </then>
        </if>
        <javac destdir="${build.classes.dir}" debug="true" target="${javac.target}" srcdir="${build.dir}/buildinfo" />
    </target>

    <!-- Build a standard jar file that prints its version info when executed.  Optionally
         sets the Zimbra-Extension-Class attribute in the manifest if the zimbra.extension.class
         property is set. -->
    <target name="zimbra-jar" depends="generate-jar-version">
        <fail unless="jar.file"/>
        <fail unless="implementation.title"/>

        <if>
            <isset property="zimbra.extension.class"/>
            <then>
	        <jar destfile="${build.dir}/${jar.file}" basedir="${build.classes.dir}">
	            <manifest>
	                <attribute name="Main-Class" value="com.zimbra.buildinfo.Version" />
	                <attribute name="Implementation-Vendor" value="VMware, Inc."/>
	                <attribute name="Implementation-Title" value="${implementation.title}"/>
	                <attribute name="Implementation-Version" value="${zimbra.buildinfo.version}"/>
	                <attribute name="Specification-Vendor" value="VMware, Inc."/>
	                <attribute name="Specification-Title" value="Zimbra Collaboration Suite"/>
	                <attribute name="Specification-Version" value="${zimbra.buildinfo.majorversion}.${zimbra.buildinfo.minorversion}.${zimbra.buildinfo.microversion}"/>
	                <attribute name="Zimbra-Extension-Class" value="${zimbra.extension.class}"/>
	            </manifest>
	        </jar>
            </then>
            <else>
	        <jar destfile="${build.dir}/${jar.file}" basedir="${build.classes.dir}">
	            <manifest>
	                <attribute name="Main-Class" value="com.zimbra.buildinfo.Version" />
	                <attribute name="Implementation-Vendor" value="VMware, Inc."/>
	                <attribute name="Implementation-Title" value="${implementation.title}"/>
	                <attribute name="Implementation-Version" value="${zimbra.buildinfo.version}"/>
	                <attribute name="Specification-Vendor" value="VMware, Inc."/>
	                <attribute name="Specification-Title" value="Zimbra Collaboration Suite"/>
	                <attribute name="Specification-Version" value="${zimbra.buildinfo.majorversion}.${zimbra.buildinfo.minorversion}.${zimbra.buildinfo.microversion}"/>
	            </manifest>
	        </jar>
            </else>
        </if>
    </target>
    <target name="zmlocalconfig">
      <echo>Running localconfig with with argument: ${localconfig-args}</echo>
      <java classname="com.zimbra.cs.localconfig.LocalConfigCLI" fork="true" classpathref="class.path" failonerror="true">
        <arg line="${localconfig-args}"/>
      </java>
    </target>
</project>
